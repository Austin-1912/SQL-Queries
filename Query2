
// Set dates for the data preparation
SET R13_Start_date = DATEADD(MONTH,-15, LAST_DAY(GETDATE())+1);
SET R13_End_date = DATEADD(MONTH,-2, LAST_DAY(GETDATE())+1);
SET R24_Start_date =  DATEADD(MONTH,-27, LAST_DAY(GETDATE())+1);
SET FIRST_MONTH_OF_YEAR = DATE_TRUNC(year, DATEADD(MONTH,-1,CURRENT_DATE()));//2024-01-01


----- Create a base table for Receiver Dashboard -----

CREATE OR REPLACE TABLE R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE AS
SELECT
    RCVCUSTOMER_KEY,
    SNDCUSTOMER_KEY,
    TXN_ID,
    RECORD_DATETIME,
    DATE(RCVPAYING_DATETIME) TXN_DATE,
    RCVPAYING_DATETIME,
    DATE(RCVPAYING_DATETIME) AS RCV_TXN_DATE,
    DATE_TRUNC(MONTH,TXN_DATE) AS TXN_MONTH,
    SNDPRINCIPAL_USD AS PRINCIPAL,
    TOTAL_CHARGES_USD AS FEE,
    NET_FOREIGN_EXCHANGE AS FX,
    (TOTAL_CHARGES_USD + NET_FOREIGN_EXCHANGE) AS REVENUE,
    RCVPRINCIPAL_USD AS RCV_PRINCIPAL,
    PRICING_CHANNEL,
    CASE 
        WHEN SUB_CHANNEL IN ('DIGITAL PARTNERS DWL') THEN 'DWL' 
        WHEN PRICING_CHANNEL IN ('POS','TMT','AIR') THEN 'RETAIL' 
        WHEN PRICING_CHANNEL IN ('WEB','APP') THEN 'DIGITAL' END AS TXN_CHANNEL,
    SNDCURRENCY_CODE,
    RCVCURRENCY_CODE,
    RCV_SUPER_REGION REGION,
    SNDCOUNTRY_CODE,
    RCVCOUNTRY_CODE COUNTRY_CODE,
    SEND_COUNTRY_NAME,
    RCV_COUNTRY_NAME COUNTRY_NAME,
    SNDCOUNTRY_CODE ||'-'|| RCVCOUNTRY_CODE AS CORRIDOR,
    SEND_COUNTRY_NAME ||'-'|| RCV_COUNTRY_NAME AS CORRIDOR_NAME,
    SNDAGENT_NUMBER,
    RCVAGENT_NUMBER,
    NVL(PAYIN_TYPE,'NA') AS PAYIN_METHOD,
    SUB_PAYIN_TYPE as SUB_PAYIN_METHOD,
    PAYOUT_TYPE AS PAYOUT_METHOD,
    case when SUB_PAYOUT_TYPE='E-WALLET' then 'Wallet' else PAYOUT_METHOD end as SUB_PAYOUT_METHOD,
    case when SUB_CHANNEL IN ('DIGITAL PARTNERS DWL') then 'Y' else 'N' end as DWL_Cust_Flag,--,'DIGITAL PARTNERS DOP'
    COMPANY_BRAND,
    --case when NVL(TXN.PRODUCT_GROUP, 'NLL') IN ('QCOL', 'QCSH') then 'Bill_Payments' else 'MT' end txn_type,
    CASE 
        WHEN RCVPRINCIPAL_USD > 0 AND RCVPRINCIPAL_USD <= 50 THEN '1: $1 - $50'
        WHEN RCVPRINCIPAL_USD > 50 AND RCVPRINCIPAL_USD <= 100 THEN '2: $51 - $100'
        WHEN RCVPRINCIPAL_USD > 100 AND RCVPRINCIPAL_USD <= 200 THEN '3: $101 - $200'
        WHEN RCVPRINCIPAL_USD > 200 AND RCVPRINCIPAL_USD <= 400 THEN '4: $201 - $400'
        WHEN RCVPRINCIPAL_USD > 400 AND RCVPRINCIPAL_USD <= 600 THEN '5: $401 - $600'
        WHEN RCVPRINCIPAL_USD > 600 AND RCVPRINCIPAL_USD <= 800 THEN '6: $601 - $800'
        WHEN RCVPRINCIPAL_USD > 800 AND RCVPRINCIPAL_USD <= 1000 THEN '7: $801 - $1000'
        WHEN RCVPRINCIPAL_USD > 1000 AND RCVPRINCIPAL_USD <= 2000 THEN '8: $1001 - $2000'
        WHEN RCVPRINCIPAL_USD > 2000 THEN '9: $GT 2000'
         ELSE 'OTHER' END AS PRIN_BAND,
    CASE WHEN DIRECTION='DOMESTIC' THEN 'DMT' ELSE 'IMT' END AS DMT_IMT,
FROM 
    SUMMARY_GEN.wudna_txn_master_vw TXN 
WHERE 
    RCVCUSTOMER_KEY IS NOT NULL AND 
    RCVAGENT_NUMBER IS NOT NULL AND 
    VALID_TXN_TYPE_CODE='Y' AND 
    SNDAGENT_NUMBER <> 'AKC879730' AND 
    RCVAGENT_NUMBER <> 'AXX100000' AND
    NVL(TXN.PRODUCT_GROUP, 'NLL') NOT IN ('QCOL', 'QCSH','SWTP') AND --
    TXN.Refund_trxn='N' AND 
    TXN_MONTH > DATEADD(MONTH,1,$R24_Start_date)  AND 
    TXN_MONTH <= $R13_End_date  
;



----------------------------------------------------------------------
select * from R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE where TXN_CHANNEL is null limit 10;
select min(TXN_MONTH),max(TXN_MONTH) from R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE;
select DWL_Cust_Flag,TXN_CHANNEL ,count(*),count(distinct SNDCUSTOMER_KEY) from R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE group by all;
select count(*),count(distinct SNDCUSTOMER_KEY),count(distinct RCVCUSTOMER_KEY) from R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE;//113812377
------------------------------------------------------------------------------------------
----- Create R12 Receiver DB code ------
------------------------------------------------------------------------------------------


---- create customer related info ---
CREATE OR REPLACE TABLE R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 AS
WITH RCV_TRANSACTIONS_RAW AS (
SELECT
    *
FROM 
    R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE
    where 
        TXN_MONTH > DATEADD(MONTH,1,$R13_Start_date)  AND
        TXN_MONTH <= $R13_End_date  
)

,DOM_REGION AS (
SELECT
 RCVCUSTOMER_KEY,
 REGION,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_COUNTRY_CODE AS (
SELECT
 RCVCUSTOMER_KEY,
 COUNTRY_CODE,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_COUNTRY_NAME AS (
SELECT
 RCVCUSTOMER_KEY,
 COUNTRY_NAME,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

 ,DOM_IMT_DMT AS (
SELECT
 RCVCUSTOMER_KEY,
 DMT_IMT,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_CHANNEL AS (
SELECT
 RCVCUSTOMER_KEY,
 TXN_CHANNEL,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_COMPANY_BRAND AS (
SELECT
 RCVCUSTOMER_KEY,
 COMPANY_BRAND,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_PRICING_CHANNEL AS (
SELECT
 RCVCUSTOMER_KEY,
 PRICING_CHANNEL,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_PRIN_BAND AS (
SELECT
 RCVCUSTOMER_KEY,
 PRIN_BAND,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_RCV_CURRENCY AS (
SELECT
 RCVCUSTOMER_KEY,
 RCVCURRENCY_CODE,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_PAYOUT_METHOD AS (
SELECT
 RCVCUSTOMER_KEY,
 PAYOUT_METHOD,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_SUB_PAYOUT_METHOD AS (
SELECT
 RCVCUSTOMER_KEY,
 SUB_PAYOUT_METHOD,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_SUB_PAYIN_METHOD AS (
SELECT
 RCVCUSTOMER_KEY,
 SUB_PAYIN_METHOD,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_CORRIDOR AS (
SELECT
 RCVCUSTOMER_KEY,
 CORRIDOR AS DOM_CORRIDOR,
 CORRIDOR_NAME AS DOM_CORRIDOR_NAME,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2,3
)

,DOM_RCVAGENT AS (
SELECT
 RCVCUSTOMER_KEY,
 RCVAGENT_NUMBER AS DOM_RCVAGENT,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,PERIOD_WISE_TRANSACTIONS AS (
SELECT
RCVCUSTOMER_KEY,
MAX(RCV_TXN_DATE) RECENT_TRANSACTION_DT,
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,0,$R13_End_date) AND RCV_TXN_DATE <= LAST_DAY(DATE($R13_End_date)) THEN TXN_ID END) R1_TXN,        
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-1,$R13_End_date) AND RCV_TXN_DATE <= LAST_DAY(DATE($R13_End_date)) THEN TXN_ID END) R2_TXN,         
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-2,$R13_End_date) AND RCV_TXN_DATE <= LAST_DAY(DATE($R13_End_date)) THEN TXN_ID END) R3_TXN,         
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-3,$R13_End_date) AND RCV_TXN_DATE <= LAST_DAY(DATE($R13_End_date)) THEN TXN_ID END) R4_TXN,         
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-4,$R13_End_date) AND RCV_TXN_DATE <= LAST_DAY(DATE($R13_End_date)) THEN TXN_ID END) R5_TXN,        
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-5,$R13_End_date) AND RCV_TXN_DATE <= LAST_DAY(DATE($R13_End_date)) THEN TXN_ID END) R6_TXN,

COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-2,$R13_End_date) AND RCV_TXN_DATE <= DATEADD(MONTH,-1,LAST_DAY(DATE($R13_End_date))) THEN TXN_ID          END) R2_R3_TXN,           
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-5,$R13_End_date) AND RCV_TXN_DATE <= DATEADD(MONTH,-3,LAST_DAY(DATE($R13_End_date))) THEN TXN_ID 
      END) R4_R6_TXN,          
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-11,$R13_End_date) AND RCV_TXN_DATE <= DATEADD(MONTH,-6,LAST_DAY(DATE($R13_End_date))) THEN TXN_ID 
      END) R7_R12_TXN,      

COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-11,$R13_End_date) THEN TXN_ID END) R12_TXN         
 
FROM RCV_TRANSACTIONS_RAW
  GROUP BY 1
)

,PERIOD_WISE_STATUS AS (
SELECT
  RCVCUSTOMER_KEY,
  RECENT_TRANSACTION_DT,
  R1_TXN,
  R2_R3_TXN,
  R3_TXN,  
  R4_R6_TXN,
  R6_TXN,
  R7_R12_TXN,
  R12_TXN,
  CASE WHEN R1_TXN > 0 THEN 'Y' ELSE 'N' END AS R1_ACTIVE,
  CASE WHEN R3_TXN > 0 THEN 'Y' ELSE 'N' END AS R3_ACTIVE,
  CASE WHEN R6_TXN > 0 THEN 'Y' ELSE 'N' END AS R6_ACTIVE,
  CASE WHEN R12_TXN > 0 THEN 'Y' ELSE 'N' END AS R12_ACTIVE,
  
  CASE WHEN R1_TXN = 0 AND R3_TXN > 0 THEN 'Y' ELSE 'N' END AS R2_R3_ACTIVE,
  CASE WHEN R3_TXN = 0 AND R6_TXN > 0 THEN 'Y' ELSE 'N' END AS R4_R6_ACTIVE,
  CASE WHEN R6_TXN = 0 AND R12_TXN > 0 THEN 'Y' ELSE 'N' END AS R7_R12_ACTIVE
FROM PERIOD_WISE_TRANSACTIONS
)

,CUSTOMER_R12_TRANSACTIONS AS (
SELECT
C.RCVCUSTOMER_KEY, 
COUNT(TXN_ID) RCV_TXNS_R12,
NVL(SUM(PRINCIPAL ),0) RCV_PRINCIPAL_R12,--taken sender principal
NVL(SUM(FEE ),0) RCV_FEE_R12,
NVL(SUM(REVENUE ),0) RCV_REVENUE_R12,
  
COUNT(CASE WHEN TXN_CHANNEL = 'DIGITAL' THEN TXN_ID END) RCV_DIGITAL_R12,
COUNT(CASE WHEN TXN_CHANNEL = 'RETAIL' THEN TXN_ID END) RCV_RETAIL_R12,
  
COUNT(CASE WHEN PRICING_CHANNEL = 'APP' THEN TXN_ID END) RCV_APP_R12,
COUNT(CASE WHEN PRICING_CHANNEL = 'WEB' THEN TXN_ID END) RCV_WEB_R12,
  
COUNT(CASE WHEN DMT_IMT = 'DMT' THEN TXN_ID END) AS DMT_R12,
COUNT(CASE WHEN DMT_IMT = 'IMT' THEN TXN_ID END) AS IMT_R12,
  
COUNT(CORRIDOR) CORRIDORS,
COUNT(RCVCURRENCY_CODE) RCVCURRENCY_COUNT,
COUNT(SNDCUSTOMER_KEY) SENDER_COUNT,
MODE(DWL_Cust_Flag) as DWL_Cust_Flag,
  
FROM PERIOD_WISE_STATUS C  
INNER JOIN RCV_TRANSACTIONS_RAW T ON C.RCVCUSTOMER_KEY = T.RCVCUSTOMER_KEY
GROUP BY 1
)

,SENDER_R12_TRANSACTIONS AS (
SELECT
SNDCUSTOMER_KEY, 
COUNT(TXN_ID) SENDER_TXNS_R12,
NVL(SUM(PRINCIPAL ),0) SENDER_PRINCIPAL_R12,
NVL(SUM(REVENUE ),0) SENDER_REVENUE_R12,
NVL(SUM(FEE ),0) SENDER_FEE_R12,
FROM 
RCV_TRANSACTIONS_RAW
GROUP BY 1
)

,RESP_IPF_CALC_T1 as(
SELECT 
    sndcustomer_key CUSTOMER_key,
    --date_trunc(month,RCVPAYING_DATETIME) mth_yr, 
    RCVPAYING_DATETIME,
    ROW_NUMBER() OVER (PARTITION BY sndcustomer_key ORDER BY RCVPAYING_DATETIME DESC) AS RANK_DATE       
FROM  
    RCV_TRANSACTIONS_RAW )		

,RESP_IPF_CALC_T2 as(
Select
  A.*
From
RESP_IPF_CALC_T1 a
Where  RANK_DATE <= 6 )

,RESP_IPF_CALC_T3 as (
Select
  Customer_Key,
  count(1) Txn_Cnt  
From
  RESP_IPF_CALC_T2                              
where customer_key is not null
GROUP BY Customer_key
Having
  count(1) >= 3 )


,RESP_IPF_CALC_T4 as (
Select
  A.*, b.TXN_CNT
From
  RESP_IPF_CALC_T2 a,
  RESP_IPF_CALC_T3 b
Where
  a.Customer_key = b.Customer_key )


,RESP_IPF_CALC_T5 as (
  select
  customer_key,
  TXN_CNT,
  min( RCVPAYING_DATETIME ) first_SndTxn_Dt,
  max( RCVPAYING_DATETIME ) Last_SndTxn_Dt
From
  RESP_IPF_CALC_T4 GROUP BY customer_key, Txn_Cnt)

,RESP_IPF_CALC_T6 as (
Select
  customer_key,
  Txn_Cnt,
  datediff(day,first_SndTxn_Dt,Last_SndTxn_Dt) tenure,
  datediff(day,Last_SndTxn_Dt,last_day($R13_End_date)) days_since_last_txn,
  Last_SndTxn_Dt
From
  RESP_IPF_CALC_T5 )
  

,RESP_IPF_CALC_T7 AS (
Select
  customer_key,
  Txn_Cnt,           
  tenure/(Txn_Cnt-1) as IPF,					
  days_since_last_txn - IPF as IPF_overdue,
  datediff(day,Last_SndTxn_Dt,last_day($R13_End_date)) as latest_Ipf,
  days_since_last_txn
From
  RESP_IPF_CALC_T6 )


,RESP_IPF_CALC_T8 as (
Select
  *,
  case when latest_Ipf > (1.2*Ipf) then 'Decelerating'
  when latest_Ipf < (0.8*Ipf) then 'Accelerating'
  else 'Stable' end Ipf_Change,
  Case 
	when txn_cnt = 0 then '0 lost'
	when txn_cnt = 1 then '1 timer'
	when latest_Ipf <= 0.5*IPF then 'Ahead Schedule'			
	when latest_Ipf <= 1*IPF   then 'On Schedule'
	when latest_Ipf <= 2*IPF   then '1 beat late'
	when latest_Ipf <= 3*IPF   then '2 beats late'
	when latest_Ipf <= 4*IPF   then '3 beats late'
	when latest_Ipf <= 5*IPF   then '4 beats late'
	when latest_Ipf >  5*IPF   then '5 beats plus late'
else null end as beats
From
  RESP_IPF_CALC_T7 )


SELECT 
PS.RCVCUSTOMER_KEY,

CASE WHEN R1_ACTIVE = 'Y' THEN 'R1 ACTIVE'
     WHEN R2_R3_ACTIVE = 'Y' THEN 'R2-R3 ACTIVE'
     WHEN R4_R6_ACTIVE = 'Y' THEN 'R4-R6 ACTIVE'
     WHEN R7_R12_ACTIVE = 'Y' THEN 'R7-R12 ACTIVE'
     END AS ACTIVITY_STATUS,

DOM_REGION1.REGION REGION,
DOM_COUNTRY_CODE1.COUNTRY_CODE COUNTRY_CODE,
DOM_COUNTRY_NAME1.COUNTRY_NAME COUNTRY_NAME,
CASE WHEN DOM_COUNTRY_CODE1.COUNTRY_CODE IN ('BE', 'AU', 'JM', 'ES', 'AR', 'CY', 'KW', 'PL', 'IT', 'TR', 'GB', 'MY', 'NL', 'PA', 'LU', 'FR', 
                                             'SG','US','RU', 'SA', 'AE', 'GA', 'NG', 'CA', 'CI', 'PT', 'PH', 'CH', 'JO', 'DE', 'BH', 'QA', 'AT', 
                                             'RO','SN', 'OM') 
           THEN 'MyWU' ELSE 'Non-MyWU' END AS MYWU_COUNTRY,
CASE WHEN MYWU_COUNTRY = 'Non-MyWU' THEN 'Non-MyWU'
     WHEN MYWU_COUNTRY = 'MyWU' AND DOM_COUNTRY_CODE1.COUNTRY_CODE IN ('AR','CA','PA','AU','BE','FR','GB','MY','NL','PH','PL','RO','AE','IT')
     THEN 'UTR' 
     ELSE 'Non-UTR' END AS UTR_MYWUCOUNTRY,

RECENT_TRANSACTION_DT,
NVL(CAS.GENDER,'NA') AS GENDER,
NVL(CAS.AGE, 'NA') AS AGE,
COMPANY_BRAND,
DOM_CORRIDOR,
DOM_CORRIDOR_NAME,
DOM_RCVAGENT,
PRIN_BAND AS DOM_PRIN_BAND,
RCVCURRENCY_CODE AS DOM_RCVCURRENCY,
DC.TXN_CHANNEL AS DOM_TXN_CHANNEL,
PRICING_CHANNEL AS DOM_PRICING_CHANNEL,
DMT_IMT AS DOM_IMT_DMT,

CASE WHEN SUBSTR(DOM_CORRIDOR,1,2) = SUBSTR(DOM_CORRIDOR,4,5) THEN 'DMT' ELSE 'IMT' END AS CORRIDOR_TYPE,   

CASE WHEN PAYOUT_METHOD = 'OTHERS' THEN 'OTHER'
     WHEN PAYOUT_METHOD = 'ACCOUNT' THEN 'ACCOUNT'
     WHEN PAYOUT_METHOD = 'MOBILE' THEN 'MOBILE'
     WHEN PAYOUT_METHOD = 'CASH' THEN 'CASH'
     ELSE 'N/A' END DOM_PAYOUT,
     
SUB_PAYIN_METHOD as DOM_SUB_PAYIN_METHOD,

SUB_PAYOUT_METHOD AS DOM_SUB_PAYOUT_METHOD,
    
CASE WHEN RCV_RETAIL_R12 = 0 AND RCV_DIGITAL_R12 = 0 THEN 'INACTIVE'
     WHEN RCV_RETAIL_R12 = 0 THEN 'Digital Only'
     WHEN RCV_DIGITAL_R12 = 0 THEN 'Retail Only'
     ELSE 'Retail+Digital' END AS NATIVE_CHANNEL,

case when RCV_TXNS_R12 = 1 then '1'
     when RCV_TXNS_R12 > 1 and RCV_TXNS_R12 <= 3 then '2-3'
     when RCV_TXNS_R12 > 3 and RCV_TXNS_R12 <= 6 then '4-6'
     when RCV_TXNS_R12 > 6 and RCV_TXNS_R12 <= 9 then '7-9'
     when RCV_TXNS_R12 > 9 and RCV_TXNS_R12 <= 12 then '10-12'
     when RCV_TXNS_R12 > 12 then '>12' else 'Missing' end as RCV_TXNS_R12_Group,
RCV_TXNS_R12,
RCV_APP_R12,
RCV_WEB_R12,
RCV_DIGITAL_R12,
RCV_RETAIL_R12,
RCV_PRINCIPAL_R12,
RCV_FEE_R12,
RCV_REVENUE_R12,
SENDER_COUNT,
T8.beats,

CASE WHEN SENDER_COUNT > 1 THEN 'via Multiple Senders' ELSE 'Single Sender Only' END AS MULTI_SENDER,

NVL(SENDER.SENDER_TXNS_R12,0) AS SEND_TXNS_R12,
NVL(SENDER.SENDER_PRINCIPAL_R12,0) AS SEND_PRINCIPAL_R12,
NVL(SENDER.SENDER_FEE_R12,0) AS SEND_FEE_R12,
NVL(SENDER.SENDER_REVENUE_R12,0) AS SEND_REVENUE_R12,

CASE WHEN SEND_TXNS_R12 > 0 AND RCV_TXNS_R12 > 0 THEN 'Send + Receive'
     WHEN SEND_TXNS_R12 = 0 AND RCV_TXNS_R12 > 0 THEN 'Receive Only'
     WHEN SEND_TXNS_R12 > 0 AND RCV_TXNS_R12 = 0 THEN 'Send Only'
     ELSE 'NA' END AS SND_RCV_FLAG,
     
CASE WHEN IMT_R12 = 0 AND DMT_R12 > 0 THEN 'DMT Only'
     WHEN IMT_R12 > 0 AND DMT_R12 = 0 THEN 'IMT Only'
     ELSE 'IMT+DMT' END AS NATIVE_IMT_DMT,
     
CASE WHEN SENDER_COUNT = 1 THEN ' 1'
     WHEN SENDER_COUNT = 2 THEN ' 2'
     WHEN SENDER_COUNT = 3 THEN ' 3'
     WHEN SENDER_COUNT = 4 THEN ' 4'
     WHEN SENDER_COUNT >= 5 THEN ' 5+'
     ELSE 'NA' END AS SENDER_DISTRIBUTION,
CT.DWL_Cust_Flag

FROM PERIOD_WISE_STATUS PS
INNER JOIN CUSTOMER_R12_TRANSACTIONS CT ON PS.RCVCUSTOMER_KEY = CT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_REGION WHERE RANK =1) DOM_REGION1 ON PS.RCVCUSTOMER_KEY = DOM_REGION1.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_COUNTRY_CODE WHERE RANK =1) DOM_COUNTRY_CODE1 ON PS.RCVCUSTOMER_KEY = DOM_COUNTRY_CODE1.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_COUNTRY_NAME WHERE RANK =1) DOM_COUNTRY_NAME1 ON PS.RCVCUSTOMER_KEY = DOM_COUNTRY_NAME1.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_RCV_CURRENCY WHERE RANK =1) RCVCURR ON PS.RCVCUSTOMER_KEY = RCVCURR.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_CHANNEL WHERE RANK=1) DC ON PS.RCVCUSTOMER_KEY = DC.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_CORRIDOR WHERE RANK=1) CO ON PS.RCVCUSTOMER_KEY = CO.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_RCVAGENT WHERE RANK=1) SA ON PS.RCVCUSTOMER_KEY = SA.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_PAYOUT_METHOD WHERE RANK=1) POUT ON PS.RCVCUSTOMER_KEY = POUT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_SUB_PAYIN_METHOD WHERE RANK=1) PSBPT ON PS.RCVCUSTOMER_KEY = PSBPT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_SUB_PAYOUT_METHOD WHERE RANK=1) PSBOT ON PS.RCVCUSTOMER_KEY = PSBOT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_PRICING_CHANNEL WHERE RANK=1) PC ON PS.RCVCUSTOMER_KEY = PC.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_PRIN_BAND  WHERE RANK=1) PRIN ON PS.RCVCUSTOMER_KEY = PRIN.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_COMPANY_BRAND  WHERE RANK=1) BRAND ON PS.RCVCUSTOMER_KEY = BRAND.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_IMT_DMT  WHERE RANK=1) DMT_IMT ON PS.RCVCUSTOMER_KEY = DMT_IMT.RCVCUSTOMER_KEY
LEFT JOIN SUMMARY_GEN.COUNTRY_VW REG ON DOM_COUNTRY_CODE1.COUNTRY_CODE = REG.COUNTRY_CODE
LEFT JOIN CUSTOMER_ADDNL_VW CAS ON PS.RCVCUSTOMER_KEY = CAS.CUSTOMER_KEY
LEFT JOIN SENDER_R12_TRANSACTIONS SENDER ON SENDER.SNDCUSTOMER_KEY = PS.RCVCUSTOMER_KEY
LEFT JOIN RESP_IPF_CALC_T8 T8 on T8.CUSTOMER_KEY = PS.RCVCUSTOMER_KEY;


----------------------------------------------------------------------------------------------------------------------------------
select max(RECENT_TRANSACTION_DT) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1;

select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;

select count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;//71060846

select RCV_TXNS_R12_Group,count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1  group by all;

select count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 where RCV_TXNS_R12_Group = 'Missing';

select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 where RCV_TXNS_R12_Group = 'Missing';

select DOM_SUB_PAYOUT_METHOD,count(*) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;

select DOM_TXN_CHANNEL,count(*) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;

select DWL_CUST_FLAG,count(*) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;//5543000
---------------------------------------------------------------------------------------


select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;;
--- create table with agent details ---
CREATE OR REPLACE TABLE R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 AS
WITH AGENT_LOOKUP AS (
SELECT 
DISTINCT 
  DOMINANT_AGENT_NUMBER,
  BUSINESS_NAME,
  NETWORK_NAME,
  UPPER(NVL(NETWORK_NAME,BUSINESS_NAME)) AS AGENT_NETWORK
FROM CEX_SANDBOX.PK_DOMINANT_AGENT_NETWORK 
)
SELECT
T1.*,
NVL(AGENT_NETWORK,AGENT_NETWORK_NAME_CLEANED) AS AGENT_NETWORK      
FROM R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 T1 
LEFT JOIN AGENT_LOOKUP AL ON T1.DOM_RCVAGENT = AL.DOMINANT_AGENT_NUMBER
LEFT JOIN CEF_AGENTS_AND_NETWORKS_NAMES AN ON T1.DOM_RCVAGENT = AN.AGENT_NUMBER
WHERE REGION IS NOT NULL;


select * from CEF_AGENTS_AND_NETWORKS_NAMES limit 10;
-----------------------------------------------------------------------------------------

---- Add cust level data---

CREATE OR REPLACE TABLE R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 AS
select
    T2.*,
    NVL(DMA.LOYALTY_MEMBER_FLAG,'N') AS LOYALTY_MEMBER,
    
    NVL(DMA.REGISTERED_CUSTOMER_FLAG,'N') AS REGISTERED_CUSTOMER,
    
    DMA.FIRST_REGISTRATION_DATE AS REGISTRATION_DATE,
    
    CASE WHEN COUNTRY_CODE IN ( 'US' ,'AE' ,'FR' ,'RU' ,'CA' ,'DE' ,'IT' ,'KW' ,'PH ','SA' ,'JO' ,'QA' ,'AU' ,'MY' ,'SG' ,'ES' ,'AR' ,'NL',                                         'BE', 'CH', 'GB', 'BH', 'CI', 'PA', 'AT', 'PT', 'JM', 'SN', 'TR', 'OM', 'PL', 'GA', 'NG', 'LU', 'CY', 'RO')                                      AND DMA.LOYALTY_MEMBER_FLAG = 'Y' THEN 'Y' ELSE 'N' END AS LOYALTY_MEMBER_FLAG,
    
    CASE WHEN COUNTRY_CODE IN ( 'US' ,'AE' ,'FR' ,'RU' ,'CA' ,'DE' ,'IT' ,'KW' ,'PH ','SA' ,'JO' ,'QA' ,'AU' ,'MY' ,'SG' ,'ES' ,'AR' ,'NL',                                         'BE', 'CH', 'GB', 'BH', 'CI', 'PA', 'AT', 'PT', 'JM', 'SN', 'TR', 'OM', 'PL', 'GA', 'NG', 'LU', 'CY', 'RO')                                      THEN 'MYWU_COUNTRY' ELSE 'NON_MYWUCOUNTRY' END AS MYWUCOUNTRY_STATUS,
    
    case when DMA.email_address_on_file_flag = 'Y' or DMA.mobile_number_on_file_flag = 'Y' then 'Y' else 'N' end as contactability_Flag,
    
    case when DMA.mobile_number_on_file_flag = 'Y' then 'Y' else 'N' end as SMS_contactable,
    
    case when DMA.email_address_on_file_flag = 'Y' then 'Y' else 'N' end as Email_contactable,
    
    case when SMS_contactable = 'N' and   Email_contactable = 'Y' then 'Only_Email'
         when SMS_contactable = 'Y' and   Email_contactable = 'N' then 'Only_SMS' 
         when SMS_contactable = 'Y' and   Email_contactable = 'Y' then 'Email_SMS'  
         else 'Non_Contactable' end as Contactability,
    
    case when DMA.mobile_number_on_file_flag = 'Y' and DMA.opt_sms = 'I' then 'Y' else 'N' end as Mobile_contactable_1,
    
    case when DMA.email_address_on_file_flag = 'Y' and DMA.OPT_EMAIL = 'I' then 'Y' else 'N' end as Email_contactable_1,
    
    case when Mobile_contactable_1 = 'N' and   Email_contactable_1 = 'Y' then 'Only_Email'
         when Mobile_contactable_1 = 'Y' and   Email_contactable_1 = 'N' then 'Only_SMS' 
         when Mobile_contactable_1 = 'Y' and   Email_contactable_1 = 'Y' then 'Email_SMS'  
         else 'Non_Contactable' end as Contactability_1,

    //Marketability
    case when DMA.marketing_flag = 'Y' and DMA.mobile_number_on_file_flag ='Y' and DMA.opt_sms='I' then 'Y' else 'N' end as SMS_Marketablility,
    
    case when DMA.marketing_flag = 'Y' and DMA.email_address_on_file_flag ='Y' and DMA.OPT_EMAIL='I' then 'Y' else 'N'
         end as Email_Marketablility,
    
    case when SMS_Marketablility = 'Y' and Email_Marketablility = 'N' then 'Only_SMS'
         when SMS_Marketablility = 'N' and Email_Marketablility = 'Y' then 'Only_Email'
         when SMS_Marketablility = 'Y' and Email_Marketablility = 'Y' then 'Email_SMS'
         else 'Non_Marketable'  end as Marketability,

    case when COUNTRY_CODE in  
         ('AF','AI','AG','AW','BD','BB','BZ','BT','BO','BW','BN','BI','KH','CM','KY','CF','CL','KM','CD','CG','CK','CU','CW','DJ','DM',
         'DO','TP','EC','SV','ER','SZ','ET','FK','FJ','GF','PF','GM','GD','GP','GU','GT','GN','GW','GY','HT','HN','IQ','JM','JO','KI','KG',
         'LA','LR','LY','MG','MW','MV','MH','MQ','YT','MX','FM','MN','MS','MZ','MM','NA','NR','NC','NI','NU','PK','PW','P1','PA','PG','PY',
         'RE','RW','BL','KN','LC','MF','VC','WS','SC','SL','SX','SB','SO','XA','SS','SD','SR','SY','TJ','TZ','TO','TT','TM','TC','TV','UY',
         'VU','VE','VG','YE','ZM','ZW','LS','SZ','AM','LB','AR','TN','CI','BA','CR','ML','AZ','KZ','BS','TD','MR','GQ','MO','BM')
          then Contactability_1
          when COUNTRY_CODE not in  
         ('AF','AI','AG','AW','BD','BB','BZ','BT','BO','BW','BN','BI','KH','CM','KY','CF','CL','KM','CD','CG','CK','CU','CW','DJ','DM',
         'DO','TP','EC','SV','ER','SZ','ET','FK','FJ','GF','PF','GM','GD','GP','GU','GT','GN','GW','GY','HT','HN','IQ','JM','JO','KI','KG',
         'LA','LR','LY','MG','MW','MV','MH','MQ','YT','MX','FM','MN','MS','MZ','MM','NA','NR','NC','NI','NU','PK','PW','P1','PA','PG','PY',
         'RE','RW','BL','KN','LC','MF','VC','WS','SC','SL','SX','SB','SO','XA','SS','SD','SR','SY','TJ','TZ','TO','TT','TM','TC','TV','UY',
         'VU','VE','VG','YE','ZM','ZW','LS','SZ','AM','LB','AR','TN','CI','BA','CR','ML','AZ','KZ','BS','TD','MR','GQ','MO','BM')
          then Marketability
          else 'NA' end as Marketability_1,
    
    case when Marketability_1 = 'Non_Contactable' then 'Non_Marketable' else Marketability_1 end as Marketability_New,
    
    case when Marketability_New = 'Non_Marketable' then 'N' else 'Y' end as Marketability_Flag,
    
    case when DMA.opt_sms = 'O' then 'Y' else 'N' end as Sms_Opt_out_Flag,
    
    case when DMA.OPT_EMAIL = 'O' then 'Y' else 'N' end as Email_Opt_out_Flag,
    
    case when DMA.loyalty_member_flag = 'Y' then 'Y' else 'N' end as Loyalty_Flag,
    
    DMA.HVC_FLAG,
    
    CASE WHEN DMA.OPT_SHARE = 'I' THEN 'Y' ELSE 'N' END AS OPT_3RD_PARTY, 
    
    DMA.DMA_CODE,
    
    DMA.DMA as CUSTOMER_DMA
FROM 
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 T2
LEFT JOIN 
    (SELECT
        CUSTOMER_KEY,
        REGISTERED_CUSTOMER_FLAG,
        FIRST_REGISTRATION_DATE,
        HVC_FLAG,
        LOYALTY_MEMBER_FLAG,
        OPT_SHARE,
        marketing_flag,
        mobile_number_on_file_flag,
        email_address_on_file_flag,
        opt_sms,
        OPT_EMAIL,
        NVL(ZIP.DMA_CODE,'N/A') AS DMA_CODE,
        NVL(DMA_DESC,'N/A') AS DMA
    FROM 
        SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW CM 
    LEFT JOIN 
        SUMMARY_GEN.COUNTRY_VW CN 
            ON CM.COUNTRY_CODE = CN.COUNTRY_CODE
    LEFT JOIN 
        SUMMARY_GEN.DMA_ZIPCODE_VW ZIP 
            ON CM.ZIP_POSTAL_CODE = ZIP.ZIP_CODE
    LEFT JOIN 
        SUMMARY_GEN.DMA_VW DMA 
            ON ZIP.DMA_CODE = DMA.DMA_CODE) DMA  
    ON T2.RCVCUSTOMER_KEY = DMA.CUSTOMER_KEY 
;


-------------------------QC------------------------------
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 limit 10;
select count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 limit 10;//71060846

select distinct Marketability_New from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3;

select distinct Marketability_Flag from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3;

select DOM_TXN_CHANNEL,  count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by all;

select COUNTRY_CODE, Marketability_New , count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 
group by 1,2 having country_code='MX' order by 3 desc;
/*
COUNTRY_CODE	MARKETABILITY_NEW	COUNT(DISTINCT RCVCUSTOMER_KEY)
MX	Non_Marketable	5328592
MX	Only_SMS	1223305
MX	Email_SMS	281280
MX	Only_Email	242239
*/

select COUNTRY_CODE, Marketability_Flag , count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 
group by 1,2 having country_code='MX' order by 3 desc;
/*
COUNTRY_CODE	MARKETABILITY_FLAG	COUNT(DISTINCT RCVCUSTOMER_KEY)
MX	N	5328592
MX	Y	1746824
*/


select COUNTRY_CODE, Marketability, count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 
group by 1,2 having country_code='MX' order by 3 desc;
/*
COUNTRY_CODE	MARKETABILITY	COUNT(DISTINCT RCVCUSTOMER_KEY)
MX	Non_Marketable	5328643
MX	Only_SMS	1223271
MX	Email_SMS	281267
MX	Only_Email	242235
*/

select distinct opt_sms from SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW;//

select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 limit 10;

select AGENT_NETWORK,sum(RCV_TXNS_R12),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 where COUNTRY_CODE ='MX' group by all;

--------------------------------------------------------------------------------------------------------

--- Receiver final table --
CREATE OR REPLACE TABLE R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 AS

WITH CORRIDOR AS (
SELECT 
COUNTRY_CODE,
DOM_CORRIDOR,
DOM_CORRIDOR_NAME,
COUNT(1) CUSTOMERS,
ROW_NUMBER() OVER (PARTITION BY COUNTRY_CODE ORDER BY COUNT(1) DESC) CORR_RANK,
CORR_RANK||'.'||DOM_CORRIDOR AS RANKED_CORR
FROM R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3
 GROUP BY 1,2,3
 ORDER BY 3 DESC
)
, TOP_CORRIDOR AS (
  SELECT
  COUNTRY_CODE,
  NVL(DOM_CORRIDOR,'NA') AS DOM_CORRIDOR,
  NVL(DOM_CORRIDOR_NAME,'NA') AS DOM_CORRIDORNAME,
  CUSTOMERS,
  CORR_RANK,
  RANKED_CORR
  FROM CORRIDOR
)

,AGENT AS (
SELECT 
COUNTRY_CODE,
AGENT_NETWORK,
COUNT(1) CUSTOMERS,
ROW_NUMBER() OVER (PARTITION BY COUNTRY_CODE ORDER BY COUNT(1) DESC) AGENT_RANK,
AGENT_RANK||'.'||AGENT_NETWORK AS RANKED_AGENT
FROM R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3
  WHERE DOM_PAYOUT IN ('CASH') 
 GROUP BY 1,2
 ORDER BY 3 DESC
)
,TOP_AGENT AS (
  SELECT
  COUNTRY_CODE,
  AGENT_NETWORK,
  CUSTOMERS,
  AGENT_RANK,
  RANKED_AGENT
  FROM AGENT
)

, DMA AS (
SELECT 
COUNTRY_CODE,
CUSTOMER_DMA,
COUNT(1) CUSTOMERS,
ROW_NUMBER() OVER (PARTITION BY COUNTRY_CODE ORDER BY COUNT(1) DESC) DMA_RANK,
DMA_RANK||'.'||CUSTOMER_DMA AS RANKED_DMA
FROM R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3
  WHERE 
  COUNTRY_CODE = 'US'
 GROUP BY 1,2
 ORDER BY 3 DESC
)
, TOP_DMA AS (
  SELECT
  COUNTRY_CODE,
  CUSTOMER_DMA,
  CUSTOMERS,
  DMA_RANK,
  RANKED_DMA
  FROM DMA
)

SELECT
T2.*,
DMA_RANK,
CASE WHEN DMA_RANK IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) THEN RANKED_DMA ELSE 'OTHER' END AS TOP_DMA,
AGENT_RANK,
CASE WHEN DOM_TXN_CHANNEL = 'RETAIL' AND AGENT_RANK IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) THEN RANKED_AGENT ELSE 'OTHER' END AS TOP_AGENT,
CORR_RANK,
CASE WHEN CORR_RANK IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) THEN RANKED_CORR ELSE 'OTHER' END AS TOP_CORRIDOR

FROM R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 T2
LEFT JOIN TOP_DMA DMA ON T2.COUNTRY_CODE = DMA.COUNTRY_CODE AND T2.CUSTOMER_DMA = DMA.CUSTOMER_DMA
LEFT JOIN TOP_AGENT AG ON T2.COUNTRY_CODE = AG.COUNTRY_CODE AND T2.AGENT_NETWORK = AG.AGENT_NETWORK 
LEFT JOIN TOP_CORRIDOR CORR ON T2.COUNTRY_CODE = CORR.COUNTRY_CODE AND T2.DOM_CORRIDOR = CORR.DOM_CORRIDOR;


--------------------------------------------------------------------
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;

select AGENT_NETWORK,sum(RCV_TXNS_R12),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 where COUNTRY_CODE ='MX' group by all;
select TOP_AGENT,sum(RCV_TXNS_R12),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 where COUNTRY_CODE ='MX' group by all;

select count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;//71060846

select DOM_TXN_CHANNEL,count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 GROUP BY ALL;
select DOM_PRICING_CHANNEL,count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 GROUP BY ALL;
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 where  RCVCUSTOMER_KEY in (select RCVCUSTOMER_KEY from (select RCVCUSTOMER_KEY , count(*) as cnt from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 group by 1 having cnt > 1)) limit 10;

-------------------------------------------------------------------------


------ aggregrate level R12 receiver table-------

CREATE OR REPLACE TABLE R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED  AS 
SELECT
    RCV.ACTIVITY_STATUS,
    RCV.REGION,
    RCV.COUNTRY_NAME,
    RCV.COUNTRY_CODE,
    CASE WHEN RCV.COUNTRY_NAME IN ('FRANCE','UNITED STATES','CANADA','UNITED KINGDOM','AUSTRALIA','GERMANY')
         THEN RCV.COUNTRY_NAME END AS TOP_COUNTRY,
    RCV.REGISTERED_CUSTOMER,
    RCV.LOYALTY_MEMBER,
    RCV.mywucountry_status,
    RCV.Contactability_Flag as FLAG_CONTACTABLE,
    RCV.SMS_contactable,
    RCV.Email_contactable,
    RCV.Contactability,
    RCV.SMS_Marketablility as SMS_MARKETABLE,
    RCV.Email_Marketablility as EMAIL_MARKETABLE,
    RCV.Marketability EMAIL_SMS_MARKETABLE,
    RCV.Marketability_New EMAIL_SMS_MARKETABLE_NEW,
    RCV.Marketability_Flag as FLAG_MARKETABLE,
    RCV.Sms_Opt_out_Flag,
    RCV.Loyalty_Flag,
    RCV.OPT_3RD_PARTY AS SOCIAL_MEDIA_MKT,
    RCV.COMPANY_BRAND,
    RCV.DOM_PRIN_BAND,
    //CASE WHEN RCV.DOM_PRICING_CHANNEL IN ('POS','AIR','TMT') THEN 'RETAIL'
    //     WHEN RCV.DOM_PRICING_CHANNEL IN ('WEB','APP') THEN 'DIGITAL'
    //    ELSE 'NA' END AS DOM_TXN_CHANNEL,
    RCV.DOM_TXN_CHANNEL,
    RCV.DOM_PRICING_CHANNEL,
    RCV.DOM_RCVCURRENCY,
    RCV.DOM_PAYOUT,
    RCV.DOM_SUB_PAYIN_METHOD,
    RCV.DOM_SUB_PAYOUT_METHOD,
    RCV.NATIVE_CHANNEL,
    RCV.SND_RCV_FLAG,
    RCV.MULTI_SENDER,
    RCV.DOM_IMT_DMT,
    RCV.NATIVE_IMT_DMT,
    RCV.SENDER_DISTRIBUTION,
    RCV.CORRIDOR_TYPE,
    RCV.RCV_TXNS_R12_Group,
    CASE WHEN NVL(RFM_PERSONA,'Receive Only') = '1.UBER' THEN '1.LOYALS'
         WHEN NVL(RFM_PERSONA,'Receive Only') = '2.LOYALS' THEN '2.ENGAGED' 
         ELSE NVL(RFM_PERSONA,'Receive Only') END AS RFM_PERSONA,
------------------------------------------------------------------------
    CASE WHEN CHURN_DECILE IN (1,2,3,4,5,6,7,8) THEN '2.Low-Risk' 
         WHEN CHURN_DECILE IN (9,10)  THEN '1.High-Risk'
        ELSE 
        CASE WHEN BEATS IN ('On Schedule','Ahead Schedule','1 beat late','2 beats late') THEN '2.Low-Risk'
            WHEN BEATS IN ('3 beats late','4 beats late','5 beats plus late') THEN '1.High-Risk'
            ELSE 
                 CASE WHEN RFM_PERSONA IN ('7.LOST','5.SPORADICS','6.SLIPPING') THEN '1.High-Risk'
                      WHEN RFM_PERSONA IN ('4.WHALES','2.LOYALS','1.UBER','3.PROMISING','8.ONE AND DONES') THEN '2.Low-Risk'
                     ELSE '4: NA' 
                END END
    END AS CHURN_RISK,
----------------------------------------------------------------------
    CASE WHEN RFM_DECILE IN (1,2,3) THEN '3.Low-Value'
         WHEN RFM_DECILE IN (4,5,6) THEN '2.Medium-Value'
         WHEN RFM_DECILE IN (7,8,9,10) THEN '1.High-Value'
         WHEN RFM_DECILE IN (999) THEN '4.NA'
         ELSE '4.NA' END AS VALUED_SEGMENT_RFM,
//NVL(VALUED_SEGMENT_RFM,'Receive Only') AS VALUED_SEGMENT_RFM,
    CASE WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '1. HIGH VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '2. MEDIUM VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '3. LOW VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '4. HIGH VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '5. MEDIUM VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '6. LOW VALUE-LOW RISK'
         ELSE '0. NA' END AS RISK_VALUE_SEGMENT,

    REPLACE(RCV.TOP_DMA, SUBSTRING(RCV.TOP_DMA, 0, charindex('.', RCV.TOP_DMA, 0))) AS TOP_DMA,
    REPLACE(RCV.TOP_AGENT, SUBSTRING(RCV.TOP_AGENT, 0, charindex('.', RCV.TOP_AGENT, 0))) AS TOP_AGENT,
    REPLACE(RCV.TOP_CORRIDOR, SUBSTRING(RCV.TOP_CORRIDOR, 0, charindex('.', RCV.TOP_CORRIDOR, 0))) AS TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    case when DWL_CUST_FLAG = 'Y' and SND_RCV_FLAG = 'Send + Receive' then 'Y' else 'N' end as DWL_SENDER_FLAG,
    COUNT(RCVCUSTOMER_KEY) CUSTOMERS,
    SUM(RCV_TXNS_R12) R12_TXNS,
    SUM(RCV_PRINCIPAL_R12) R12_PRINCIPAL,
    SUM(RCV_REVENUE_R12) R12_REVENUE,
    SUM(RCV_FEE_R12) R12_FEE
FROM 
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 RCV
LEFT JOIN 
    (select SNDCUSTOMER_KEY,RFM_PERSONA,CHURN_DECILE,RFM_DECILE, from SK_CONSOLIDATED_PROPENSITY_SCORES WHERE MTH_YR = $R13_End_date ) SND 
        ON RCV.RCVCUSTOMER_KEY = SND.SNDCUSTOMER_KEY  
GROUP BY 
    all;

------------------------------------------------------------------------
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;

select sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED;// //71060846

select sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED where CHURN_RISK is not null;//71,062,456

select RCV_TXNS_R12_Group,sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by 1;//2584823

select DOM_SUB_PAYOUT_METHOD,sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by 1;//2584823

select DWL_Cust_Flag,sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by 1;//5543000

select DWL_SENDER_FLAG,sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by 1;//78846

select DOM_TXN_CHANNEL,sum(customers) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by 1;

select max(MTH_YR) from SK_CONSOLIDATED_PROPENSITY_SCORES limit 10;
---------------------------------------------------------------------------------------------
---- Completed R12 Recevier db code -------
---------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------
---- Start of  PR12 Recevier db code -------
---------------------------------------------------------------------------------------------

---- create customer related info ---
CREATE OR REPLACE TABLE PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 AS
WITH RCV_TRANSACTIONS_RAW AS (
SELECT
    *
FROM 
    R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE
    where 
        TXN_MONTH > DATEADD(MONTH,1,$R24_Start_date)  AND
        TXN_MONTH <= DATEADD(MONTH,1,$R13_Start_date)  
)
,DOM_REGION AS (
SELECT
 RCVCUSTOMER_KEY,
 REGION,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_COUNTRY_CODE AS (
SELECT
 RCVCUSTOMER_KEY,
 COUNTRY_CODE,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_COUNTRY_NAME AS (
SELECT
 RCVCUSTOMER_KEY,
 COUNTRY_NAME,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

 ,DOM_IMT_DMT AS (
SELECT
 RCVCUSTOMER_KEY,
 DMT_IMT,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_CHANNEL AS (
SELECT
 RCVCUSTOMER_KEY,
 TXN_CHANNEL,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_COMPANY_BRAND AS (
SELECT
 RCVCUSTOMER_KEY,
 COMPANY_BRAND,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_PRICING_CHANNEL AS (
SELECT
 RCVCUSTOMER_KEY,
 PRICING_CHANNEL,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_PRIN_BAND AS (
SELECT
 RCVCUSTOMER_KEY,
 PRIN_BAND,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_RCV_CURRENCY AS (
SELECT
 RCVCUSTOMER_KEY,
 RCVCURRENCY_CODE,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_PAYOUT_METHOD AS (
SELECT
 RCVCUSTOMER_KEY,
 PAYOUT_METHOD,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_SUB_PAYOUT_METHOD AS (
SELECT
 RCVCUSTOMER_KEY,
 SUB_PAYOUT_METHOD,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_SUB_PAYIN_METHOD AS (
SELECT
 RCVCUSTOMER_KEY,
 SUB_PAYIN_METHOD,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)

,DOM_CORRIDOR AS (
SELECT
 RCVCUSTOMER_KEY,
 CORRIDOR AS DOM_CORRIDOR,
 CORRIDOR_NAME AS DOM_CORRIDOR_NAME,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2,3
)

,DOM_RCVAGENT AS (
SELECT
 RCVCUSTOMER_KEY,
 RCVAGENT_NUMBER AS DOM_RCVAGENT,
 ROW_NUMBER() OVER (PARTITION BY RCVCUSTOMER_KEY ORDER BY COUNT(1) DESC, MAX(RCVPAYING_DATETIME) DESC) RANK
 FROM RCV_TRANSACTIONS_RAW
 GROUP BY 1,2
)
,PERIOD_WISE_TRANSACTIONS AS (
SELECT
RCVCUSTOMER_KEY,
MAX(RCV_TXN_DATE) RECENT_TRANSACTION_DT,
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,1,$R13_Start_date) AND RCV_TXN_DATE <= LAST_DAY(DATE(DATEADD(MONTH,1,$R13_Start_date))) THEN TXN_ID END) R1_TXN,      
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,0,$R13_Start_date) AND RCV_TXN_DATE <= LAST_DAY(DATE(DATEADD(MONTH,1,$R13_Start_date))) THEN TXN_ID END) R2_TXN,    
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-1,$R13_Start_date) AND RCV_TXN_DATE <= LAST_DAY(DATE(DATEADD(MONTH,1,$R13_Start_date))) THEN TXN_ID END) R3_TXN,     
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-2,$R13_Start_date) AND RCV_TXN_DATE <= LAST_DAY(DATE(DATEADD(MONTH,1,$R13_Start_date))) THEN TXN_ID END) R4_TXN,    
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-3,$R13_Start_date) AND RCV_TXN_DATE <= LAST_DAY(DATE(DATEADD(MONTH,1,$R13_Start_date))) THEN TXN_ID END) R5_TXN,     
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-4,$R13_Start_date) AND RCV_TXN_DATE <= LAST_DAY(DATE(DATEADD(MONTH,1,$R13_Start_date))) THEN TXN_ID END) R6_TXN,     
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-1,$R13_Start_date) AND RCV_TXN_DATE <= DATEADD(MONTH,0,LAST_DAY(DATE($R13_Start_date))) THEN    
      TXN_ID END) R2_R3_TXN,           
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-4,$R13_Start_date) AND RCV_TXN_DATE <= DATEADD(MONTH,-2,LAST_DAY(DATE($R13_Start_date))) THEN 
      TXN_ID END) R4_R6_TXN,          
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-10,$R13_Start_date) AND RCV_TXN_DATE <= DATEADD(MONTH,-5,LAST_DAY(DATE($R13_Start_date))) THEN 
      TXN_ID END) R7_R12_TXN,         
COUNT(CASE WHEN RCV_TXN_DATE >= DATEADD(MONTH,-10,$R13_Start_date) THEN TXN_ID END) R12_TXN 
FROM RCV_TRANSACTIONS_RAW
  GROUP BY 1
)

,PERIOD_WISE_STATUS AS (
SELECT
  RCVCUSTOMER_KEY,
  RECENT_TRANSACTION_DT,
  R1_TXN,
  R2_R3_TXN,
  R3_TXN,  
  R4_R6_TXN,
  R6_TXN,
  R7_R12_TXN,
  R12_TXN,
  CASE WHEN R1_TXN > 0 THEN 'Y' ELSE 'N' END AS R1_ACTIVE,
  CASE WHEN R3_TXN > 0 THEN 'Y' ELSE 'N' END AS R3_ACTIVE,
  CASE WHEN R6_TXN > 0 THEN 'Y' ELSE 'N' END AS R6_ACTIVE,
  CASE WHEN R12_TXN > 0 THEN 'Y' ELSE 'N' END AS R12_ACTIVE,
  
  CASE WHEN R1_TXN = 0 AND R3_TXN > 0 THEN 'Y' ELSE 'N' END AS R2_R3_ACTIVE,
  CASE WHEN R3_TXN = 0 AND R6_TXN > 0 THEN 'Y' ELSE 'N' END AS R4_R6_ACTIVE,
  CASE WHEN R6_TXN = 0 AND R12_TXN > 0 THEN 'Y' ELSE 'N' END AS R7_R12_ACTIVE
FROM PERIOD_WISE_TRANSACTIONS
)

,CUSTOMER_R12_TRANSACTIONS AS (
SELECT
C.RCVCUSTOMER_KEY, 
COUNT(TXN_ID) RCV_TXNS_R12,
NVL(SUM(PRINCIPAL ),0) RCV_PRINCIPAL_R12,--taken sender principal
NVL(SUM(FEE ),0) RCV_FEE_R12,
NVL(SUM(REVENUE ),0) RCV_REVENUE_R12,
  
COUNT(CASE WHEN TXN_CHANNEL = 'DIGITAL' THEN TXN_ID END) RCV_DIGITAL_R12,
COUNT(CASE WHEN TXN_CHANNEL = 'RETAIL' THEN TXN_ID END) RCV_RETAIL_R12,
  
COUNT(CASE WHEN PRICING_CHANNEL = 'APP' THEN TXN_ID END) RCV_APP_R12,
COUNT(CASE WHEN PRICING_CHANNEL = 'WEB' THEN TXN_ID END) RCV_WEB_R12,
  
COUNT(CASE WHEN DMT_IMT = 'DMT' THEN TXN_ID END) AS DMT_R12,
COUNT(CASE WHEN DMT_IMT = 'IMT' THEN TXN_ID END) AS IMT_R12,
  
COUNT(CORRIDOR) CORRIDORS,
COUNT(RCVCURRENCY_CODE) RCVCURRENCY_COUNT,
COUNT(SNDCUSTOMER_KEY) SENDER_COUNT,
MODE(DWL_Cust_Flag) as DWL_Cust_Flag,
  
FROM PERIOD_WISE_STATUS C  
INNER JOIN RCV_TRANSACTIONS_RAW T ON C.RCVCUSTOMER_KEY = T.RCVCUSTOMER_KEY
GROUP BY 1
)

,SENDER_R12_TRANSACTIONS AS (
SELECT
SNDCUSTOMER_KEY, 
COUNT(TXN_ID) SENDER_TXNS_R12,
NVL(SUM(PRINCIPAL ),0) SENDER_PRINCIPAL_R12,
NVL(SUM(REVENUE ),0) SENDER_REVENUE_R12,
NVL(SUM(FEE ),0) SENDER_FEE_R12,
FROM 
RCV_TRANSACTIONS_RAW
GROUP BY 1
)

,RESP_IPF_CALC_T1 as(
SELECT 
    sndcustomer_key CUSTOMER_key,
    --date_trunc(month,RCVPAYING_DATETIME) mth_yr, 
    RCVPAYING_DATETIME,
    ROW_NUMBER() OVER (PARTITION BY sndcustomer_key ORDER BY RCVPAYING_DATETIME DESC) AS RANK_DATE       
FROM  
    RCV_TRANSACTIONS_RAW )		

,RESP_IPF_CALC_T2 as(
Select
  A.*
From
RESP_IPF_CALC_T1 a
Where  RANK_DATE <= 6 )

,RESP_IPF_CALC_T3 as (
Select
  Customer_Key,
  count(1) Txn_Cnt  
From
  RESP_IPF_CALC_T2                              
where customer_key is not null
GROUP BY Customer_key
Having
  count(1) >= 3 )


,RESP_IPF_CALC_T4 as (
Select
  A.*, b.TXN_CNT
From
  RESP_IPF_CALC_T2 a,
  RESP_IPF_CALC_T3 b
Where
  a.Customer_key = b.Customer_key )


,RESP_IPF_CALC_T5 as (
  select
  customer_key,
  TXN_CNT,
  min( RCVPAYING_DATETIME ) first_SndTxn_Dt,
  max( RCVPAYING_DATETIME ) Last_SndTxn_Dt
From
  RESP_IPF_CALC_T4 GROUP BY customer_key, Txn_Cnt)

,RESP_IPF_CALC_T6 as (
Select
  customer_key,
  Txn_Cnt,
  datediff(day,first_SndTxn_Dt,Last_SndTxn_Dt) tenure,
  datediff(day,Last_SndTxn_Dt,last_day($R13_End_date)) days_since_last_txn,
  Last_SndTxn_Dt
From
  RESP_IPF_CALC_T5 )
  

,RESP_IPF_CALC_T7 AS (
Select
  customer_key,
  Txn_Cnt,           
  tenure/(Txn_Cnt-1) as IPF,					
  days_since_last_txn - IPF as IPF_overdue,
  datediff(day,Last_SndTxn_Dt,last_day($R13_End_date)) as latest_Ipf,
  days_since_last_txn
From
  RESP_IPF_CALC_T6 )


,RESP_IPF_CALC_T8 as (
Select
  *,
  case when latest_Ipf > (1.2*Ipf) then 'Decelerating'
  when latest_Ipf < (0.8*Ipf) then 'Accelerating'
  else 'Stable' end Ipf_Change,
  Case 
	when txn_cnt = 0 then '0 lost'
	when txn_cnt = 1 then '1 timer'
	when latest_Ipf <= 0.5*IPF then 'Ahead Schedule'			
	when latest_Ipf <= 1*IPF   then 'On Schedule'
	when latest_Ipf <= 2*IPF   then '1 beat late'
	when latest_Ipf <= 3*IPF   then '2 beats late'
	when latest_Ipf <= 4*IPF   then '3 beats late'
	when latest_Ipf <= 5*IPF   then '4 beats late'
	when latest_Ipf >  5*IPF   then '5 beats plus late'
else null end as beats
From
  RESP_IPF_CALC_T7 )


SELECT 
PS.RCVCUSTOMER_KEY,

CASE WHEN R1_ACTIVE = 'Y' THEN 'R1 ACTIVE'
     WHEN R2_R3_ACTIVE = 'Y' THEN 'R2-R3 ACTIVE'
     WHEN R4_R6_ACTIVE = 'Y' THEN 'R4-R6 ACTIVE'
     WHEN R7_R12_ACTIVE = 'Y' THEN 'R7-R12 ACTIVE'
     END AS ACTIVITY_STATUS,

DOM_REGION1.REGION REGION,
DOM_COUNTRY_CODE1.COUNTRY_CODE COUNTRY_CODE,
DOM_COUNTRY_NAME1.COUNTRY_NAME COUNTRY_NAME,
CASE WHEN DOM_COUNTRY_CODE1.COUNTRY_CODE IN ('BE', 'AU', 'JM', 'ES', 'AR', 'CY', 'KW', 'PL', 'IT', 'TR', 'GB', 'MY', 'NL', 'PA', 'LU', 'FR', 
                                             'SG','US','RU', 'SA', 'AE', 'GA', 'NG', 'CA', 'CI', 'PT', 'PH', 'CH', 'JO', 'DE', 'BH', 'QA', 'AT', 
                                             'RO','SN', 'OM') 
           THEN 'MyWU' ELSE 'Non-MyWU' END AS MYWU_COUNTRY,
CASE WHEN MYWU_COUNTRY = 'Non-MyWU' THEN 'Non-MyWU'
     WHEN MYWU_COUNTRY = 'MyWU' AND DOM_COUNTRY_CODE1.COUNTRY_CODE IN ('AR','CA','PA','AU','BE','FR','GB','MY','NL','PH','PL','RO','AE','IT')
     THEN 'UTR' 
     ELSE 'Non-UTR' END AS UTR_MYWUCOUNTRY,

RECENT_TRANSACTION_DT,
NVL(CAS.GENDER,'NA') AS GENDER,
NVL(CAS.AGE, 'NA') AS AGE,
COMPANY_BRAND,
DOM_CORRIDOR,
DOM_CORRIDOR_NAME,
DOM_RCVAGENT,
PRIN_BAND AS DOM_PRIN_BAND,
RCVCURRENCY_CODE AS DOM_RCVCURRENCY,
DC.TXN_CHANNEL AS DOM_TXN_CHANNEL,
PRICING_CHANNEL AS DOM_PRICING_CHANNEL,
DMT_IMT AS DOM_IMT_DMT,

CASE WHEN SUBSTR(DOM_CORRIDOR,1,2) = SUBSTR(DOM_CORRIDOR,4,5) THEN 'DMT' ELSE 'IMT' END AS CORRIDOR_TYPE,   

CASE WHEN PAYOUT_METHOD = 'OTHERS' THEN 'OTHER'
     WHEN PAYOUT_METHOD = 'ACCOUNT' THEN 'ACCOUNT'
     WHEN PAYOUT_METHOD = 'MOBILE' THEN 'MOBILE'
     WHEN PAYOUT_METHOD = 'CASH' THEN 'CASH'
     ELSE 'N/A' END DOM_PAYOUT,
     
SUB_PAYIN_METHOD as DOM_SUB_PAYIN_METHOD,

SUB_PAYOUT_METHOD AS DOM_SUB_PAYOUT_METHOD,
    
CASE WHEN RCV_RETAIL_R12 = 0 AND RCV_DIGITAL_R12 = 0 THEN 'INACTIVE'
     WHEN RCV_RETAIL_R12 = 0 THEN 'Digital Only'
     WHEN RCV_DIGITAL_R12 = 0 THEN 'Retail Only'
     ELSE 'Retail+Digital' END AS NATIVE_CHANNEL,
case when RCV_TXNS_R12 = 1 then '1'
     when RCV_TXNS_R12 > 1 and RCV_TXNS_R12 <= 3 then '2-3'
     when RCV_TXNS_R12 > 3 and RCV_TXNS_R12 <= 6 then '4-6'
     when RCV_TXNS_R12 > 6 and RCV_TXNS_R12 <= 9 then '7-9'
     when RCV_TXNS_R12 > 9 and RCV_TXNS_R12 <= 12 then '10-12'
     when RCV_TXNS_R12 > 12 then '>12' else 'Missing' end as RCV_TXNS_R12_Group,
RCV_TXNS_R12,
RCV_APP_R12,
RCV_WEB_R12,
RCV_DIGITAL_R12,
RCV_RETAIL_R12,
RCV_PRINCIPAL_R12,
RCV_FEE_R12,
RCV_REVENUE_R12,
SENDER_COUNT,
T8.beats,

CASE WHEN SENDER_COUNT > 1 THEN 'via Multiple Senders' ELSE 'Single Sender Only' END AS MULTI_SENDER,

NVL(SENDER.SENDER_TXNS_R12,0) AS SEND_TXNS_R12,
NVL(SENDER.SENDER_PRINCIPAL_R12,0) AS SEND_PRINCIPAL_R12,
NVL(SENDER.SENDER_FEE_R12,0) AS SEND_FEE_R12,
NVL(SENDER.SENDER_REVENUE_R12,0) AS SEND_REVENUE_R12,

CASE WHEN SEND_TXNS_R12 > 0 AND RCV_TXNS_R12 > 0 THEN 'Send + Receive'
     WHEN SEND_TXNS_R12 = 0 AND RCV_TXNS_R12 > 0 THEN 'Receive Only'
     WHEN SEND_TXNS_R12 > 0 AND RCV_TXNS_R12 = 0 THEN 'Send Only'
     ELSE 'NA' END AS SND_RCV_FLAG,
     
CASE WHEN IMT_R12 = 0 AND DMT_R12 > 0 THEN 'DMT Only'
     WHEN IMT_R12 > 0 AND DMT_R12 = 0 THEN 'IMT Only'
     ELSE 'IMT+DMT' END AS NATIVE_IMT_DMT,
     
CASE WHEN SENDER_COUNT = 1 THEN ' 1'
     WHEN SENDER_COUNT = 2 THEN ' 2'
     WHEN SENDER_COUNT = 3 THEN ' 3'
     WHEN SENDER_COUNT = 4 THEN ' 4'
     WHEN SENDER_COUNT >= 5 THEN ' 5+'
     ELSE 'NA' END AS SENDER_DISTRIBUTION,
CT.DWL_Cust_Flag

FROM PERIOD_WISE_STATUS PS
INNER JOIN CUSTOMER_R12_TRANSACTIONS CT ON PS.RCVCUSTOMER_KEY = CT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_REGION WHERE RANK =1) DOM_REGION1 ON PS.RCVCUSTOMER_KEY = DOM_REGION1.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_COUNTRY_CODE WHERE RANK =1) DOM_COUNTRY_CODE1 ON PS.RCVCUSTOMER_KEY = DOM_COUNTRY_CODE1.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_COUNTRY_NAME WHERE RANK =1) DOM_COUNTRY_NAME1 ON PS.RCVCUSTOMER_KEY = DOM_COUNTRY_NAME1.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_RCV_CURRENCY WHERE RANK =1) RCVCURR ON PS.RCVCUSTOMER_KEY = RCVCURR.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_CHANNEL WHERE RANK=1) DC ON PS.RCVCUSTOMER_KEY = DC.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_CORRIDOR WHERE RANK=1) CO ON PS.RCVCUSTOMER_KEY = CO.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_RCVAGENT WHERE RANK=1) SA ON PS.RCVCUSTOMER_KEY = SA.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_PAYOUT_METHOD WHERE RANK=1) POUT ON PS.RCVCUSTOMER_KEY = POUT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_SUB_PAYIN_METHOD WHERE RANK=1) PSBPT ON PS.RCVCUSTOMER_KEY = PSBPT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_SUB_PAYOUT_METHOD WHERE RANK=1) PSBOT ON PS.RCVCUSTOMER_KEY = PSBOT.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_PRICING_CHANNEL WHERE RANK=1) PC ON PS.RCVCUSTOMER_KEY = PC.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_PRIN_BAND  WHERE RANK=1) PRIN ON PS.RCVCUSTOMER_KEY = PRIN.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_COMPANY_BRAND  WHERE RANK=1) BRAND ON PS.RCVCUSTOMER_KEY = BRAND.RCVCUSTOMER_KEY
INNER JOIN (SELECT * FROM DOM_IMT_DMT  WHERE RANK=1) DMT_IMT ON PS.RCVCUSTOMER_KEY = DMT_IMT.RCVCUSTOMER_KEY
LEFT JOIN SUMMARY_GEN.COUNTRY_VW REG ON DOM_COUNTRY_CODE1.COUNTRY_CODE = REG.COUNTRY_CODE
LEFT JOIN CUSTOMER_ADDNL_VW CAS ON PS.RCVCUSTOMER_KEY = CAS.CUSTOMER_KEY
LEFT JOIN SENDER_R12_TRANSACTIONS SENDER ON SENDER.SNDCUSTOMER_KEY = PS.RCVCUSTOMER_KEY
LEFT JOIN RESP_IPF_CALC_T8 T8 on T8.CUSTOMER_KEY = PS.RCVCUSTOMER_KEY;


----------------------------------------------------------------------------------------------------------------------------------

select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;

select count(*),count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;//72827015

select RCV_TXNS_R12_Group,count(*),count(distinct RCVCUSTOMER_KEY)  from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;//1659117

select DOM_SUB_PAYOUT_METHOD,count(*) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;//1659117

select DOM_TXN_CHANNEL,count(*) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;//4920103

select DWL_CUST_FLAG,count(*) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by 1;//4843336
---------------------------------------------------------------------------------------


--- create table with agent details ---
CREATE OR REPLACE TABLE PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 AS
WITH AGENT_LOOKUP AS (
SELECT 
DISTINCT 
  DOMINANT_AGENT_NUMBER,
  BUSINESS_NAME,
  NETWORK_NAME,
  UPPER(NVL(NETWORK_NAME,BUSINESS_NAME)) AS AGENT_NETWORK
FROM CEX_SANDBOX.PK_DOMINANT_AGENT_NETWORK 
)
SELECT
T1.*,
NVL(AGENT_NETWORK,AGENT_NETWORK_NAME_CLEANED) AS AGENT_NETWORK      
FROM PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 T1 
LEFT JOIN AGENT_LOOKUP AL ON T1.DOM_RCVAGENT = AL.DOMINANT_AGENT_NUMBER
LEFT JOIN CEF_AGENTS_AND_NETWORKS_NAMES AN ON T1.DOM_RCVAGENT = AN.AGENT_NUMBER
WHERE REGION IS NOT NULL;


-----------------------------------------------------------------------------------------

---- Add cust level data---

CREATE OR REPLACE TABLE PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 AS
select
    T2.*,
    NVL(DMA.LOYALTY_MEMBER_FLAG,'N') AS LOYALTY_MEMBER,
    
    NVL(DMA.REGISTERED_CUSTOMER_FLAG,'N') AS REGISTERED_CUSTOMER,
    
    DMA.FIRST_REGISTRATION_DATE AS REGISTRATION_DATE,
    
    CASE WHEN COUNTRY_CODE IN ( 'US' ,'AE' ,'FR' ,'RU' ,'CA' ,'DE' ,'IT' ,'KW' ,'PH ','SA' ,'JO' ,'QA' ,'AU' ,'MY' ,'SG' ,'ES' ,'AR' ,'NL',                                         'BE', 'CH', 'GB', 'BH', 'CI', 'PA', 'AT', 'PT', 'JM', 'SN', 'TR', 'OM', 'PL', 'GA', 'NG', 'LU', 'CY', 'RO')                                      AND DMA.LOYALTY_MEMBER_FLAG = 'Y' THEN 'Y' ELSE 'N' END AS LOYALTY_MEMBER_FLAG,
    
    CASE WHEN COUNTRY_CODE IN ( 'US' ,'AE' ,'FR' ,'RU' ,'CA' ,'DE' ,'IT' ,'KW' ,'PH ','SA' ,'JO' ,'QA' ,'AU' ,'MY' ,'SG' ,'ES' ,'AR' ,'NL',                                         'BE', 'CH', 'GB', 'BH', 'CI', 'PA', 'AT', 'PT', 'JM', 'SN', 'TR', 'OM', 'PL', 'GA', 'NG', 'LU', 'CY', 'RO')                                      THEN 'MYWU_COUNTRY' ELSE 'NON_MYWUCOUNTRY' END AS MYWUCOUNTRY_STATUS,
    
    case when DMA.email_address_on_file_flag = 'Y' or DMA.mobile_number_on_file_flag = 'Y' then 'Y' else 'N' end as contactability_Flag,
    
    case when DMA.mobile_number_on_file_flag = 'Y' then 'Y' else 'N' end as SMS_contactable,
    
    case when DMA.email_address_on_file_flag = 'Y' then 'Y' else 'N' end as Email_contactable,
    
    case when SMS_contactable = 'N' and   Email_contactable = 'Y' then 'Only_Email'
         when SMS_contactable = 'Y' and   Email_contactable = 'N' then 'Only_SMS' 
         when SMS_contactable = 'Y' and   Email_contactable = 'Y' then 'Email_SMS'  
         else 'Non_Contactable' end as Contactability,
    
    case when DMA.mobile_number_on_file_flag = 'Y' and DMA.opt_sms = 'I' then 'Y' else 'N' end as Mobile_contactable_1,
    
    case when DMA.email_address_on_file_flag = 'Y' and DMA.OPT_EMAIL =  'I' then 'Y' else 'N' end as Email_contactable_1,
    
    case when Mobile_contactable_1 = 'N' and   Email_contactable_1 = 'Y' then 'Only_Email'
         when Mobile_contactable_1 = 'Y' and   Email_contactable_1 = 'N' then 'Only_SMS' 
         when Mobile_contactable_1 = 'Y' and   Email_contactable_1 = 'Y' then 'Email_SMS'  
         else 'Non_Contactable' end as Contactability_1,

    //Marketability
    case when DMA.marketing_flag = 'Y' and DMA.mobile_number_on_file_flag ='Y' and DMA.opt_sms='I' then 'Y' else 'N' end as SMS_Marketablility,
    
    case when DMA.marketing_flag = 'Y' and DMA.email_address_on_file_flag ='Y' and DMA.OPT_EMAIL='I' then 'Y' else 'N' end as 
        Email_Marketablility,
    
    case when SMS_Marketablility = 'Y' and Email_Marketablility = 'N' then 'Only_SMS'
         when SMS_Marketablility = 'N' and Email_Marketablility = 'Y' then 'Only_Email'
         when SMS_Marketablility = 'Y' and Email_Marketablility = 'Y' then 'Email_SMS'
         else 'Non_Marketable'  end as Marketability,

    case when COUNTRY_CODE in  
         ('AF','AI','AG','AW','BD','BB','BZ','BT','BO','BW','BN','BI','KH','CM','KY','CF','CL','KM','CD','CG','CK','CU','CW','DJ','DM',
         'DO','TP','EC','SV','ER','SZ','ET','FK','FJ','GF','PF','GM','GD','GP','GU','GT','GN','GW','GY','HT','HN','IQ','JM','JO','KI','KG',
         'LA','LR','LY','MG','MW','MV','MH','MQ','YT','MX','FM','MN','MS','MZ','MM','NA','NR','NC','NI','NU','PK','PW','P1','PA','PG','PY',
         'RE','RW','BL','KN','LC','MF','VC','WS','SC','SL','SX','SB','SO','XA','SS','SD','SR','SY','TJ','TZ','TO','TT','TM','TC','TV','UY',
         'VU','VE','VG','YE','ZM','ZW','LS','SZ','AM','LB','AR','TN','CI','BA','CR','ML','AZ','KZ','BS','TD','MR','GQ','MO','BM')
          then Contactability_1
          when COUNTRY_CODE not in  
         ('AF','AI','AG','AW','BD','BB','BZ','BT','BO','BW','BN','BI','KH','CM','KY','CF','CL','KM','CD','CG','CK','CU','CW','DJ','DM',
         'DO','TP','EC','SV','ER','SZ','ET','FK','FJ','GF','PF','GM','GD','GP','GU','GT','GN','GW','GY','HT','HN','IQ','JM','JO','KI','KG',
         'LA','LR','LY','MG','MW','MV','MH','MQ','YT','MX','FM','MN','MS','MZ','MM','NA','NR','NC','NI','NU','PK','PW','P1','PA','PG','PY',
         'RE','RW','BL','KN','LC','MF','VC','WS','SC','SL','SX','SB','SO','XA','SS','SD','SR','SY','TJ','TZ','TO','TT','TM','TC','TV','UY',
         'VU','VE','VG','YE','ZM','ZW','LS','SZ','AM','LB','AR','TN','CI','BA','CR','ML','AZ','KZ','BS','TD','MR','GQ','MO','BM')
          then Marketability
          else 'NA' end as Marketability_1,
    
    case when Marketability_1 = 'Non_Contactable' then 'Non_Marketable' else Marketability_1 end as Marketability_New,
    
    case when Marketability_New = 'Non_Marketable' then 'N' else 'Y' end as Marketability_Flag,
    
    case when DMA.opt_sms = 'O' then 'Y' else 'N' end as Sms_Opt_out_Flag,
    
    case when DMA.OPT_EMAIL = 'O' then 'Y' else 'N' end as Email_Opt_out_Flag,
    
    case when DMA.loyalty_member_flag = 'Y' then 'Y' else 'N' end as Loyalty_Flag,
    
    DMA.HVC_FLAG,
    
    CASE WHEN DMA.OPT_SHARE = 'I' THEN 'Y' ELSE 'N' END AS OPT_3RD_PARTY, 
    
    DMA.DMA_CODE,
    
    DMA.DMA as CUSTOMER_DMA
FROM 
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 T2
LEFT JOIN 
    (SELECT
        CUSTOMER_KEY,
        REGISTERED_CUSTOMER_FLAG,
        FIRST_REGISTRATION_DATE,
        HVC_FLAG,
        LOYALTY_MEMBER_FLAG,
        OPT_SHARE,
        marketing_flag,
        mobile_number_on_file_flag,
        email_address_on_file_flag,
        opt_sms,
        OPT_EMAIL,
        NVL(ZIP.DMA_CODE,'N/A') AS DMA_CODE,
        NVL(DMA_DESC,'N/A') AS DMA
    FROM 
        SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW CM 
    LEFT JOIN 
        SUMMARY_GEN.COUNTRY_VW CN 
            ON CM.COUNTRY_CODE = CN.COUNTRY_CODE
    LEFT JOIN 
        SUMMARY_GEN.DMA_ZIPCODE_VW ZIP 
            ON CM.ZIP_POSTAL_CODE = ZIP.ZIP_CODE
    LEFT JOIN 
        SUMMARY_GEN.DMA_VW DMA 
            ON ZIP.DMA_CODE = DMA.DMA_CODE) DMA  
    ON T2.RCVCUSTOMER_KEY = DMA.CUSTOMER_KEY 
;


select * from SUMMARY_GEN.COUNTRY_VW where SUPER_REGION='NORTH AMERICA' limit 10;
select * from  SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW limit 10;
------------------------------------------------------------
---QC--

select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 limit 10;
select count(*),count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 limit 10;//72827015

select LOYALTY_MEMBER,count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by 1;
/*
LOYALTY_MEMBER	COUNT(DISTINCT RCVCUSTOMER_KEY)
N	65395492
Y	7095819
*/

select Loyalty_Flag,count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by 1;
/*
LOYALTY_FLAG	COUNT(DISTINCT RCVCUSTOMER_KEY)
N	65395492
Y	7095819
*/

select DOM_TXN_CHANNEL,count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by 1;//4851752

select distinct Marketability_1 from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3;

select distinct Marketability_Flag from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3;

select COUNTRY_CODE, Marketability_Flag , count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 
group by 1,2 order by 3 desc;

select distinct opt_sms from SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW;//

--------------------------------------------------------------------------------------------------------

--- Receiver final table --
CREATE OR REPLACE TABLE PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 AS

WITH CORRIDOR AS (
SELECT 
COUNTRY_CODE,
DOM_CORRIDOR,
DOM_CORRIDOR_NAME,
COUNT(1) CUSTOMERS,
ROW_NUMBER() OVER (PARTITION BY COUNTRY_CODE ORDER BY COUNT(1) DESC) CORR_RANK,
CORR_RANK||'.'||DOM_CORRIDOR AS RANKED_CORR
FROM PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3
 GROUP BY 1,2,3
 ORDER BY 3 DESC
)
, TOP_CORRIDOR AS (
  SELECT
  COUNTRY_CODE,
  NVL(DOM_CORRIDOR,'NA') AS DOM_CORRIDOR,
  NVL(DOM_CORRIDOR_NAME,'NA') AS DOM_CORRIDORNAME,
  CUSTOMERS,
  CORR_RANK,
  RANKED_CORR
  FROM CORRIDOR
)

,AGENT AS (
SELECT 
COUNTRY_CODE,
AGENT_NETWORK,
COUNT(1) CUSTOMERS,
ROW_NUMBER() OVER (PARTITION BY COUNTRY_CODE ORDER BY COUNT(1) DESC) AGENT_RANK,
AGENT_RANK||'.'||AGENT_NETWORK AS RANKED_AGENT
FROM PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3
  WHERE DOM_PAYOUT IN ('CASH')
 GROUP BY 1,2
 ORDER BY 3 DESC
)
,TOP_AGENT AS (
  SELECT
  COUNTRY_CODE,
  AGENT_NETWORK,
  CUSTOMERS,
  AGENT_RANK,
  RANKED_AGENT
  FROM AGENT
)

, DMA AS (
SELECT 
COUNTRY_CODE,
CUSTOMER_DMA,
COUNT(1) CUSTOMERS,
ROW_NUMBER() OVER (PARTITION BY COUNTRY_CODE ORDER BY COUNT(1) DESC) DMA_RANK,
DMA_RANK||'.'||CUSTOMER_DMA AS RANKED_DMA
FROM PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3
  WHERE 
  COUNTRY_CODE = 'US'
 GROUP BY 1,2
 ORDER BY 3 DESC
)
, TOP_DMA AS (
  SELECT
  COUNTRY_CODE,
  CUSTOMER_DMA,
  CUSTOMERS,
  DMA_RANK,
  RANKED_DMA
  FROM DMA
)

SELECT
T2.*,

DMA_RANK,
CASE WHEN DMA_RANK IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) THEN RANKED_DMA ELSE 'OTHER' END AS TOP_DMA,
AGENT_RANK,
CASE WHEN DOM_TXN_CHANNEL = 'RETAIL' AND AGENT_RANK IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) THEN RANKED_AGENT ELSE 'OTHER' END AS TOP_AGENT,
CORR_RANK,
CASE WHEN CORR_RANK IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) THEN RANKED_CORR ELSE 'OTHER' END AS TOP_CORRIDOR

FROM PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 T2 
LEFT JOIN TOP_DMA DMA ON T2.COUNTRY_CODE = DMA.COUNTRY_CODE AND T2.CUSTOMER_DMA = DMA.CUSTOMER_DMA
LEFT JOIN TOP_AGENT AG ON T2.COUNTRY_CODE = AG.COUNTRY_CODE AND T2.AGENT_NETWORK = AG.AGENT_NETWORK 
LEFT JOIN TOP_CORRIDOR CORR ON T2.COUNTRY_CODE = CORR.COUNTRY_CODE AND T2.DOM_CORRIDOR = CORR.DOM_CORRIDOR;


--------------------------------------------------------------------
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10; 

select count(*),count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;//72827015

select DOM_TXN_CHANNEL,count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by 1;//4920103
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 where  RCVCUSTOMER_KEY in (select RCVCUSTOMER_KEY from (select RCVCUSTOMER_KEY , count(*) as cnt from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 group by 1 having cnt > 1)) limit 10;

-------------------------------------------------------------------------


------ aggregrate level PR12 receiver table-------

CREATE OR REPLACE TABLE PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED  AS 
SELECT 
    RCV.ACTIVITY_STATUS,
    RCV.REGION,
    RCV.COUNTRY_NAME,
    RCV.COUNTRY_CODE,
    CASE WHEN RCV.COUNTRY_NAME IN ('FRANCE','UNITED STATES','CANADA','UNITED KINGDOM','AUSTRALIA','GERMANY')
         THEN RCV.COUNTRY_NAME END AS TOP_COUNTRY,
    RCV.REGISTERED_CUSTOMER,
    RCV.LOYALTY_MEMBER,
    RCV.mywucountry_status,
    RCV.Contactability_Flag as FLAG_CONTACTABLE,
    RCV.SMS_contactable,
    RCV.Email_contactable,
    RCV.Contactability,
    RCV.SMS_Marketablility as SMS_MARKETABLE,
    RCV.Email_Marketablility as EMAIL_MARKETABLE,
    RCV.Marketability EMAIL_SMS_MARKETABLE,
    RCV.Marketability_New EMAIL_SMS_MARKETABLE_NEW,
    RCV.Marketability_Flag as FLAG_MARKETABLE,
    RCV.Sms_Opt_out_Flag,
    RCV.Loyalty_Flag,
    RCV.OPT_3RD_PARTY AS SOCIAL_MEDIA_MKT,
    RCV.COMPANY_BRAND,
    RCV.DOM_PRIN_BAND,
    //CASE WHEN RCV.DOM_PRICING_CHANNEL IN ('POS','AIR','TMT') THEN 'RETAIL'
    //     WHEN RCV.DOM_PRICING_CHANNEL IN ('WEB','APP') THEN 'DIGITAL'
    //    ELSE 'NA' END AS DOM_TXN_CHANNEL,
    RCV.DOM_TXN_CHANNEL,
    RCV.DOM_PRICING_CHANNEL,
    RCV.DOM_RCVCURRENCY,
    RCV.DOM_PAYOUT,
    RCV.DOM_SUB_PAYIN_METHOD,
    RCV.DOM_SUB_PAYOUT_METHOD,
    RCV.NATIVE_CHANNEL,
    RCV.SND_RCV_FLAG,
    RCV.MULTI_SENDER,
    RCV.DOM_IMT_DMT,
    RCV.NATIVE_IMT_DMT,
    RCV.SENDER_DISTRIBUTION,
    RCV.CORRIDOR_TYPE,
    RCV.RCV_TXNS_R12_Group,
    CASE WHEN NVL(RFM_PERSONA,'Receive Only') = '1.UBER' THEN '1.LOYALS'
         WHEN NVL(RFM_PERSONA,'Receive Only') = '2.LOYALS' THEN '2.ENGAGED' 
         ELSE NVL(RFM_PERSONA,'Receive Only') END AS RFM_PERSONA,
------------------------------------------------------------------------
    CASE WHEN CHURN_DECILE IN (1,2,3,4,5,6,7,8) THEN '2.Low-Risk' 
         WHEN CHURN_DECILE IN (9,10)  THEN '1.High-Risk'
        ELSE 
        CASE WHEN BEATS IN ('On Schedule','Ahead Schedule','1 beat late','2 beats late') THEN '2.Low-Risk'
            WHEN BEATS IN ('3 beats late','4 beats late','5 beats plus late') THEN '1.High-Risk'
            ELSE 
                 CASE WHEN RFM_PERSONA IN ('7.LOST','5.SPORADICS','6.SLIPPING') THEN '1.High-Risk'
                      WHEN RFM_PERSONA IN ('4.WHALES','2.LOYALS','1.UBER','3.PROMISING','8.ONE AND DONES') THEN '2.Low-Risk'
                     ELSE '4: NA' 
                END END
    END AS CHURN_RISK,
----------------------------------------------------------------------
    CASE WHEN RFM_DECILE IN (1,2,3) THEN '3.Low-Value'
         WHEN RFM_DECILE IN (4,5,6) THEN '2.Medium-Value'
         WHEN RFM_DECILE IN (7,8,9,10) THEN '1.High-Value'
         WHEN RFM_DECILE IN (999) THEN '4.NA'
         ELSE '4.NA' END AS VALUED_SEGMENT_RFM,
//NVL(VALUED_SEGMENT_RFM,'Receive Only') AS VALUED_SEGMENT_RFM,
    CASE WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '1. HIGH VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '2. MEDIUM VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '3. LOW VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '4. HIGH VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '5. MEDIUM VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '6. LOW VALUE-LOW RISK'
         ELSE '0. NA' END AS RISK_VALUE_SEGMENT,

    REPLACE(RCV.TOP_DMA, SUBSTRING(RCV.TOP_DMA, 0, charindex('.', RCV.TOP_DMA, 0))) AS TOP_DMA,
    REPLACE(RCV.TOP_AGENT, SUBSTRING(RCV.TOP_AGENT, 0, charindex('.', RCV.TOP_AGENT, 0))) AS TOP_AGENT,
    REPLACE(RCV.TOP_CORRIDOR, SUBSTRING(RCV.TOP_CORRIDOR, 0, charindex('.', RCV.TOP_CORRIDOR, 0))) AS TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    case when DWL_CUST_FLAG = 'Y' and SND_RCV_FLAG = 'Send + Receive' then 'Y' else 'N' end as DWL_SENDER_FLAG,
    COUNT(RCVCUSTOMER_KEY) PR12_CUSTOMERS,
    SUM(RCV_TXNS_R12) PR12_TXNS,
    SUM(RCV_PRINCIPAL_R12) PR12_PRINCIPAL,
    SUM(RCV_REVENUE_R12) PR12_REVENUE,
    SUM(RCV_FEE_R12) PR12_FEE
FROM 
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 RCV
LEFT JOIN 
    (select SNDCUSTOMER_KEY,RFM_PERSONA,CHURN_DECILE,RFM_DECILE, from SK_CONSOLIDATED_PROPENSITY_SCORES 
            WHERE MTH_YR = DATEADD(MONTH,1,$R13_Start_date) ) SND 
        ON RCV.RCVCUSTOMER_KEY = SND.SNDCUSTOMER_KEY  
GROUP BY 
    all;

------------------------------------------------------------------------
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;

select sum(PR12_CUSTOMERS) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED;//72827015//

select RCV_TXNS_R12_Group,sum(PR12_CUSTOMERS) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED GROUP BY ALL;

select RCV_TXNS_R12_Group,count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by 1;

select DOM_TXN_CHANNEL,count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_3 group by 1;//4920103

select DWL_SENDER_FLAG,sum(PR12_CUSTOMERS) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by 1;//86963
---------------------------------------------------------------------------------------------
---- Completed PR12 Recevier db code -------
---------------------------------------------------------------------------------------------



select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;

----------------------------------------------




-----------------------------------------------------------------------------------------------------------------------------

--- R12 YTD Related Variables -------

------------------------------------------------------------------------------------------------------------------------------


---- create txn related info ---
CREATE OR REPLACE TABLE CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 AS
SELECT
    RCVCUSTOMER_KEY, 
    COUNT(TXN_ID) RCV_TXNS_CY_YTD,
    NVL(SUM(PRINCIPAL ),0) RCV_PRINCIPAL_CY_YTD,--taken sender principal
    NVL(SUM(FEE ),0) RCV_FEE_CY_YTD,
    NVL(SUM(REVENUE ),0) RCV_REVENUE_CY_YTD
FROM 
    R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE
where
    TXN_MONTH > DATEADD(MONTH,-1,$FIRST_MONTH_OF_YEAR)  AND
    TXN_MONTH <= DATEADD(MONTH,1,$R13_End_date)--$R13_End_date
GROUP BY
    1
;


select DATEADD(MONTH,-1,$FIRST_MONTH_OF_YEAR);//2024-12-01
select $R13_End_date;//2025-01-01
----------------------------------------------------------------------------------------------------------------------------------

select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;

select count(*),count(distinct RCVCUSTOMER_KEY) from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;//35333581

select count(*),count(distinct RCVCUSTOMER_KEY) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;//
-------------------------------------------------------------------------------------------------------
   
 

------ Add customer info from R12 period to YTD data----
create or replace table CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 as 
select
    b.RCVCUSTOMER_KEY,
    a.ACTIVITY_STATUS,
    a.REGION,
    a.COUNTRY_NAME,
    a.COUNTRY_CODE,
    CASE WHEN a.COUNTRY_NAME IN ('FRANCE','UNITED STATES','CANADA','UNITED KINGDOM','AUSTRALIA','GERMANY')
         THEN a.COUNTRY_NAME END AS TOP_COUNTRY,
    a.REGISTERED_CUSTOMER,
    a.LOYALTY_MEMBER,
    a.mywucountry_status,
    a.Contactability_Flag as FLAG_CONTACTABLE,
    a.SMS_contactable,
    a.Email_contactable,
    a.Contactability,
    a.SMS_Marketablility as SMS_MARKETABLE,
    a.Email_Marketablility as EMAIL_MARKETABLE,
    a.Marketability EMAIL_SMS_MARKETABLE,
    a.Marketability_New EMAIL_SMS_MARKETABLE_NEW,
    a.Marketability_Flag as FLAG_MARKETABLE,
    a.Sms_Opt_out_Flag,
    a.Loyalty_Flag,
    a.OPT_3RD_PARTY AS SOCIAL_MEDIA_MKT,
    a.COMPANY_BRAND,
    a.DOM_PRIN_BAND,
    //CASE WHEN a.DOM_PRICING_CHANNEL IN ('POS','AIR','TMT') THEN 'RETAIL'
    //     WHEN a.DOM_PRICING_CHANNEL IN ('WEB','APP') THEN 'DIGITAL'
    //    ELSE 'NA' END AS DOM_TXN_CHANNEL,
    a.DOM_TXN_CHANNEL,
    a.DOM_PRICING_CHANNEL,
    a.DOM_RCVCURRENCY,
    a.DOM_PAYOUT,
    a.DOM_SUB_PAYIN_METHOD,
    a.DOM_SUB_PAYOUT_METHOD,
    a.NATIVE_CHANNEL,
    a.SND_RCV_FLAG,
    a.MULTI_SENDER,
    a.DOM_IMT_DMT,
    a.NATIVE_IMT_DMT,
    a.SENDER_DISTRIBUTION,
    a.CORRIDOR_TYPE,
    
    CASE WHEN NVL(RFM_PERSONA,'Receive Only') = '1.UBER' THEN '1.LOYALS'
         WHEN NVL(RFM_PERSONA,'Receive Only') = '2.LOYALS' THEN '2.ENGAGED' 
         ELSE NVL(RFM_PERSONA,'Receive Only') END AS RFM_PERSONA,
------------------------------------------------------------------------
    CASE WHEN CHURN_DECILE IN (1,2,3,4,5,6,7,8) THEN '2.Low-Risk' 
         WHEN CHURN_DECILE IN (9,10)  THEN '1.High-Risk'
        ELSE 
        CASE WHEN BEATS IN ('On Schedule','Ahead Schedule','1 beat late','2 beats late') THEN '2.Low-Risk'
            WHEN BEATS IN ('3 beats late','4 beats late','5 beats plus late') THEN '1.High-Risk'
            ELSE 
                 CASE WHEN RFM_PERSONA IN ('7.LOST','5.SPORADICS','6.SLIPPING') THEN '1.High-Risk'
                      WHEN RFM_PERSONA IN ('4.WHALES','2.LOYALS','1.UBER','3.PROMISING','8.ONE AND DONES') THEN '2.Low-Risk'
                     ELSE '4: NA' 
                END END
    END AS CHURN_RISK,
----------------------------------------------------------------------
    CASE WHEN RFM_DECILE IN (1,2,3) THEN '3.Low-Value'
         WHEN RFM_DECILE IN (4,5,6) THEN '2.Medium-Value'
         WHEN RFM_DECILE IN (7,8,9,10) THEN '1.High-Value'
         WHEN RFM_DECILE IN (999) THEN '4.NA'
         ELSE '4.NA' END AS VALUED_SEGMENT_RFM,
//NVL(VALUED_SEGMENT_RFM,'Receive Only') AS VALUED_SEGMENT_RFM,
    CASE WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '1. HIGH VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '2. MEDIUM VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '3. LOW VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '4. HIGH VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '5. MEDIUM VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '6. LOW VALUE-LOW RISK'
         ELSE '0. NA' END AS RISK_VALUE_SEGMENT,

    REPLACE(a.TOP_DMA, SUBSTRING(a.TOP_DMA, 0, charindex('.', a.TOP_DMA, 0))) AS TOP_DMA,
    REPLACE(a.TOP_AGENT, SUBSTRING(a.TOP_AGENT, 0, charindex('.', a.TOP_AGENT, 0))) AS TOP_AGENT,
    REPLACE(a.TOP_CORRIDOR, SUBSTRING(a.TOP_CORRIDOR, 0, charindex('.', a.TOP_CORRIDOR, 0))) AS TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    b.*exclude(RCVCUSTOMER_KEY)
 from 
     CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1   b
 left join
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 a
on 
    A.RCVCUSTOMER_KEY=B.RCVCUSTOMER_KEY
left join 
    (select SNDCUSTOMER_KEY,RFM_PERSONA,CHURN_DECILE,RFM_DECILE, from SK_CONSOLIDATED_PROPENSITY_SCORES WHERE MTH_YR = $R13_End_date ) SND 
ON 
    a.RCVCUSTOMER_KEY = SND.SNDCUSTOMER_KEY 
;


------------------------------------------------------------------------------------------------------------

select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 1000;

select count(*),count(distinct RCVCUSTOMER_KEY) from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;//35333581

select DOM_TXN_CHANNEL, count(*),count(distinct RCVCUSTOMER_KEY)  FROM CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 GROUP BY ALL;//1418321
select DOM_TXN_CHANNEL, count(*),count(distinct RCVCUSTOMER_KEY)  FROM R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 GROUP BY ALL;//5445246
----------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------

------ Aggregrate level data ------

----------------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE Receiver_DB_DATA_CY_YTD_AGGREGATED AS 
select 
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    mywucountry_status,
    FLAG_CONTACTABLE,
    SMS_contactable,
    Email_contactable,
    Contactability,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    Sms_Opt_out_Flag,
    Loyalty_Flag,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    case when RCV_TXNS_CY_YTD = 1 then '1'
         when RCV_TXNS_CY_YTD > 1 and RCV_TXNS_CY_YTD <= 3 then '2-3'
         when RCV_TXNS_CY_YTD > 3 and RCV_TXNS_CY_YTD <= 6 then '4-6'
         when RCV_TXNS_CY_YTD > 6 and RCV_TXNS_CY_YTD <= 9 then '7-9'
         when RCV_TXNS_CY_YTD > 9 and RCV_TXNS_CY_YTD <= 12 then '10-12'
         when RCV_TXNS_CY_YTD > 12 then '>12' else 'Missing' end as RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    case when DWL_CUST_FLAG = 'Y' and SND_RCV_FLAG = 'Send + Receive' then 'Y' else 'N' end as DWL_SENDER_FLAG,
    COUNT(RCVCUSTOMER_KEY) CY_YTD_CUSTOMERS,
    SUM(RCV_TXNS_CY_YTD) CY_YTD_TXNS,
    SUM(RCV_PRINCIPAL_CY_YTD) CY_YTD_PRINCIPAL,
    SUM(RCV_FEE_CY_YTD) CY_YTD_FEE,
    SUM(RCV_REVENUE_CY_YTD) CY_YTD_REVENUE
from 
    CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 
group by 
    all;

-----------------------------------------------------------------
select * from Receiver_DB_DATA_CY_YTD_AGGREGATED limit 10;

select sum(CY_YTD_CUSTOMERS) from Receiver_DB_DATA_CY_YTD_AGGREGATED;// 35333581

select COUNT(distinct RCVCUSTOMER_KEY) from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2;//59751293//63935187//67752755//
select DWL_SENDER_FLAG,sum(CY_YTD_CUSTOMERS) from Receiver_DB_DATA_CY_YTD_AGGREGATED group by 1;//74486//77364
---------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------

--- PR12 YTD Related Variables -------

------------------------------------------------------------------------------------------------------------------------------


---- create txn related info ---
CREATE OR REPLACE TABLE LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 AS
SELECT
    RCVCUSTOMER_KEY, 
    COUNT(TXN_ID) RCV_TXNS_LY_YTD,
    NVL(SUM(PRINCIPAL ),0) RCV_PRINCIPAL_LY_YTD,--taken sender principal
    NVL(SUM(FEE ),0) RCV_FEE_LY_YTD,
    NVL(SUM(REVENUE ),0) RCV_REVENUE_LY_YTD
FROM 
    R24_RECEIVER_DB_CUSTOMERS_BASE_TABLE
WHERE 
    TXN_MONTH > DATEADD(year,-1,DATEADD(MONTH,-1,$FIRST_MONTH_OF_YEAR))  AND
    TXN_MONTH <= DATEADD(year,-1,$R13_End_date)
GROUP BY
    1
;


select DATEADD(year,-1,DATEADD(MONTH,-1,$FIRST_MONTH_OF_YEAR));//2022-12-01
select DATEADD(year,-1,$R13_End_date);//2023-011-01

----------------------------------------------------------------------------------------------------------------------------------
select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;

select count(*),count(distinct RCVCUSTOMER_KEY) from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;//36091202

select count(*),count(distinct RCVCUSTOMER_KEY) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;//
-------------------------------------------------------------------------------------------------------
   
 

------ Add customer info from PR12 period to YTD data----
create or replace table LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 as 
select
    b.RCVCUSTOMER_KEY,
    a.ACTIVITY_STATUS,
    a.REGION,
    a.COUNTRY_NAME,
    a.COUNTRY_CODE,
    CASE WHEN a.COUNTRY_NAME IN ('FRANCE','UNITED STATES','CANADA','UNITED KINGDOM','AUSTRALIA','GERMANY')
         THEN a.COUNTRY_NAME END AS TOP_COUNTRY,
    a.REGISTERED_CUSTOMER,
    a.LOYALTY_MEMBER,
    a.mywucountry_status,
    a.Contactability_Flag as FLAG_CONTACTABLE,
    a.SMS_contactable,
    a.Email_contactable,
    a.Contactability,
    a.SMS_Marketablility as SMS_MARKETABLE,
    a.Email_Marketablility as EMAIL_MARKETABLE,
    a.Marketability EMAIL_SMS_MARKETABLE,
    a.Marketability_New EMAIL_SMS_MARKETABLE_NEW,
    a.Marketability_Flag as FLAG_MARKETABLE,
    a.Sms_Opt_out_Flag,
    a.Loyalty_Flag,
    a.OPT_3RD_PARTY AS SOCIAL_MEDIA_MKT,
    a.COMPANY_BRAND,
    a.DOM_PRIN_BAND,
    //CASE WHEN a.DOM_PRICING_CHANNEL IN ('POS','AIR','TMT') THEN 'RETAIL'
    //     WHEN a.DOM_PRICING_CHANNEL IN ('WEB','APP') THEN 'DIGITAL'
    //    ELSE 'NA' END AS DOM_TXN_CHANNEL,
    a.DOM_TXN_CHANNEL,
    a.DOM_PRICING_CHANNEL,
    a.DOM_RCVCURRENCY,
    a.DOM_PAYOUT,
    a.DOM_SUB_PAYIN_METHOD,
    a.DOM_SUB_PAYOUT_METHOD,
    a.NATIVE_CHANNEL,
    a.SND_RCV_FLAG,
    a.MULTI_SENDER,
    a.DOM_IMT_DMT,
    a.NATIVE_IMT_DMT,
    a.SENDER_DISTRIBUTION,
    a.CORRIDOR_TYPE,
    CASE WHEN NVL(RFM_PERSONA,'Receive Only') = '1.UBER' THEN '1.LOYALS'
         WHEN NVL(RFM_PERSONA,'Receive Only') = '2.LOYALS' THEN '2.ENGAGED' 
         ELSE NVL(RFM_PERSONA,'Receive Only') END AS RFM_PERSONA,
------------------------------------------------------------------------
    CASE WHEN CHURN_DECILE IN (1,2,3,4,5,6,7,8) THEN '2.Low-Risk' 
         WHEN CHURN_DECILE IN (9,10)  THEN '1.High-Risk'
        ELSE 
        CASE WHEN BEATS IN ('On Schedule','Ahead Schedule','1 beat late','2 beats late') THEN '2.Low-Risk'
            WHEN BEATS IN ('3 beats late','4 beats late','5 beats plus late') THEN '1.High-Risk'
            ELSE 
                 CASE WHEN RFM_PERSONA IN ('7.LOST','5.SPORADICS','6.SLIPPING') THEN '1.High-Risk'
                      WHEN RFM_PERSONA IN ('4.WHALES','2.LOYALS','1.UBER','3.PROMISING','8.ONE AND DONES') THEN '2.Low-Risk'
                     ELSE '4: NA' 
                END END
    END AS CHURN_RISK,
----------------------------------------------------------------------
    CASE WHEN RFM_DECILE IN (1,2,3) THEN '3.Low-Value'
         WHEN RFM_DECILE IN (4,5,6) THEN '2.Medium-Value'
         WHEN RFM_DECILE IN (7,8,9,10) THEN '1.High-Value'
         WHEN RFM_DECILE IN (999) THEN '4.NA'
         ELSE '4.NA' END AS VALUED_SEGMENT_RFM,
//NVL(VALUED_SEGMENT_RFM,'Receive Only') AS VALUED_SEGMENT_RFM,
    CASE WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '1. HIGH VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '2. MEDIUM VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '1.High-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '3. LOW VALUE-HIGH RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '1.High-Value' THEN '4. HIGH VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '2.Medium-Value' THEN '5. MEDIUM VALUE-LOW RISK'
         WHEN  CHURN_RISK = '2.Low-Risk' AND VALUED_SEGMENT_RFM = '3.Low-Value' THEN '6. LOW VALUE-LOW RISK'
         ELSE '0. NA' END AS RISK_VALUE_SEGMENT,

    REPLACE(a.TOP_DMA, SUBSTRING(a.TOP_DMA, 0, charindex('.', a.TOP_DMA, 0))) AS TOP_DMA,
    REPLACE(a.TOP_AGENT, SUBSTRING(a.TOP_AGENT, 0, charindex('.', a.TOP_AGENT, 0))) AS TOP_AGENT,
    REPLACE(a.TOP_CORRIDOR, SUBSTRING(a.TOP_CORRIDOR, 0, charindex('.', a.TOP_CORRIDOR, 0))) AS TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    b.*exclude(RCVCUSTOMER_KEY)
 from 
     LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1   b
 left join
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 a
on 
    A.RCVCUSTOMER_KEY=B.RCVCUSTOMER_KEY
left join 
    (select SNDCUSTOMER_KEY,RFM_PERSONA,CHURN_DECILE,RFM_DECILE, from SK_CONSOLIDATED_PROPENSITY_SCORES
        WHERE MTH_YR = DATEADD(year,-1,$R13_End_date) ) SND 
ON 
    a.RCVCUSTOMER_KEY = SND.SNDCUSTOMER_KEY 
;
------------------------------------------------------------------------------------------------------------

select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 1000;

select count(*),count(distinct RCVCUSTOMER_KEY) from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;//36091202

select DOM_TXN_CHANNEL, count(*),count(distinct RCVCUSTOMER_KEY) from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 group by all;//4599990 
--------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------

------ Aggregrate level data ------

----------------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE Receiver_DB_DATA_LY_YTD_AGGREGATED AS 
select 
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    mywucountry_status,
    FLAG_CONTACTABLE,
    SMS_contactable,
    Email_contactable,
    Contactability,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    Sms_Opt_out_Flag,
    Loyalty_Flag,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    case when RCV_TXNS_LY_YTD = 1 then '1'
     when RCV_TXNS_LY_YTD > 1 and RCV_TXNS_LY_YTD <= 3 then '2-3'
     when RCV_TXNS_LY_YTD > 3 and RCV_TXNS_LY_YTD <= 6 then '4-6'
     when RCV_TXNS_LY_YTD > 6 and RCV_TXNS_LY_YTD <= 9 then '7-9'
     when RCV_TXNS_LY_YTD > 9 and RCV_TXNS_LY_YTD <= 12 then '10-12'
     when RCV_TXNS_LY_YTD > 12 then '>12' else 'Missing' end as RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    case when DWL_CUST_FLAG = 'Y' and SND_RCV_FLAG = 'Send + Receive' then 'Y' else 'N' end as DWL_SENDER_FLAG,
    COUNT(RCVCUSTOMER_KEY) LY_YTD_CUSTOMERS,
    SUM(RCV_TXNS_LY_YTD) LY_YTD_TXNS,
    SUM(RCV_PRINCIPAL_LY_YTD) LY_YTD_PRINCIPAL,
    SUM(RCV_FEE_LY_YTD) LY_YTD_FEE,
    SUM(RCV_REVENUE_LY_YTD) LY_YTD_REVENUE 
from 
    LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 
group by 
    all;

-----------------------------------------------------------------
select * from Receiver_DB_DATA_LY_YTD_AGGREGATED limit 1000;

select sum(LY_YTD_CUSTOMERS) from Receiver_DB_DATA_LY_YTD_AGGREGATED;//36091202
//14848535

select COUNT(distinct RCVCUSTOMER_KEY) from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2;//14848535

select DWL_SENDER_FLAG,sum(LY_YTD_CUSTOMERS) from Receiver_DB_DATA_LY_YTD_AGGREGATED group by 1;//81179//84453
select DOM_TXN_CHANNEL, count(*),sum(LY_YTD_CUSTOMERS) from Receiver_DB_DATA_LY_YTD_AGGREGATED group by all;
------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------

----------- create dimension level table -------

create or replace table Receiver_DB_DATA_AGGREGATED_Dimension_Base as 
select 
    distinct
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    DWL_SENDER_FLAG,
from 
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED
UNION
select 
    distinct
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    DWL_SENDER_FLAG,
from 
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED
UNION 
select  
    distinct
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    DWL_SENDER_FLAG,
from 
    Receiver_DB_DATA_LY_YTD_AGGREGATED
UNION
select 
    distinct
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_Cust_Flag,
    DWL_SENDER_FLAG,
from 
    Receiver_DB_DATA_CY_YTD_AGGREGATED
;



-----------------------------------------------
select * From Receiver_DB_DATA_AGGREGATED_Dimension_Base limit 10;
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;
select * from Receiver_DB_DATA_LY_YTD_AGGREGATED limit 10;
select * from Receiver_DB_DATA_CY_YTD_AGGREGATED limit 10;
---------------------------------------------------


--- create table on the R12,CY_YTD and PR12 LY_YTD level data----

create or replace table Receiver_DB_DATA_R12_PR12_AGGREGATED_Final  as
select 
    a.ACTIVITY_STATUS,
    a.REGION,
    a.COUNTRY_NAME,
    a.COUNTRY_CODE,
    a.TOP_COUNTRY,
    a.REGISTERED_CUSTOMER,
    a.LOYALTY_MEMBER,
    a.MYWUCOUNTRY_STATUS,
    a.FLAG_CONTACTABLE,
    a.SMS_CONTACTABLE,
    a.EMAIL_CONTACTABLE,
    a.CONTACTABILITY,
    a.SMS_MARKETABLE,
    a.EMAIL_MARKETABLE,
    a.EMAIL_SMS_MARKETABLE,
    a.EMAIL_SMS_MARKETABLE_NEW,
    a.FLAG_MARKETABLE,
    a.SMS_OPT_OUT_FLAG,
    a.LOYALTY_FLAG,
    a.SOCIAL_MEDIA_MKT,
    a.COMPANY_BRAND,
    a.DOM_PRIN_BAND,
    a.DOM_TXN_CHANNEL,
    a.DOM_PRICING_CHANNEL,
    a.DOM_RCVCURRENCY,
    a.DOM_PAYOUT,
    a.DOM_SUB_PAYIN_METHOD,
    a.DOM_SUB_PAYOUT_METHOD,
    a.NATIVE_CHANNEL,
    a.SND_RCV_FLAG,
    a.MULTI_SENDER,
    a.DOM_IMT_DMT,
    a.NATIVE_IMT_DMT,
    a.SENDER_DISTRIBUTION,
    a.CORRIDOR_TYPE,
    a.RCV_TXNS_R12_Group,
    a.RFM_PERSONA,
    a.CHURN_RISK,
    a.VALUED_SEGMENT_RFM,
    a.RISK_VALUE_SEGMENT,
    a.TOP_DMA,
    a.TOP_AGENT,
    a.TOP_CORRIDOR,
    a.DOM_CORRIDOR_NAME,
    a.DWL_Cust_Flag,
    a.DWL_SENDER_FLAG,

--R12 Metrices
    CUSTOMERS as R12_CUSTOMERS,
    R12_TXNS,
    R12_PRINCIPAL,
    R12_REVENUE,
    R12_FEE,
    
--PR12 Metrices
    PR12_CUSTOMERS,
    PR12_TXNS,
    PR12_PRINCIPAL,
    PR12_REVENUE,
    PR12_FEE,
    
--  CY_YTD Metrics
    CY_YTD_CUSTOMERS,
    CY_YTD_TXNS,
    CY_YTD_PRINCIPAL,
    CY_YTD_FEE,
    CY_YTD_REVENUE,
    
-- LY YTD Metrics
    LY_YTD_CUSTOMERS,
    LY_YTD_TXNS,
    LY_YTD_PRINCIPAL,
    LY_YTD_FEE,
    LY_YTD_REVENUE,
    
from Receiver_DB_DATA_AGGREGATED_Dimension_Base a



left join 
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED b 
on  
   nvl(a.ACTIVITY_STATUS,'NA') = nvl(b.ACTIVITY_STATUS,'NA') and                 
   nvl(a.REGION,'NA') = nvl(b.REGION,'NA') and 
   nvl(a.COUNTRY_NAME,'NA') = nvl(b.COUNTRY_NAME,'NA') and 
   nvl(a.COUNTRY_CODE,'NA') = nvl(b.COUNTRY_CODE,'NA') and 
   nvl(a.TOP_COUNTRY,'NA') = nvl(b.TOP_COUNTRY,'NA') and 
   nvl(a.REGISTERED_CUSTOMER,'NA') = nvl(b.REGISTERED_CUSTOMER,'NA') and  
   nvl(a.LOYALTY_MEMBER,'NA') = nvl(b.LOYALTY_MEMBER,'NA') and 
   nvl(a.MYWUCOUNTRY_STATUS,'NA') = nvl(b.MYWUCOUNTRY_STATUS,'NA') and 
   nvl(a.FLAG_CONTACTABLE,'NA') = nvl(b.FLAG_CONTACTABLE,'NA') and 
   nvl(a.SMS_CONTACTABLE,'NA') = nvl(b.SMS_CONTACTABLE,'NA') and 
   nvl(a.EMAIL_CONTACTABLE,'NA') = nvl(b.EMAIL_CONTACTABLE,'NA') and 
   nvl(a.CONTACTABILITY,'NA') = nvl(b.CONTACTABILITY,'NA') and 
   nvl(a.SMS_MARKETABLE,'NA') = nvl(b.SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_MARKETABLE,'NA') = nvl(b.EMAIL_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE,'NA') = nvl(b.EMAIL_SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE_NEW,'NA') = nvl(b.EMAIL_SMS_MARKETABLE_NEW,'NA') and 
   nvl(a.FLAG_MARKETABLE,'NA') = nvl(b.FLAG_MARKETABLE,'NA') and 
   nvl(a.SMS_OPT_OUT_FLAG,'NA') = nvl(b.SMS_OPT_OUT_FLAG,'NA') and 
   nvl(a.LOYALTY_FLAG,'NA') = nvl(b.LOYALTY_FLAG,'NA') and 
   nvl(a.SOCIAL_MEDIA_MKT,'NA') = nvl(b.SOCIAL_MEDIA_MKT,'NA') and 
   nvl(a.COMPANY_BRAND,'NA') = nvl(b.COMPANY_BRAND,'NA') and 
   nvl(a.DOM_PRIN_BAND,'NA') = nvl(b.DOM_PRIN_BAND,'NA') and 
   nvl(a.DOM_TXN_CHANNEL,'NA') = nvl(b.DOM_TXN_CHANNEL,'NA') and 
   nvl(a.DOM_PRICING_CHANNEL,'NA') = nvl(b.DOM_PRICING_CHANNEL,'NA') and 
   nvl(a.DOM_RCVCURRENCY,'NA') = nvl(b.DOM_RCVCURRENCY,'NA') and 
   nvl(a.DOM_PAYOUT,'NA') = nvl(b.DOM_PAYOUT,'NA') and 
   nvl(a.DOM_SUB_PAYIN_METHOD,'NA') = nvl(b.DOM_SUB_PAYIN_METHOD,'NA') and 
   nvl(a.DOM_SUB_PAYOUT_METHOD,'NA') = nvl(b.DOM_SUB_PAYOUT_METHOD,'NA') and 
   nvl(a.DWL_Cust_Flag,'NA') = nvl(b.DWL_Cust_Flag,'NA') and 
   nvl(a.DWL_SENDER_FLAG,'NA') = nvl(b.DWL_SENDER_FLAG,'NA') and 
   nvl(a.NATIVE_CHANNEL,'NA') = nvl(b.NATIVE_CHANNEL,'NA') and 
   nvl(a.SND_RCV_FLAG,'NA') = nvl(b.SND_RCV_FLAG,'NA') and 
   nvl(a.MULTI_SENDER,'NA') = nvl(b.MULTI_SENDER,'NA') and 
   nvl(a.DOM_IMT_DMT,'NA') = nvl(b.DOM_IMT_DMT,'NA') and 
   nvl(a.NATIVE_IMT_DMT,'NA') = nvl(b.NATIVE_IMT_DMT,'NA') and 
   nvl(a.SENDER_DISTRIBUTION,'NA') = nvl(b.SENDER_DISTRIBUTION,'NA') and 
   nvl(a.CORRIDOR_TYPE,'NA') = nvl(b.CORRIDOR_TYPE,'NA') and 
   nvl(a.RCV_TXNS_R12_Group,'NA') = nvl(b.RCV_TXNS_R12_Group,'NA') and 
   nvl(a.RFM_PERSONA,'NA') = nvl(b.RFM_PERSONA,'NA') and 
   nvl(a.CHURN_RISK,'NA') = nvl(b.CHURN_RISK,'NA') and 
   nvl(a.VALUED_SEGMENT_RFM,'NA') = nvl(b.VALUED_SEGMENT_RFM,'NA') and 
   nvl(a.RISK_VALUE_SEGMENT,'NA') = nvl(b.RISK_VALUE_SEGMENT,'NA') and 
   nvl(a.TOP_DMA,'NA') = nvl(b.TOP_DMA,'NA') and 
   nvl(a.TOP_AGENT,'NA') = nvl(b.TOP_AGENT,'NA') and 
   nvl(a.TOP_CORRIDOR,'NA') = nvl(b.TOP_CORRIDOR,'NA') and 
   nvl(a.DOM_CORRIDOR_NAME,'NA') = nvl(b.DOM_CORRIDOR_NAME,'NA')
left join 
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED c
on  
   nvl(a.ACTIVITY_STATUS,'NA') = nvl(c.ACTIVITY_STATUS,'NA') and 
   nvl(a.REGION,'NA') = nvl(c.REGION,'NA') and 
   nvl(a.COUNTRY_NAME,'NA') = nvl(c.COUNTRY_NAME,'NA') and 
   nvl(a.COUNTRY_CODE,'NA') = nvl(c.COUNTRY_CODE,'NA') and 
   nvl(a.TOP_COUNTRY,'NA') = nvl(c.TOP_COUNTRY,'NA') and 
   nvl(a.REGISTERED_CUSTOMER,'NA') = nvl(c.REGISTERED_CUSTOMER,'NA') and 
   nvl(a.LOYALTY_MEMBER,'NA') = nvl(c.LOYALTY_MEMBER,'NA') and 
   nvl(a.MYWUCOUNTRY_STATUS,'NA') = nvl(c.MYWUCOUNTRY_STATUS,'NA') and 
   nvl(a.FLAG_CONTACTABLE,'NA') = nvl(c.FLAG_CONTACTABLE,'NA') and 
   nvl(a.SMS_CONTACTABLE,'NA') = nvl(c.SMS_CONTACTABLE,'NA') and 
   nvl(a.EMAIL_CONTACTABLE,'NA') = nvl(c.EMAIL_CONTACTABLE,'NA') and 
   nvl(a.CONTACTABILITY,'NA') = nvl(c.CONTACTABILITY,'NA') and 
   nvl(a.SMS_MARKETABLE,'NA') = nvl(c.SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_MARKETABLE,'NA') = nvl(c.EMAIL_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE,'NA') = nvl(c.EMAIL_SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE_NEW,'NA') = nvl(c.EMAIL_SMS_MARKETABLE_NEW,'NA') and 
   nvl(a.FLAG_MARKETABLE,'NA') = nvl(c.FLAG_MARKETABLE,'NA') and 
   nvl(a.SMS_OPT_OUT_FLAG,'NA') = nvl(c.SMS_OPT_OUT_FLAG,'NA') and 
   nvl(a.LOYALTY_FLAG,'NA') = nvl(c.LOYALTY_FLAG,'NA') and 
   nvl(a.SOCIAL_MEDIA_MKT,'NA') = nvl(c.SOCIAL_MEDIA_MKT,'NA') and 
   nvl(a.COMPANY_BRAND,'NA') = nvl(c.COMPANY_BRAND,'NA') and 
   nvl(a.DOM_PRIN_BAND,'NA') = nvl(c.DOM_PRIN_BAND,'NA') and 
   nvl(a.DOM_TXN_CHANNEL,'NA') = nvl(c.DOM_TXN_CHANNEL,'NA') and 
   nvl(a.DOM_PRICING_CHANNEL,'NA') = nvl(c.DOM_PRICING_CHANNEL,'NA') and 
   nvl(a.DOM_RCVCURRENCY,'NA') = nvl(c.DOM_RCVCURRENCY,'NA') and 
   nvl(a.DOM_PAYOUT,'NA') = nvl(c.DOM_PAYOUT,'NA') and 
   nvl(a.DOM_SUB_PAYIN_METHOD,'NA') = nvl(c.DOM_SUB_PAYIN_METHOD,'NA') and 
   nvl(a.DOM_SUB_PAYOUT_METHOD,'NA') = nvl(c.DOM_SUB_PAYOUT_METHOD,'NA') and 
   nvl(a.DWL_Cust_Flag,'NA') = nvl(c.DWL_Cust_Flag,'NA') and 
   nvl(a.DWL_SENDER_FLAG,'NA') = nvl(c.DWL_SENDER_FLAG,'NA') and 
   nvl(a.NATIVE_CHANNEL,'NA') = nvl(c.NATIVE_CHANNEL,'NA') and 
   nvl(a.SND_RCV_FLAG,'NA') = nvl(c.SND_RCV_FLAG,'NA') and 
   nvl(a.MULTI_SENDER,'NA') = nvl(c.MULTI_SENDER,'NA') and 
   nvl(a.DOM_IMT_DMT,'NA') = nvl(c.DOM_IMT_DMT,'NA') and 
   nvl(a.NATIVE_IMT_DMT,'NA') = nvl(c.NATIVE_IMT_DMT,'NA') and 
   nvl(a.SENDER_DISTRIBUTION,'NA') = nvl(c.SENDER_DISTRIBUTION,'NA') and 
   nvl(a.CORRIDOR_TYPE,'NA') = nvl(c.CORRIDOR_TYPE,'NA') and 
   nvl(a.RCV_TXNS_R12_Group,'NA') = nvl(c.RCV_TXNS_R12_Group,'NA') and 
   nvl(a.RFM_PERSONA,'NA') = nvl(c.RFM_PERSONA,'NA') and 
   nvl(a.CHURN_RISK,'NA') = nvl(c.CHURN_RISK,'NA') and 
   nvl(a.VALUED_SEGMENT_RFM,'NA') = nvl(c.VALUED_SEGMENT_RFM,'NA') and 
   nvl(a.RISK_VALUE_SEGMENT,'NA') = nvl(c.RISK_VALUE_SEGMENT,'NA') and 
   nvl(a.TOP_DMA,'NA') = nvl(c.TOP_DMA,'NA') and 
   nvl(a.TOP_AGENT,'NA') = nvl(c.TOP_AGENT,'NA') and 
   nvl(a.TOP_CORRIDOR,'NA') = nvl(c.TOP_CORRIDOR,'NA') and 
   nvl(a.DOM_CORRIDOR_NAME,'NA') = nvl(c.DOM_CORRIDOR_NAME,'NA') 
left join 
    Receiver_DB_DATA_CY_YTD_AGGREGATED d
on  
   nvl(a.ACTIVITY_STATUS,'NA') = nvl(d.ACTIVITY_STATUS,'NA') and 
   nvl(a.REGION,'NA') = nvl(d.REGION,'NA') and 
   nvl(a.COUNTRY_NAME,'NA') = nvl(d.COUNTRY_NAME,'NA') and 
   nvl(a.COUNTRY_CODE,'NA') = nvl(d.COUNTRY_CODE,'NA') and 
   nvl(a.TOP_COUNTRY,'NA') = nvl(d.TOP_COUNTRY,'NA') and 
   nvl(a.REGISTERED_CUSTOMER,'NA') = nvl(d.REGISTERED_CUSTOMER,'NA') and 
   nvl(a.LOYALTY_MEMBER,'NA') = nvl(d.LOYALTY_MEMBER,'NA') and 
   nvl(a.MYWUCOUNTRY_STATUS,'NA') = nvl(d.MYWUCOUNTRY_STATUS,'NA') and 
   nvl(a.FLAG_CONTACTABLE,'NA') = nvl(d.FLAG_CONTACTABLE,'NA') and 
   nvl(a.SMS_CONTACTABLE,'NA') = nvl(d.SMS_CONTACTABLE,'NA') and 
   nvl(a.EMAIL_CONTACTABLE,'NA') = nvl(d.EMAIL_CONTACTABLE,'NA') and 
   nvl(a.CONTACTABILITY,'NA') = nvl(d.CONTACTABILITY,'NA') and 
   nvl(a.SMS_MARKETABLE,'NA') = nvl(d.SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_MARKETABLE,'NA') = nvl(d.EMAIL_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE,'NA') = nvl(d.EMAIL_SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE_NEW,'NA') = nvl(d.EMAIL_SMS_MARKETABLE_NEW,'NA') and 
   nvl(a.FLAG_MARKETABLE,'NA') = nvl(d.FLAG_MARKETABLE,'NA') and 
   nvl(a.SMS_OPT_OUT_FLAG,'NA') = nvl(d.SMS_OPT_OUT_FLAG,'NA') and 
   nvl(a.LOYALTY_FLAG,'NA') = nvl(d.LOYALTY_FLAG,'NA') and 
   nvl(a.SOCIAL_MEDIA_MKT,'NA') = nvl(d.SOCIAL_MEDIA_MKT,'NA') and 
   nvl(a.COMPANY_BRAND,'NA') = nvl(d.COMPANY_BRAND,'NA') and 
   nvl(a.DOM_PRIN_BAND,'NA') = nvl(d.DOM_PRIN_BAND,'NA') and 
   nvl(a.DOM_TXN_CHANNEL,'NA') = nvl(d.DOM_TXN_CHANNEL,'NA') and 
   nvl(a.DOM_PRICING_CHANNEL,'NA') = nvl(d.DOM_PRICING_CHANNEL,'NA') and 
   nvl(a.DOM_RCVCURRENCY,'NA') = nvl(d.DOM_RCVCURRENCY,'NA') and 
   nvl(a.DOM_PAYOUT,'NA') = nvl(d.DOM_PAYOUT,'NA') and
   nvl(a.DOM_SUB_PAYIN_METHOD,'NA') = nvl(d.DOM_SUB_PAYIN_METHOD,'NA') and 
   nvl(a.DOM_SUB_PAYOUT_METHOD,'NA') = nvl(d.DOM_SUB_PAYOUT_METHOD,'NA') and 
   nvl(a.DWL_Cust_Flag,'NA') = nvl(d.DWL_Cust_Flag,'NA') and 
   nvl(a.NATIVE_CHANNEL,'NA') = nvl(d.NATIVE_CHANNEL,'NA') and 
   nvl(a.SND_RCV_FLAG,'NA') = nvl(d.SND_RCV_FLAG,'NA') and 
   nvl(a.DWL_SENDER_FLAG,'NA') = nvl(d.DWL_SENDER_FLAG,'NA') and 
   nvl(a.MULTI_SENDER,'NA') = nvl(d.MULTI_SENDER,'NA') and 
   nvl(a.DOM_IMT_DMT,'NA') = nvl(d.DOM_IMT_DMT,'NA') and 
   nvl(a.NATIVE_IMT_DMT,'NA') = nvl(d.NATIVE_IMT_DMT,'NA') and 
   nvl(a.SENDER_DISTRIBUTION,'NA') = nvl(d.SENDER_DISTRIBUTION,'NA') and 
   nvl(a.CORRIDOR_TYPE,'NA') = nvl(d.CORRIDOR_TYPE,'NA') and
   nvl(a.RCV_TXNS_R12_Group,'NA') = nvl(d.RCV_TXNS_R12_Group,'NA') and 
   nvl(a.RFM_PERSONA,'NA') = nvl(d.RFM_PERSONA,'NA') and 
   nvl(a.CHURN_RISK,'NA') = nvl(d.CHURN_RISK,'NA') and 
   nvl(a.VALUED_SEGMENT_RFM,'NA') = nvl(d.VALUED_SEGMENT_RFM,'NA') and 
   nvl(a.RISK_VALUE_SEGMENT,'NA') = nvl(d.RISK_VALUE_SEGMENT,'NA') and 
   nvl(a.TOP_DMA,'NA') = nvl(d.TOP_DMA,'NA') and 
   nvl(a.TOP_AGENT,'NA') = nvl(d.TOP_AGENT,'NA') and 
   nvl(a.TOP_CORRIDOR,'NA') = nvl(d.TOP_CORRIDOR,'NA') and 
   nvl(a.DOM_CORRIDOR_NAME,'NA') = nvl(d.DOM_CORRIDOR_NAME,'NA') 
left join 
    Receiver_DB_DATA_LY_YTD_AGGREGATED e
on  
   nvl(a.ACTIVITY_STATUS,'NA') = nvl(e.ACTIVITY_STATUS,'NA') and 
   nvl(a.REGION,'NA') = nvl(e.REGION,'NA') and 
   nvl(a.COUNTRY_NAME,'NA') = nvl(e.COUNTRY_NAME,'NA') and 
   nvl(a.COUNTRY_CODE,'NA') = nvl(e.COUNTRY_CODE,'NA') and 
   nvl(a.TOP_COUNTRY,'NA') = nvl(e.TOP_COUNTRY,'NA') and 
   nvl(a.REGISTERED_CUSTOMER,'NA') = nvl(e.REGISTERED_CUSTOMER,'NA') and 
   nvl(a.LOYALTY_MEMBER,'NA') = nvl(e.LOYALTY_MEMBER,'NA') and 
   nvl(a.MYWUCOUNTRY_STATUS,'NA') = nvl(e.MYWUCOUNTRY_STATUS,'NA') and 
   nvl(a.FLAG_CONTACTABLE,'NA') = nvl(e.FLAG_CONTACTABLE,'NA') and 
   nvl(a.SMS_CONTACTABLE,'NA') = nvl(e.SMS_CONTACTABLE,'NA') and 
   nvl(a.EMAIL_CONTACTABLE,'NA') = nvl(e.EMAIL_CONTACTABLE,'NA') and 
   nvl(a.CONTACTABILITY,'NA') = nvl(e.CONTACTABILITY,'NA') and 
   nvl(a.SMS_MARKETABLE,'NA') = nvl(e.SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_MARKETABLE,'NA') = nvl(e.EMAIL_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE,'NA') = nvl(e.EMAIL_SMS_MARKETABLE,'NA') and 
   nvl(a.EMAIL_SMS_MARKETABLE_NEW,'NA') = nvl(e.EMAIL_SMS_MARKETABLE_NEW,'NA') and 
   nvl(a.FLAG_MARKETABLE,'NA') = nvl(e.FLAG_MARKETABLE,'NA') and 
   nvl(a.SMS_OPT_OUT_FLAG,'NA') = nvl(e.SMS_OPT_OUT_FLAG,'NA') and 
   nvl(a.LOYALTY_FLAG,'NA') = nvl(e.LOYALTY_FLAG,'NA') and 
   nvl(a.SOCIAL_MEDIA_MKT,'NA') = nvl(e.SOCIAL_MEDIA_MKT,'NA') and 
   nvl(a.COMPANY_BRAND,'NA') = nvl(e.COMPANY_BRAND,'NA') and 
   nvl(a.DOM_PRIN_BAND,'NA') = nvl(e.DOM_PRIN_BAND,'NA') and 
   nvl(a.DOM_TXN_CHANNEL,'NA') = nvl(e.DOM_TXN_CHANNEL,'NA') and 
   nvl(a.DOM_PRICING_CHANNEL,'NA') = nvl(e.DOM_PRICING_CHANNEL,'NA') and 
   nvl(a.DOM_RCVCURRENCY,'NA') = nvl(e.DOM_RCVCURRENCY,'NA') and 
   nvl(a.DOM_PAYOUT,'NA') = nvl(e.DOM_PAYOUT,'NA') and 
   nvl(a.DOM_SUB_PAYIN_METHOD,'NA') = nvl(e.DOM_SUB_PAYIN_METHOD,'NA') and 
   nvl(a.DOM_SUB_PAYOUT_METHOD,'NA') = nvl(e.DOM_SUB_PAYOUT_METHOD,'NA') and 
   nvl(a.DWL_Cust_Flag,'NA') = nvl(e.DWL_Cust_Flag,'NA') and 
   nvl(a.DWL_SENDER_FLAG,'NA') = nvl(e.DWL_SENDER_FLAG,'NA') and 
   nvl(a.NATIVE_CHANNEL,'NA') = nvl(e.NATIVE_CHANNEL,'NA') and 
   nvl(a.SND_RCV_FLAG,'NA') = nvl(e.SND_RCV_FLAG,'NA') and 
   nvl(a.MULTI_SENDER,'NA') = nvl(e.MULTI_SENDER,'NA') and 
   nvl(a.DOM_IMT_DMT,'NA') = nvl(e.DOM_IMT_DMT,'NA') and 
   nvl(a.NATIVE_IMT_DMT,'NA') = nvl(e.NATIVE_IMT_DMT,'NA') and 
   nvl(a.SENDER_DISTRIBUTION,'NA') = nvl(e.SENDER_DISTRIBUTION,'NA') and 
   nvl(a.CORRIDOR_TYPE,'NA') = nvl(e.CORRIDOR_TYPE,'NA') and 
   nvl(a.RCV_TXNS_R12_Group,'NA') = nvl(e.RCV_TXNS_R12_Group,'NA') and 
   nvl(a.RFM_PERSONA,'NA') = nvl(e.RFM_PERSONA,'NA') and 
   nvl(a.CHURN_RISK,'NA') = nvl(e.CHURN_RISK,'NA') and 
   nvl(a.VALUED_SEGMENT_RFM,'NA') = nvl(e.VALUED_SEGMENT_RFM,'NA') and 
   nvl(a.RISK_VALUE_SEGMENT,'NA') = nvl(e.RISK_VALUE_SEGMENT,'NA') and 
   nvl(a.TOP_DMA,'NA') = nvl(e.TOP_DMA,'NA') and 
   nvl(a.TOP_AGENT,'NA') = nvl(e.TOP_AGENT,'NA') and 
   nvl(a.TOP_CORRIDOR,'NA') = nvl(e.TOP_CORRIDOR,'NA') and 
   nvl(a.DOM_CORRIDOR_NAME,'NA') = nvl(e.DOM_CORRIDOR_NAME,'NA') 
;


---------------------------------------------------------------------------------------
select * from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final limit 10;

select count(*) from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;

select distinct DOM_SUB_PAYOUT_METHOD from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;//
select distinct SND_RCV_FLAG from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;
select distinct DWL_CUST_FLAG from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;
select distinct LOYALTY_MEMBER from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;
select distinct DOM_TXN_CHANNEL from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;


select sum(R12_CUSTOMERS),sum(R12_TXNS),sum(R12_PRINCIPAL),sum(R12_REVENUE),sum(R12_FEE) from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final limit 10;
/*
SUM(R12_CUSTOMERS)	SUM(R12_TXNS)	SUM(R12_PRINCIPAL)	SUM(R12_REVENUE)	SUM(R12_FEE)
71937900	       287208626	      105101858412.74	3618498380.7200 	2210595106.9800
*/


select sum(CUSTOMERS),sum(R12_TXNS),sum(R12_PRINCIPAL),sum(R12_REVENUE),sum(R12_FEE) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED;
/*
SUM(CUSTOMERS)	SUM(R12_TXNS)	SUM(R12_PRINCIPAL)	SUM(R12_REVENUE)	SUM(R12_FEE)
71937900	    287208626	     105101858412.74	  3618498380.7200	2210595106.9800
*/


select sum(PR12_CUSTOMERS),sum(PR12_TXNS),sum(PR12_PRINCIPAL),sum(PR12_REVENUE),sum(PR12_FEE) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED;
/*
SUM(PR12_CUSTOMERS)	SUM(PR12_TXNS)	SUM(PR12_PRINCIPAL)	SUM(PR12_REVENUE)	SUM(PR12_FEE)
72686417	         278569512	        105162488559.38	    3841476166.3500	 2373622226.4000
*/

select sum(PR12_CUSTOMERS),sum(PR12_TXNS),sum(PR12_PRINCIPAL),sum(PR12_REVENUE),sum(PR12_FEE) from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final limit 10;
/*
SUM(PR12_CUSTOMERS)	SUM(PR12_TXNS)	SUM(PR12_PRINCIPAL)	SUM(PR12_REVENUE)	   SUM(PR12_FEE)
72686417	           278569512	105162488559.38       	3841476166.3500	   2373622226.4000
*/



select sum(LY_YTD_CUSTOMERS),sum(LY_YTD_TXNS),sum(LY_YTD_PRINCIPAL),sum(LY_YTD_REVENUE),sum(LY_YTD_FEE) from
Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;
/*
SUM(LY_YTD_CUSTOMERS)	SUM(LY_YTD_TXNS)	SUM(LY_YTD_PRINCIPAL)	SUM(LY_YTD_REVENUE)	SUM(LY_YTD_FEE)
72686417	               278569512	      105162488559.38	        3841476166.3500	2373622226.4000
*/

select sum(LY_YTD_CUSTOMERS),sum(LY_YTD_TXNS),sum(LY_YTD_PRINCIPAL),sum(LY_YTD_REVENUE),sum(LY_YTD_FEE) from
Receiver_DB_DATA_LY_YTD_AGGREGATED;
/*
SUM(LY_YTD_CUSTOMERS)	SUM(LY_YTD_TXNS)	SUM(LY_YTD_PRINCIPAL)	SUM(LY_YTD_REVENUE)	SUM(LY_YTD_FEE)
72686417	278569512	105162488559.38	3841476166.3500	2373622226.4000
*/


select sum(CY_YTD_CUSTOMERS),sum(CY_YTD_TXNS),sum(CY_YTD_PRINCIPAL),sum(CY_YTD_REVENUE),sum(CY_YTD_FEE) from
Receiver_DB_DATA_R12_PR12_AGGREGATED_Final;
/*
SUM(CY_YTD_CUSTOMERS)	SUM(CY_YTD_TXNS)	SUM(CY_YTD_PRINCIPAL)	SUM(CY_YTD_REVENUE)	SUM(CY_YTD_FEE)
71937900	287208626	105101858412.74	3618498380.7200	2210595106.9800
*/


select sum(CY_YTD_CUSTOMERS),sum(CY_YTD_TXNS),sum(CY_YTD_PRINCIPAL),sum(CY_YTD_REVENUE),sum(CY_YTD_FEE) from
Receiver_DB_DATA_CY_YTD_AGGREGATED;
/*
SUM(CY_YTD_CUSTOMERS)	SUM(CY_YTD_TXNS)	SUM(CY_YTD_PRINCIPAL)	SUM(CY_YTD_REVENUE)	SUM(CY_YTD_FEE)
71937900	287208626	105101858412.74	3618498380.7200	2210595106.9800

*/


select * from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final limit 10;
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED limit 10;


--GRANT SELECT ON Receiver_DB_DATA_R12_PR12_AGGREGATED_Final TO DIGITAL_RL;
--GRANT SELECT ON R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED TO DIGITAL_RL;
----------------------------------------------------------
-- create a table for month 
create or replace table Receiver_DB_Date as 
select $R13_End_date as Month;
    

select * from Receiver_DB_Date;









----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------

select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL limit 10;
select MTH_YR,count(*) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL group by 1;
---------------------------------------------------------------------------------

------ create a historical data for R12 each month -----

create or replace table R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL as
select 
    $R13_End_date as MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_CODE,
    COUNTRY_NAME,
    MYWU_COUNTRY,
    UTR_MYWUCOUNTRY,
    RECENT_TRANSACTION_DT,
    GENDER,
    AGE,
    COMPANY_BRAND,
    DOM_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DOM_RCVAGENT,
    DOM_PRIN_BAND,
    DOM_RCVCURRENCY,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_IMT_DMT,
    CORRIDOR_TYPE,
    RCV_TXNS_R12_Group,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    RCV_TXNS_R12,
    RCV_APP_R12,
    RCV_WEB_R12,
    RCV_DIGITAL_R12,
    RCV_RETAIL_R12,
    RCV_PRINCIPAL_R12,
    RCV_FEE_R12,
    RCV_REVENUE_R12,
    SENDER_COUNT,
    BEATS,
    MULTI_SENDER,
    SEND_TXNS_R12,
    SEND_PRINCIPAL_R12,
    SEND_FEE_R12,
    SEND_REVENUE_R12,
    SND_RCV_FLAG,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    DWL_CUST_FLAG,
    AGENT_NETWORK,
    LOYALTY_MEMBER,
    REGISTERED_CUSTOMER,
    REGISTRATION_DATE,
    LOYALTY_MEMBER_FLAG,
    MYWUCOUNTRY_STATUS,
    CONTACTABILITY_FLAG,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    MOBILE_CONTACTABLE_1,
    EMAIL_CONTACTABLE_1,
    CONTACTABILITY_1,
    SMS_MARKETABLILITY,
    EMAIL_MARKETABLILITY,
    MARKETABILITY,
    MARKETABILITY_1,
    MARKETABILITY_NEW,
    MARKETABILITY_FLAG,
    SMS_OPT_OUT_FLAG,
    EMAIL_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    HVC_FLAG,
    OPT_3RD_PARTY,
    DMA_CODE,
    CUSTOMER_DMA,
    DMA_RANK,
    TOP_DMA,
    AGENT_RANK,
    TOP_AGENT,
    CORR_RANK,
    TOP_CORRIDOR
from
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4

UNION 

select 
    MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_CODE,
    COUNTRY_NAME,
    MYWU_COUNTRY,
    UTR_MYWUCOUNTRY,
    RECENT_TRANSACTION_DT,
    GENDER,
    AGE,
    COMPANY_BRAND,
    DOM_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DOM_RCVAGENT,
    DOM_PRIN_BAND,
    DOM_RCVCURRENCY,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_IMT_DMT,
    CORRIDOR_TYPE,
    'Missing' as RCV_TXNS_R12_Group,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    RCV_TXNS_R12,
    RCV_APP_R12,
    RCV_WEB_R12,
    RCV_DIGITAL_R12,
    RCV_RETAIL_R12,
    RCV_PRINCIPAL_R12,
    RCV_FEE_R12,
    RCV_REVENUE_R12,
    SENDER_COUNT,
    BEATS,
    MULTI_SENDER,
    SEND_TXNS_R12,
    SEND_PRINCIPAL_R12,
    SEND_FEE_R12,
    SEND_REVENUE_R12,
    SND_RCV_FLAG,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    DWL_CUST_FLAG,
    AGENT_NETWORK,
    LOYALTY_MEMBER,
    REGISTERED_CUSTOMER,
    REGISTRATION_DATE,
    LOYALTY_MEMBER_FLAG,
    MYWUCOUNTRY_STATUS,
    CONTACTABILITY_FLAG,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    MOBILE_CONTACTABLE_1,
    EMAIL_CONTACTABLE_1,
    CONTACTABILITY_1,
    SMS_MARKETABLILITY,
    EMAIL_MARKETABLILITY,
    MARKETABILITY,
    MARKETABILITY_1,
    MARKETABILITY_NEW,
    MARKETABILITY_FLAG,
    SMS_OPT_OUT_FLAG,
    EMAIL_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    HVC_FLAG,
    OPT_3RD_PARTY,
    DMA_CODE,
    CUSTOMER_DMA,
    DMA_RANK,
    TOP_DMA,
    AGENT_RANK,
    TOP_AGENT,
    CORR_RANK,
    TOP_CORRIDOR
from
    R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL
;

select MTH_YR, count(*) from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL group by 1;
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL limit 10;

-----------------------------------------------------------------------------------

/*
create or replace table PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL as
select 
    dateadd(year,-1,(dateadd(month,-1,$R13_End_date))) as MTH_YR,
    * 
from
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4
    ;


select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;
*/

--------------------------------------------------------------------
select MTH_YR ,count(*) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL group by 1;
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL limit 10;

--------------------------------------------------------------------------
------ create a historical data for PR12 each month -----

create or replace table PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL as
select 
    dateadd(year,-1,$R13_End_date) as MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_CODE,
    COUNTRY_NAME,
    MYWU_COUNTRY,
    UTR_MYWUCOUNTRY,
    RECENT_TRANSACTION_DT,
    GENDER,
    AGE,
    COMPANY_BRAND,
    DOM_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DOM_RCVAGENT,
    DOM_PRIN_BAND,
    DOM_RCVCURRENCY,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_IMT_DMT,
    CORRIDOR_TYPE,
    RCV_TXNS_R12_Group,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    RCV_TXNS_R12,
    RCV_APP_R12,
    RCV_WEB_R12,
    RCV_DIGITAL_R12,
    RCV_RETAIL_R12,
    RCV_PRINCIPAL_R12,
    RCV_FEE_R12,
    RCV_REVENUE_R12,
    SENDER_COUNT,
    BEATS,
    MULTI_SENDER,
    SEND_TXNS_R12,
    SEND_PRINCIPAL_R12,
    SEND_FEE_R12,
    SEND_REVENUE_R12,
    SND_RCV_FLAG,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    DWL_CUST_FLAG,
    AGENT_NETWORK,
    LOYALTY_MEMBER,
    REGISTERED_CUSTOMER,
    REGISTRATION_DATE,
    LOYALTY_MEMBER_FLAG,
    MYWUCOUNTRY_STATUS,
    CONTACTABILITY_FLAG,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    MOBILE_CONTACTABLE_1,
    EMAIL_CONTACTABLE_1,
    CONTACTABILITY_1,
    SMS_MARKETABLILITY,
    EMAIL_MARKETABLILITY,
    MARKETABILITY,
    MARKETABILITY_1,
    MARKETABILITY_NEW,
    MARKETABILITY_FLAG,
    SMS_OPT_OUT_FLAG,
    EMAIL_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    HVC_FLAG,
    OPT_3RD_PARTY,
    DMA_CODE,
    CUSTOMER_DMA,
    DMA_RANK,
    TOP_DMA,
    AGENT_RANK,
    TOP_AGENT,
    CORR_RANK,
    TOP_CORRIDOR
from
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4

UNION 

select 
    MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_CODE,
    COUNTRY_NAME,
    MYWU_COUNTRY,
    UTR_MYWUCOUNTRY,
    RECENT_TRANSACTION_DT,
    GENDER,
    AGE,
    COMPANY_BRAND,
    DOM_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DOM_RCVAGENT,
    DOM_PRIN_BAND,
    DOM_RCVCURRENCY,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_IMT_DMT,
    CORRIDOR_TYPE,
    'Missing' as RCV_TXNS_R12_Group,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    RCV_TXNS_R12,
    RCV_APP_R12,
    RCV_WEB_R12,
    RCV_DIGITAL_R12,
    RCV_RETAIL_R12,
    RCV_PRINCIPAL_R12,
    RCV_FEE_R12,
    RCV_REVENUE_R12,
    SENDER_COUNT,
    BEATS,
    MULTI_SENDER,
    SEND_TXNS_R12,
    SEND_PRINCIPAL_R12,
    SEND_FEE_R12,
    SEND_REVENUE_R12,
    SND_RCV_FLAG,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    DWL_CUST_FLAG,
    AGENT_NETWORK,
    LOYALTY_MEMBER,
    REGISTERED_CUSTOMER,
    REGISTRATION_DATE,
    LOYALTY_MEMBER_FLAG,
    MYWUCOUNTRY_STATUS,
    CONTACTABILITY_FLAG,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    MOBILE_CONTACTABLE_1,
    EMAIL_CONTACTABLE_1,
    CONTACTABILITY_1,
    SMS_MARKETABLILITY,
    EMAIL_MARKETABLILITY,
    MARKETABILITY,
    MARKETABILITY_1,
    MARKETABILITY_NEW,
    MARKETABILITY_FLAG,
    SMS_OPT_OUT_FLAG,
    EMAIL_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    HVC_FLAG,
    OPT_3RD_PARTY,
    DMA_CODE,
    CUSTOMER_DMA,
    DMA_RANK,
    TOP_DMA,
    AGENT_RANK,
    TOP_AGENT,
    CORR_RANK,
    TOP_CORRIDOR
from
    PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL
;


select MTH_YR ,count(*) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL group by 1;
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL limit 10;

--delete from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL where mth_yr='2023-10-01';

---------------------------------------------------------------------------------------------------------------------

----- create CY YTD table for historical data ---
-----------------------------------------------------------------------------------
select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;
/*
create or replace table CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL as
select 
    --dateadd(year,-1,(dateadd(month,-1,$R13_End_date))) as MTH_YR,
    dateadd(month,-1,$R13_End_date) as MTH_YR,
    * 
from
    CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2
    ;

select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;
*/

--------------------------------------------------------------------------------------------------

select MTH_YR ,count(*) from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL group by 1;
select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;

--------------------------------------------------------------------------------------------------------
------ create a historical data for CY YTD each month -----

create or replace table CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL as
select 
    $R13_End_date as MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    --RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_CUST_FLAG,
    RCV_TXNS_CY_YTD,
    RCV_PRINCIPAL_CY_YTD,
    RCV_FEE_CY_YTD,
    RCV_REVENUE_CY_YTD,

from
    CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2

UNION 

select 
    MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    --'Missing' as RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_CUST_FLAG,
    RCV_TXNS_CY_YTD,
    RCV_PRINCIPAL_CY_YTD,
    RCV_FEE_CY_YTD,
    RCV_REVENUE_CY_YTD,
from
    CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL
;


select MTH_YR ,count(*) from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL group by 1;
select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;

--delete from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL where mth_yr='2024-10-01';

---------------------------------------------------------------------------------------------------------------------


----- create LY YTD table for historical data ---
-----------------------------------------------------------------------------------
select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;

/*
create or replace table LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL as
select 
    dateadd(year,-1,(dateadd(month,-1,$R13_End_date))) as MTH_YR,
    * 
from
    LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2
    ;

*/

----------------------------------------------------------------------------
select MTH_YR ,count(*) from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL group by 1;
select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;
---------------------------------------------------------------------------
------ create a historical data for CY YTD each month -----

create or replace table LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL as
select 
    dateadd(year,-1,$R13_End_date) as MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    --RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_CUST_FLAG,
    RCV_TXNS_LY_YTD,
    RCV_PRINCIPAL_LY_YTD,
    RCV_FEE_LY_YTD,
    RCV_REVENUE_LY_YTD,

from
    LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2

UNION 

select 
    MTH_YR,
    RCVCUSTOMER_KEY,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    --'Missing' as RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_CUST_FLAG,
    RCV_TXNS_LY_YTD,
    RCV_PRINCIPAL_LY_YTD,
    RCV_FEE_LY_YTD,
    RCV_REVENUE_LY_YTD,
from
    LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL
;


select MTH_YR,count(*) from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL group by 1;
select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;

--delete from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL where mth_yr='2023-10-01';

---------------------------------------------------------------------------------------------------------------------



----- create aggregated table for historical data ---
-----------------------------------------------------------------------------------
select * from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final limit 10;

/*
create or replace table Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL as
select 
    dateadd(month,-1,$R13_End_date) as MTH_YR,
    * 
from
    Receiver_DB_DATA_R12_PR12_AGGREGATED_Final
    ;

*/

----------------------------------------------------------------------------
select MTH_YR ,count(*) from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL group by 1;
select count(*) from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL limit 10;
-----------------------------------------------------------------------------


------ create a historical data for aggregrated  each month -----

create or replace table Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL as
select 
    $R13_End_date as MTH_YR,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    --RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_CUST_FLAG,
    DWL_SENDER_FLAG,
    R12_CUSTOMERS,
    R12_TXNS,
    R12_PRINCIPAL,
    R12_REVENUE,
    R12_FEE,
    PR12_CUSTOMERS,
    PR12_TXNS,
    PR12_PRINCIPAL,
    PR12_REVENUE,
    PR12_FEE,
    CY_YTD_CUSTOMERS,
    CY_YTD_TXNS,
    CY_YTD_PRINCIPAL,
    CY_YTD_FEE,
    CY_YTD_REVENUE,
    LY_YTD_CUSTOMERS,
    LY_YTD_TXNS,
    LY_YTD_PRINCIPAL,
    LY_YTD_FEE,
    LY_YTD_REVENUE,
from
    Receiver_DB_DATA_R12_PR12_AGGREGATED_Final

UNION 

select 
    MTH_YR,
    ACTIVITY_STATUS,
    REGION,
    COUNTRY_NAME,
    COUNTRY_CODE,
    TOP_COUNTRY,
    REGISTERED_CUSTOMER,
    LOYALTY_MEMBER,
    MYWUCOUNTRY_STATUS,
    FLAG_CONTACTABLE,
    SMS_CONTACTABLE,
    EMAIL_CONTACTABLE,
    CONTACTABILITY,
    SMS_MARKETABLE,
    EMAIL_MARKETABLE,
    EMAIL_SMS_MARKETABLE,
    EMAIL_SMS_MARKETABLE_NEW,
    FLAG_MARKETABLE,
    SMS_OPT_OUT_FLAG,
    LOYALTY_FLAG,
    SOCIAL_MEDIA_MKT,
    COMPANY_BRAND,
    DOM_PRIN_BAND,
    DOM_TXN_CHANNEL,
    DOM_PRICING_CHANNEL,
    DOM_RCVCURRENCY,
    DOM_PAYOUT,
    DOM_SUB_PAYIN_METHOD,
    DOM_SUB_PAYOUT_METHOD,
    NATIVE_CHANNEL,
    SND_RCV_FLAG,
    MULTI_SENDER,
    DOM_IMT_DMT,
    NATIVE_IMT_DMT,
    SENDER_DISTRIBUTION,
    CORRIDOR_TYPE,
    --'Missing' as RCV_TXNS_R12_Group,
    RFM_PERSONA,
    CHURN_RISK,
    VALUED_SEGMENT_RFM,
    RISK_VALUE_SEGMENT,
    TOP_DMA,
    TOP_AGENT,
    TOP_CORRIDOR,
    DOM_CORRIDOR_NAME,
    DWL_CUST_FLAG,
    DWL_SENDER_FLAG,
    R12_CUSTOMERS,
    R12_TXNS,
    R12_PRINCIPAL,
    R12_REVENUE,
    R12_FEE,
    PR12_CUSTOMERS,
    PR12_TXNS,
    PR12_PRINCIPAL,
    PR12_REVENUE,
    PR12_FEE,
    CY_YTD_CUSTOMERS,
    CY_YTD_TXNS,
    CY_YTD_PRINCIPAL,
    CY_YTD_FEE,
    CY_YTD_REVENUE,
    LY_YTD_CUSTOMERS,
    LY_YTD_TXNS,
    LY_YTD_PRINCIPAL,
    LY_YTD_FEE,
    LY_YTD_REVENUE,
from
    Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL
;


select MTH_YR,count(*) from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL group by 1;
select * from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL limit 10;

--delete from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL where mth_yr='2024-10-01';

---------------------------------------------------------------------------------------------------------------------



----------------------------- All final table list ----------

select * from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final_HISTORICAL limit 10;
select * from Receiver_DB_DATA_R12_PR12_AGGREGATED_Final limit 10;

select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;
select * from LY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;;

select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2_HISTORICAL limit 10;
select * from CY_YTD_RECEIVER_DB_CUSTOMERS_BASE_TABLE_2 limit 10;

select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;
select * from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL limit 10;

select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4_HISTORICAL limit 10;
select * from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_4 limit 10;

---------------------------------------------------------------------------
/*
select RCVCUSTOMER_KEY SND_RCV_FLAG from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 limit 10;//;Send + Receive

select * from SUMMARY_GEN.wudna_txn_master_vw limit 10;

----- DWL customers analysis//
select 
    SND_RCV_FLAG,
    count(distinct RCVCUSTOMER_KEY) 
from 
(
SELECT
    A.RCVCUSTOMER_KEY,
    B.SND_RCV_FLAG,
    DATE_TRUNC(MONTH,RCVPAYING_DATETIME) AS TXN_MONTH,
FROM 
    SUMMARY_GEN.wudna_txn_master_vw A
left join 
    (select RCVCUSTOMER_KEY,SND_RCV_FLAG, from R12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 ) B
on A.RCVCUSTOMER_KEY =B.RCVCUSTOMER_KEY
WHERE 
    SUB_CHANNEL IN ('DIGITAL PARTNERS DWL','DIGITAL PARTNERS DOP') and
    A.RCVCUSTOMER_KEY IS NOT NULL AND 
    RCVAGENT_NUMBER IS NOT NULL AND 
    VALID_TXN_TYPE_CODE='Y' AND 
    SNDAGENT_NUMBER <> 'AKC879730' AND 
    RCVAGENT_NUMBER <> 'AXX100000' AND
    NVL(A.PRODUCT_GROUP, 'NLL') NOT IN ('QCOL', 'QCSH','SWTP') AND 
    A.Refund_trxn='N' AND 
    TXN_MONTH > DATEADD(MONTH,1,$R13_Start_date)  AND
    TXN_MONTH <= $R13_End_date )
group by 1;

/*
SND_RCV_FLAG	COUNT(DISTINCT RCVCUSTOMER_KEY)
Send + Receive	125,865
Receive Only	5,639,262
*/

select (125865/ 5765591)*100;//2.18%

//select * from  SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW limit 10;

*/











;

select count(distinct rcvcustomer_key) as tot_receivers from
(
select 
rcvcustomer_key ,
count(distinct case when DATE_TRUNC('DAY',RCVPAYING_DATETIME) >= '2023-11-01' and  DATE_TRUNC('DAY',RCVPAYING_DATETIME) < '2024-02-01' then txn_id end) as R4R6txns,
count(distinct case when DATE_TRUNC('DAY',RCVPAYING_DATETIME) >= '2024-02-01' and  DATE_TRUNC('DAY',RCVPAYING_DATETIME) < '2024-05-01' then txn_id end) as R3txns,
--count(distinct case when DATE_TRUNC('DAY',RCVPAYING_DATETIME) >= '2024-04-01' and  DATE_TRUNC('DAY',RCVPAYING_DATETIME) < '2024-10-01' then txn_id end) as R7R12txns,
from 
        SUMMARY_GEN.wudna_txn_master_vw 
    where 
        DATE_TRUNC(MONTH,date(RCVPAYING_DATETIME)) >= '2023-05-01' 
        and DATE_TRUNC(MONTH,date(RCVPAYING_DATETIME)) < '2024-05-01' 
        --and RCVcountry_code = 'DO' 
        and RCVCUSTOMER_KEY IS NOT NULL 
        AND RCVAGENT_NUMBER IS NOT NULL 
        AND VALID_TXN_TYPE_CODE='Y' 
        AND SNDAGENT_NUMBER <> 'AKC879730' 
        AND RCVAGENT_NUMBER <> 'AXX100000' 
        AND NVL(PRODUCT_GROUP, 'NLL') NOT IN ('QCOL', 'QCSH','SWTP') 
        AND Refund_trxn='N'  
group by all 
)
where 
    --b.sndcustomer_key is null ---RECEIVE ONLY
   R4R6txns >0 ---R4-R6 ACTIVE
  and R3txns <= 0 --R0-R3 INACTIVE
;
//16007377



select ACTIVITY_STATUS,count(distinct rcvcustomer_key) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_1 group by all;//16425389
select ACTIVITY_STATUS,sum(CUSTOMERS) from PR12_RECEIVER_DB_CUSTOMERS_BASE_TABLE_AGGREGATED group by all;//16007377
