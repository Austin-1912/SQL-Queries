--SP 1 
--call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_01();
call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_01();

CREATE or replace PROCEDURE SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_01()
RETURNS varchar
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS

$$



var SP_STMNT_1 = snowflake.createStatement( {sqlText: `create or replace table TXN_MASTER_SUPPLEMENT as 
select     txn.*, 
           cn3.country_name, 
	       case 
		   when cn3.region='Africa' then 'AFRICA'
		   --when cn3.region='MIDDLE EAST' then 'MEPA'
		   else cn3.super_region end as super_region,
		   
	       cn1.country_name as sndcountry_name, 
	       cn2.country_name as rcvcountry_name,
	       case 
		   when cn1.region='Africa' then 'AFRICA'
		   --when cn1.region='MIDDLE EAST' then 'MEPA'
		   else cn1.super_region end as sndsuper_region,
		   case 
		   when cn2.region='Africa' then 'AFRICA'
		   --when cn2.region='MIDDLE EAST' then 'MEPA'
		   else cn2.super_region end as rcvsuper_region,
	       date_trunc('Week',(txn.RCVPAYING_DATETIME + interval '1 day'))- interval '1 day' wk_yr,	
           --date_trunc('Month',txn.RCVPAYING_DATETIME) mth_yr,	
           date_trunc('Year',txn.RCVPAYING_DATETIME) yr,		  
           case
		   when payout_type='CASH' then 'Cash'
		   when payout_type='ACCOUNT' then 'Account' 
		   else payout_type end as Payout,
		   case 
		   when primary_channel in ('WU.COM','WUPLUS') then 'Web'
		   when (primary_channel='RETAIL' or sub_channel='DIGITAL PARTNERS DOP') then 'Retail'
		   else null end as Channel_V,
		   case
		   when primary_channel = 'WUPLUS' then 1 else 0 end as Is_WUPLUS,
		   case
		  /* 
		   when sub_channel='DIGITAL PARTNERS DWL HANPASS' then 'DWL:HANPASS'
		   when sub_channel='DIGITAL PARTNERS DWL SAFARI' then 'DWL:SAFARI'
		   when sub_channel='DIGITAL PARTNERS DWL SBERBANK' then 'DWL:SBERBANK'
		   when sub_channel='DIGITAL PARTNERS DWL STC' then 'DWL:STC'
		           when sub_channel='DIGITAL PARTNERS ODP CENTRAL 1 CU' then 'WU:RETAIL ODP' 
           when sub_channel='DIGITAL PARTNERS ODP TD BANK' then 'WU:RETAIL ODP' 
           when sub_channel='DIGITAL PARTNERS ODP BANK DHOFAR' then 'WU:RETAIL ODP' 
		      when sub_channel='DIGITAL PARTNERS ODP BANK OF MONTREAL' then 'WU:RETAIL ODP' 
			*/
           when sub_channel='DIGITAL PARTNERS DOP' then 'WU:RETAIL ODP'
           when sub_channel='RETAIL OV NON AIR' then 'OV:RETAIL'
           when sub_channel='RETAIL VI NON AIR' then 'VI:RETAIL'
           when sub_channel='RETAIL VI AIR' then 'VI:RETAIL'
           when sub_channel='RETAIL WU NON AIR/TMT' then 'WU:RETAIL NON AIR/TMT/ODP'
           when sub_channel='RETAIL WU AIR' then 'WU:RETAIL AIR'
           when sub_channel='RETAIL WU TMT' then 'WU:RETAIL TMT'
           when sub_channel='WU.COM WU APP' then 'WU:APP'
           when sub_channel='WU.COM WU WEB' then 'WU:WEB'
           when sub_channel='WU.COM VI WEB' then 'VI:WEB'
		   else sub_channel end as SubChannel,
		   case when Direction='CROSS BORDER' then 'Cross Border'
		   when Direction='DOMESTIC' then 'Domestic'
		   else null end as Direction_v,
 
total_charges_usd as fee,
NET_FOREIGN_EXCHANGE as net_fx
-- nvl(fee,0)+nvl(net_fx,0) as revenue
	from SUMMARY_GEN.WUDNA_TXN_MASTER_ANALYTICS_VW txn
	left join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" cn1 on txn.sndcountry_code=cn1.country_code --added country view from summary gen table
	left join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" cn2 on txn.rcvcountry_code=cn2.country_code
	left join WUDNA.SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW cm on txn.SNDCUSTOMER_KEY=cm.CUSTOMER_KEY  	
    left join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" cn3 on cm.country_code=cn3.country_code 
	--left outer join WUDNA.SUMMARY_GEN.agent_summary_VW ag on txn.SNDAGENT_NUMBER = ag.AGENT_NUMBER
	/* where sub_channel not in ('DIGITAL PARTNERS DWL')
	and txn.valid_txn_type_code='Y'  and txn.REFUND_TRXN='N'
		--AND NVL(CM.CONSOLIDATION_FLAG, 'nll')='N'        //CAR-830 remove consolidation flag Saif @
	and sndcountry_code not in ('RU', 'BY') 
	and rcvcountry_code not in ('RU', 'BY')
	and NVL(txn.SNDPRINCIPAL_USD,0) > 0					
	and NVL(txn.PRODUCT_GROUP, 'nll') NOT IN ('QCOL', 'QCSH')*/ ;`}).execute();
	
	
//select pricing_channel,sub_channel,count(1) from SUMMARY_GEN.WUDNA_TXN_MASTER_ANALYTICS_VW group by 1,2;


SP_STMNT_2 = snowflake.createStatement( { sqlText: `create or replace table cust_Membership_date as 
select customer_key, MEMBERSHIP_DATE from "WUDNA"."SUMMARY_GEN"."WUDNA_CUSTOMER_MASTER_VW" ;`}).execute();


SP_STMNT_2_5 = snowflake.createStatement( { sqlText:
`create or replace table CEM_SCORECARD_SOLICITATION_BRAZE_AK as 
select
    customer_key,
    CAMPAIGN_DESC,
    RELEASE_2_VENDOR_DATE,
    ACTIVITY_CODE,
    PIR_NBR
    
from 
    WUDNA.SUMMARY_GEN.SOLICITATION_HISTORY_VW

union 

select 
    CUSTOMER_KEY,
    concat(NVL(UPPER(campaign_canvas_name),'NA'),'_',NVL(UPPER(CANVAS_STEP_NAME),'NA'),'_',nvl(UPPER(APP_TYPE_NAME),'NA')) CAMPAIGN_DESC,
    case when substr(ACTIVITY_CODE_NEW,3,1)='P' AND push_sent_date IS NOT NULL then push_sent_date 
        when substr(ACTIVITY_CODE_NEW,3,1)='I' AND inappmsg_viewed_date IS NOT NULL then inappmsg_viewed_date
        when substr(ACTIVITY_CODE_NEW,3,1)='C' AND cc_sent_date IS NOT NULL then cc_sent_date
        else TO_DATE('9999-01-01')
        END AS RELEASE_2_VENDOR_DATE,
    ACTIVITY_CODE_NEW as ACTIVITY_CODE,
    ' ' PIR_NBR
from
    WUDNA.SUMMARY_GEN.BRAZE_SUMMARY_VW
     WHERE  substr(activity_code_new,1,1) in ('S') and RELEASE_2_VENDOR_DATE is not null 
		 and RELEASE_2_VENDOR_DATE <> '9999-01-01'
    
    ;`}).execute();



//select count(1) from due_to_dco_txn;--124,023,702


SP_STMNT_3 = snowflake.createStatement( { sqlText: `create or replace table due_to_dco_txn as 
select 
distinct a.txn_id
from
( select * from TXN_MASTER_SUPPLEMENT where RCVPAYING_DATETIME >= '2019-01-01') a inner join  
(
select 

CASE WHEN GID.customer_key IS NULL OR GID.customer_key ='' then a.customer_key  ----AK--------
        ELSE GID.customer_key END AS  customer_key,

--case when g.cdb_customer_id is not null then h.customer_key else a.customer_key end as customer_key, -----AK-------

release_2_vendor_date
from 
CEM_SCORECARD_SOLICITATION_BRAZE_AK a

left join "WUDNA"."SUMMARY_GEN"."WUDNA_ACCOUNT_MASTER_VW" GID on a.CUSTOMER_KEY = GID.CUSTOMER_UMN ------AK----------

--left outer join "WUDNA"."SUMMARY_GEN"."CDB_ID_GALACTIC_ID_MAPPING_VW" G on a.customer_key=to_char(g.cdb_customer_id)   ------AK--------

--left outer join "WUDNA"."SUMMARY_GEN"."WUDNA_CUSTOMER_MASTER_VW" H on h.customer_key=g.rtra_galactic_id
--left join "WUDNA"."SUMMARY_GEN"."CAMPAIGN_LKUP_VW" b on a.pir_nbr=b.campaign_id 
where 
--campaign_type='MARKETING' and ---AK--------

substr(activity_code,1,1)='S' and substr(activity_code,3,1) in ('E','S','P','I','C') 

group by 1,2
 ) b on  
a.SNDCUSTOMER_KEY=b.customer_key 
where  RCVPAYING_DATETIME >= release_2_vendor_date and datediff('DAY',release_2_vendor_date,RCVPAYING_DATETIME) < 32
and length(customer_key) in (9,19) and customer_key IS NOT NULL 

;`}).execute();


// modified to add First_txn_month to have 60 months tenure - Pavan

SP_STMNT_4 = snowflake.createStatement( { sqlText:`create or replace table TXN_MASTER_SUPPLEMENT_1 as 
select 
a.*,First_Txn_Mth, FIRST_TXN_DATE,	LAST_TXN_DATE, 										// CAR  718 added FIRST_TXN_DATE -Saif
case when f.txn_id is not null then 'Y' else 'N' end as dco_txn 
from TXN_MASTER_SUPPLEMENT a 
INNER JOIN (SELECT sndcustomer_key,MIN(date_trunc('MONTH',RCVPAYING_DATETIME)) As First_Txn_Mth, MIN(RCVPAYING_DATETIME) as FIRST_TXN_DATE,
				Max(RCVPAYING_DATETIME) as LAST_TXN_DATE						//CAR 785 added last txn date - Saif &&
FROM TXN_MASTER_SUPPLEMENT where date_trunc('MONTH',RCVPAYING_DATETIME)< date_trunc('MONTH',sysdate())
group by 1) B
ON A.sndcustomer_key=B.sndcustomer_key
left outer join DUE_TO_DCO_TXN f 
on a.txn_id=f.txn_id ;`}).execute();


/* ==================================
Retail to digital 
 ================================= */

SP_STMNT_5 = snowflake.createStatement( { sqlText:`create or replace table R2D_monthly as 
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(txns) r12_txns,
sum(digi_txns) r12_digi_txns,
sum(ret_txns) r12_ret_txns
from 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01' and Channel_v='Web' group by 1,2) a 							
inner join 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns ,count(case when channel_v = 'Web' then 1 end) as digi_txns,
    count(case when channel_v = 'Retail' then 1 end) as ret_txns
 from txn_master_supplement group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 
 and b.Mth_yr<a.Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12)
group by 1,2,3,4 having r12_ret_txns > 0 and r12_digi_txns=0;`}).execute();

/*
select Month_of_Digitization,count(1) from r2d_monthly group by 1 order by 1 desc ;

select 
sndcustomer_key ,
count(case when txn_month='2021-01-01' and pricing_channel in ('WEB','APP') then 1 end) R1_digi_txns,
count(case when yr='2020-01-01' and pricing_channel in ('WEB','APP') then 1 end) r2_to_r13_digi_txns,
count(case when yr='2020-01-01' and pricing_channel in ('POS','AIR','TMT') then 1 end) r2_to_r13_ret_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2020-01-01' group by 1 having  r1_digi_txns > 0 and r2_to_r13_digi_txns=0 and r2_to_r13_ret_txns > 0 ;

--=====================================
--POS to AIR 
--================================================
*/

SP_STMNT_6 = snowflake.createStatement( { sqlText: `create or replace table air_monthly as 
select * from (
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(b.txns) r12_txns,
sum(b.r12_pos_txns) r12_pos_txns,
sum(b.r12_non_pos_txns) r12_non_pos_txns
from 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01' and pricing_channel='AIR' group by 1,2) a 							
inner join 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns ,count(case when pricing_channel='POS' then 1 end) as r12_pos_txns,
    count(case when pricing_channel not in ('POS') then 1 end) as r12_non_pos_txns
 from txn_master_supplement_1 group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 
 and b.Mth_yr<a.Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12)
 group by 1,2,3,4 ) where r12_pos_txns > 0 and r12_non_pos_txns=0;`}).execute();
 
//--select Month_of_Digitization,count(1) from air_monthly group by 1;

/* select 
sndcustomer_key ,
count(case when txn_month='2021-01-01' and pricing_channel in ('AIR') then 1 end) R1_air_txns,
count(case when yr='2020-01-01' and pricing_channel in ('POS') then 1 end) r2_to_r13_pos_txns,
count(case when yr='2020-01-01' and pricing_channel not in ('POS') then 1 end) r2_to_r13_non_pos_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2020-01-01' group by 1 having  r1_air_txns > 0 and r2_to_r13_non_pos_txns=0 and r2_to_r13_pos_txns > 0 ;  */
/* ======================================
--Win backs
--=========================================   */

SP_STMNT_7 = snowflake.createStatement( { sqlText:`create or replace table winbacks_monthly as 
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(case when b.Mth_yr<a.Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12) then b.txns end ) r12_txns,
sum(case when b.Mth_yr<add_months(a.Month_of_Digitization,-12) and b.Mth_yr>=add_months(a.Month_of_Digitization,-48) then b.txns end ) pr12_pppr12_txns   // CAR-877 36->48 Saif @
from 
-- =============================
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco
 ,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01' group by 1,2) a 												

inner join 

(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns 
 from txn_master_supplement group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 

 and b.Mth_yr<a.Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-48)			// CAR-877 36->48 Saif @
 
 group by 1,2,3,4 having r12_txns is null  and pr12_pppr12_txns > 0  ;`}).execute();					// CAR-877 36->48 Saif @
 
//--select Month_of_Digitization,count(1) from winbacks_monthly group by 1;
/*
select 
sndcustomer_key ,
count(case when txn_month='2021-01-01' then 1 end) R1_txns,
count(case when yr='2020-01-01' then 1 end ) r2_to_r13_txns,
count(case when yr < '2020-01-01' then 1 end) r14_to_r37_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2018-01-01' group by 1 having  R1_txns > 0 and r2_to_r13_txns=0 and r14_to_r37_txns > 0 ;
*/

/* =======================================
1X_to_2X
======================================= */

SP_STMNT_8 = snowflake.createStatement( { sqlText: `create or replace table one_x_to_2X_and_plus_monthly as 
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(case when b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr>add_months(a.Month_of_Digitization,-12) then b.txns end ) r12_txns,
sum(case when b.Mth_yr<Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12) then b.txns end ) r2_r13_txns
from 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01'  group by 1,2) a 			
inner join 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns 
 from txn_master_supplement group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 
 and b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr > add_months(a.Month_of_Digitization,-13)
 group by 1,2,3,4 having r2_r13_txns=1 and r12_txns > 1  ;`}).execute();

//--select Month_of_Digitization,count(1) from one_x_to_2X_and_plus_monthly group by 1;
/*
select 
sndcustomer_key ,
count(case when txn_month >= '2020-02-01' and txn_month < '2021-02-01' then 1 end) R12_txns,
count(case when txn_month >= '2020-01-01' and txn_month < '2021-01-01' then 1 end) pR12_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2020-01-01' group by 1 having  pR12_txns=1 and R12_txns > 1  ;

*/

SP_STMNT_9 = snowflake.createStatement( { sqlText:`create or replace table one_x_to_2X_monthly as 
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(case when b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr>add_months(a.Month_of_Digitization,-12) then b.txns end ) r12_txns,
sum(case when b.Mth_yr<Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12) then b.txns end ) r2_r13_txns
from 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01'  group by 1,2) a 							
inner join 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns 
 from txn_master_supplement group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 
 and b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr > add_months(a.Month_of_Digitization,-13)
 group by 1,2,3,4 having r2_r13_txns=1 and r12_txns = 2  ;`}).execute();
 
/*
select Month_of_Digitization,count(1) from one_x_to_2X_monthly group by 1;

select 
sndcustomer_key ,
count(case when txn_month >= '2020-02-01' and txn_month < '2021-02-01' then 1 end) R12_txns,
count(case when txn_month >= '2020-01-01' and txn_month < '2021-01-01' then 1 end) pR12_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2020-01-01' group by 1 having  pR12_txns=1 and R12_txns = 2  ;
*/

SP_STMNT_10 = snowflake.createStatement( { sqlText: `create or replace table two_x_to_3X_monthly as 
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(case when b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr>add_months(a.Month_of_Digitization,-12) then b.txns end ) r12_txns,
sum(case when b.Mth_yr<Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12) then b.txns end ) r2_r13_txns
from 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01'  group by 1,2) a 					
inner join 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns 
 from txn_master_supplement group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 
 and b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr > add_months(a.Month_of_Digitization,-13)
 group by 1,2,3,4 having r2_r13_txns=2 and r12_txns = 3  ;`}).execute();
/*
select Month_of_Digitization,count(1) from two_x_to_3X_monthly group by 1;

select 
sndcustomer_key ,
count(case when txn_month >= '2020-02-01' and txn_month < '2021-02-01' then 1 end) R12_txns,
count(case when txn_month >= '2020-01-01' and txn_month < '2021-01-01' then 1 end) pR12_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2020-01-01' group by 1 having  pR12_txns=2 and R12_txns = 3  ;
*/

SP_STMNT_11 = snowflake.createStatement( { sqlText:`create or replace table three_x_to_4X_and_plus_monthly as 
select 
a.sndcustomer_key,
a.Month_of_Digitization,
a.RCVPAYING_DATETIME,
due_to_dco,
sum(case when b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr>add_months(a.Month_of_Digitization,-12) then b.txns end ) r12_txns,
sum(case when b.Mth_yr<Month_of_Digitization and b.Mth_yr>=add_months(a.Month_of_Digitization,-12) then b.txns end ) r2_r13_txns
from 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as Month_of_Digitization,max(dco_txn) as due_to_dco,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME
 from txn_master_supplement_1
where date_trunc(year,RCVPAYING_DATETIME)>='2020-01-01'  group by 1,2) a 				
inner join 
(select sndcustomer_key,date_trunc(month,RCVPAYING_DATETIME) as mth_yr,
    count(1) as txns 
 from txn_master_supplement group by 1,2 ) b 
 on a.sndcustomer_key=b.sndcustomer_key 
 and b.Mth_yr<=a.Month_of_Digitization and b.Mth_yr > add_months(a.Month_of_Digitization,-13)
 group by 1,2,3,4 having r2_r13_txns=3 and r12_txns > 3  ;`}).execute();
 
/*
select Month_of_Digitization,count(1) from three_x_to_4X_and_plus_monthly group by 1;

select 
sndcustomer_key ,
count(case when txn_month >= '2020-02-01' and txn_month < '2021-02-01' then 1 end) R12_txns,
count(case when txn_month >= '2020-01-01' and txn_month < '2021-01-01' then 1 end) pR12_txns
from txn_master_supplement_1 
where RCVPAYING_DATETIME >= '2020-01-01' group by 1 having  pR12_txns=3 and R12_txns > 3  ;
*/

SP_STMNT_12 = snowflake.createStatement( { sqlText:`create or replace table va_kpi_2020_2  as 
select 
date_trunc('MONTH',RCVPAYING_DATETIME) as mth_yr 
from 
TXN_MASTER_SUPPLEMENT_1
where RCVPAYING_DATETIME >= '2021-01-01'
and RCVPAYING_DATETIME < date_trunc('MONTH',sysdate())				
--and RCVPAYING_DATETIME < '2021-02-01'
group by date_trunc('MONTH',RCVPAYING_DATETIME);`}).execute();

	
$$
    
    
    --SP -2
    
; call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_02();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_02()
returns VARCHAR
language javascript
execute as owner
AS

$$


SP_STMNT_13 = snowflake.createStatement( { sqlText:`create or replace table YN_va_kpi_2020_3  as 
select c.*,a.*,
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-12)
    then 'Y' else 'N' end R12_flag,
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-24)
    then 'Y' else 'N' end R24_flag,
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-36)
    then 'Y' else 'N' end as R36_flag,
//CAR  718 adding R48 flag below - Saif
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-48)
    then 'Y' else 'N' end as R48_flag,
	
	//CAR  749 adding R2, R3, R6 flag below - Saif			&&
	case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-2)
    then 'Y' else 'N' end as R2_flag,
	case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-3)
    then 'Y' else 'N' end as R3_flag,
	case when date_trunc('MONTH',RCVPAYING_DATETIME) <= mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-6)
    then 'Y' else 'N' end as R6_flag,
	
case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr then 'Y' else 'N' end as R1_flag,
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13)  then 'Y' else 'N' end R2_to_R13_flag,		
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-37) then 'Y' else 'N' end R2_to_R37_flag,
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-13) 
        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-25) then 'Y' else 'N' end R14_to_R25_flag,
case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-25) 
        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-37) then 'Y' else 'N' end R26_to_R37_flag,			

case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-37) 
        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-49) then 'Y' else 'N' end R38_to_R49_flag		//CAR-877 R36->48 Saif @
		  	from
"WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" c 
,  "WUDNA"."CEX_SANDBOX"."VA_KPI_2020_2" a 								//below - CAR  718 - increased limit from 37 to 49 for r48flags - Saif  &&
where   date_trunc('MONTH',RCVPAYING_DATETIME) <= a.mth_yr and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(a.mth_yr,-49) ;`}).execute();



$$

    
--SP-3

; call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_03();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_03()
returns VARCHAR
language javascript
execute as owner
AS

$$


SP_STMNT_14 = snowflake.createStatement( { sqlText:`create or replace table YN_AIR_dominant_channel as 
SELECT
  A.*
FROM
  (
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
      A.pricing_channel,
      ROW_NUMBER() OVER (PARTITION BY A.sndcustomer_key,a.mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP
    FROM     YN_va_kpi_2020_3 A 	where R12_flag = 'Y' 
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr,
      A.pricing_channel
    ) A
WHERE A.TOP=1 and pricing_channel='AIR'
;`}).execute();

SP_STMNT_15 = snowflake.createStatement( { sqlText:`create or replace table YN_dominant_channel as 
SELECT
  A.*
FROM
  (
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
      A.channel_v1,
      ROW_NUMBER() OVER (PARTITION BY A.sndcustomer_key,a.mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP
    FROM
      
  (
        select a.*,
  case
  when pricing_channel='APP' then 'APP'
  when pricing_channel='WEB'  then 'WEBSITE'
  else 'RETAIL' end channel_v1
  from YN_va_kpi_2020_3 A
	where R12_flag = 'Y' )  A
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr,
      A.channel_v1
    ) A
WHERE A.TOP=1
;`}).execute();

/*
drop table YN_dominant_channel_PR12;
create table YN_dominant_channel_PR12 as 
SELECT
  A.*
FROM
  (
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
      A.channel_v1,
      ROW_NUMBER() OVER (PARTITION BY A.sndcustomer_key,a.mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP
    FROM
      
  (
        select a.*,
  case
  when pricing_channel='APP' then 'APP'
  when pricing_channel='WEB'  then 'WEBSITE'
  else 'RETAIL' end channel_v1
  from YN_va_kpi_2020_3 A
	where R24_flag='Y' and R12_flag = 'N' )  A
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr,
      A.channel_v1
    ) A
WHERE A.TOP=1
;

//-- grant  select on dominant_channel_PR12 to public;
*/ 

SP_STMNT_16 = snowflake.createStatement( { sqlText:`create or replace table YN_txn_freq_bucket as 
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
    case 
    when count(1)=1 then 'a) 1X'
    when count(1)=2 then 'b) 2X'
    when count(1)=3 then 'c) 3X'
    when count(1)>3 then 'd) 4X and plus'
    end txn_freq_bucket
  from YN_va_kpi_2020_3 A
	where R12_flag = 'Y'
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr
;`}).execute();

/* 
drop table YN_txn_freq_bucket_PR12;
create table YN_txn_freq_bucket_PR12 as 
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
    case 
    when count(1)=1 then 'a) 1X'
    when count(1)=2 then 'b) 2X'
    when count(1)=3 then 'c) 3X'
    when count(1)>3 then 'd) 4X and plus'
    end txn_freq_bucket
  from YN_va_kpi_2020_3 A
	where R24_flag='Y' and R12_flag = 'N'
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr
;
*/ 
//-- grant  select on "WUDNA"."CEX_SANDBOX"."TXN_FREQ_BUCKET" to public; 

/*
select count(1) from "WUDNA"."SUMMARY_GEN"."CUSTOMER_PREF_EVENT_HISTORY_VW";
select count(1),count(distinct cdb_customer_id) from "WUDNA"."SUMMARY_GEN"."CPM_PREF_RESULT_VW";
select count(1),count(distinct cdb_customer_id) from "WUDNA"."SUMMARY_GEN"."CPM_PREF_RESULT_VW";

select max(optin_month) from cpm_pref_email_sms_optin;
select max(EVENT_CREATED_DATE) from CUSTOMER_PREF_EVENT_HISTORY_VW;
select max(EVENT_CREATED_DATE) from cpm_pref_email_sms_optin;
*/

// ----------------------------OPTINS CODE INSERTED--------------------------------

SP_STMNT_17 = snowflake.createStatement( { sqlText:`create or replace table AJ_cpm_pref_email_sms_optin as
select A.* from (
select distinct customer_key ,country_code,event_created_date,date_trunc(month,event_created_date) as optin_month,OPT_EMAIL,OPT_SMS
from
((SELECT A.* 
  FROM (select customer_key ,b.COUNTRY_CODE,EVENT_CREATED_DATE,date_trunc(month,EVENT_CREATED_DATE) as optin_month,a.OPT_EMAIL,a.OPT_SMS
        from "WUDNA"."SUMMARY_GEN"."CPM_PREF_EVENT_HIST_VW" a
        --left join summary_gen.CDB_ID_GALACTIC_ID_MAPPING_VW c on a.CDB_CUSTOMER_ID = c.cdb_customer_id
        inner join WUDNA.SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW b on a.CDB_CUSTOMER_ID = b.customer_key
        ) a where event_created_date >= '2020-01-01' and event_created_date < '2021-02-01' AND  (a.OPT_EMAIL is not null OR a.OPT_SMS is not null))			

UNION               
(select customer_key ,b.COUNTRY_CODE,RESULT_CREATED_DATE AS EVENT_CREATED_DATE,date_trunc(month,RESULT_CREATED_DATE) as optin_month,a.OPT_EMAIL,a.OPT_SMS
  from "WUDNA"."SUMMARY_GEN"."CUSTOMER_PREF_RESULT_VW" a
  inner join WUDNA.SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW b on a.rtra_galactic_id = b.customer_key 
  where event_created_date >= '2021-02-01' and event_created_date <= '2050-01-01' and (a.OPT_EMAIL is not null OR a.OPT_SMS is not null)))
  ) A INNER JOIN (select distinct sndcustomer_key from TXN_MASTER_SUPPLEMENT_1) B
  ON A.customer_key=B.sndcustomer_key`}).execute();
  
SP_STMNT_18 = snowflake.createStatement( { sqlText:`create or replace table cpm_pref_email_optin_monthly as 
select distinct customer_key,optin_month from AJ_cpm_pref_email_sms_optin where OPT_EMAIL='I'`}).execute();

//select * from  cpm_pref_email_optin_monthly where optin_month >= '2021-09-01' order by optin_month desc;
//select distinct optin_month ,count(distinct customer_key) from cpm_pref_email_optin_monthly  group by 1 order by 1 desc;

SP_STMNT_19 = snowflake.createStatement( { sqlText:`create or replace table cpm_pref_email_optin_R12  as 
select distinct a.rolling_month,b.customer_key  
		  	from 
cpm_pref_email_optin_monthly b 
, (select 
optin_month as rolling_month 
from 
cpm_pref_email_optin_monthly  group by 1) a 
where  optin_month <= a.rolling_month and optin_month > add_months(a.rolling_month,-12);`}).execute();


SP_STMNT_20 = snowflake.createStatement( { sqlText:`create or replace table cpm_pref_sms_optin_monthly as 
select distinct customer_key,optin_month from AJ_cpm_pref_email_sms_optin where OPT_SMS='I';`}).execute();

//select * from  cpm_pref_sms_optin_monthly where optin_month >= '2021-09-01' order by optin_month desc;
//select distinct optin_month ,count(distinct customer_key) from cpm_pref_sms_optin_monthly  group by 1 order by 1 desc;

SP_STMNT_21 = snowflake.createStatement ({sqlText: `create or replace table cpm_pref_sms_optin_R12  as 
select distinct a.rolling_month,b.customer_key  
		  	from 
cpm_pref_sms_optin_monthly b 
, (select 
optin_month as rolling_month 
from 
cpm_pref_sms_optin_monthly  group by 1) a 
where  optin_month <= a.rolling_month and optin_month > add_months(a.rolling_month,-12);`}).execute();

// -------------------------------------OPT-INS CODE INSERTION DONE -----------------------

//--------------------------------------OPT-OUT CODE INSERTED -----------------------------

SP_STMNT_22 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  AJ_cpm_pref_email_sms_optout as
select A.* from (
select distinct customer_key ,country_code,event_created_date,date_trunc(month,event_created_date) as optout_month,OPT_EMAIL,OPT_SMS
from
((SELECT A.* 
  FROM (select customer_key ,b.COUNTRY_CODE,EVENT_CREATED_DATE,date_trunc(month,EVENT_CREATED_DATE) as optout_month,a.OPT_EMAIL,a.OPT_SMS
        from "WUDNA"."SUMMARY_GEN"."CPM_PREF_EVENT_HIST_VW" a
        --left join summary_gen.CDB_ID_GALACTIC_ID_MAPPING_VW c on a.CDB_CUSTOMER_ID = c.cdb_customer_id
        inner join "WUDNA"."SUMMARY_GEN"."WUDNA_CUSTOMER_MASTER_VW" b on a.CDB_CUSTOMER_ID = b.customer_key
        ) a where event_created_date >= '2020-01-01' and event_created_date < '2021-02-01' AND  (a.OPT_EMAIL is not null OR a.OPT_SMS is not null))			

UNION               
(select customer_key ,b.COUNTRY_CODE,RESULT_CREATED_DATE AS EVENT_CREATED_DATE,date_trunc(month,RESULT_CREATED_DATE) as optout_month,a.OPT_EMAIL,a.OPT_SMS
  from "WUDNA"."SUMMARY_GEN"."CUSTOMER_PREF_RESULT_VW" a
  inner join "WUDNA"."SUMMARY_GEN"."WUDNA_CUSTOMER_MASTER_VW" b on a.rtra_galactic_id = b.customer_key 
  where event_created_date >= '2021-02-01' and event_created_date <= '2050-01-01' and (a.OPT_EMAIL is not null OR a.OPT_SMS is not null)))
  ) A INNER JOIN (select distinct sndcustomer_key from WUDNA.CEX_SANDBOX.TXN_MASTER_SUPPLEMENT_1) B
  ON A.customer_key=B.sndcustomer_key;`}).execute();
  
SP_STMNT_23 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table cpm_pref_email_optout_monthly as 
select distinct customer_key,optout_month from AJ_cpm_pref_email_sms_optout where OPT_EMAIL='O';
`}).execute();

SP_STMNT_24 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table cpm_pref_email_optout_R12  as 
select distinct a.rolling_month,b.customer_key  
		  	from 
cpm_pref_email_optout_monthly b 
, (select 
optout_month as rolling_month 
from 
cpm_pref_email_optout_monthly  group by 1) a 
where  optout_month <= a.rolling_month and optout_month > add_months(a.rolling_month,-12);
`}).execute();

SP_STMNT_25 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table cpm_pref_sms_optout_monthly as 
select distinct customer_key,optout_month from AJ_cpm_pref_email_sms_optout where OPT_sms='O';
`}).execute();

SP_STMNT_26 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table cpm_pref_sms_optout_R12  as 
select distinct a.rolling_month,b.customer_key  
		  	from 
cpm_pref_sms_optout_monthly b 
, (select 
optout_month as rolling_month 
from 
cpm_pref_sms_optout_monthly  group by 1) a 
where  optout_month <= a.rolling_month and optout_month > add_months(a.rolling_month,-12); 
`}).execute();  

// -------------------------------------OPT-OUT CODE INSERTION DONE -----------------------


SP_STMNT_26_1 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T1 as
SELECT A.sndcustomer_key CUSTOMER_key,mth_yr, A.RCVPAYING_DATETIME,
       ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY RCVPAYING_DATETIME DESC) AS RANK_DATE       
FROM  YN_va_kpi_2020_3 a where date_trunc('MONTH',RCVPAYING_DATETIME)< date_trunc('MONTH',sysdate())  // CAM 704 to add IPF field for latest 13 months -Pandit
		and mth_yr > DATEADD(month, -14, date_trunc('MONTH',sysdate()));`}).execute();		// CAR 750 limit the data to end of reporting month for IPF &&
// Pick top 6 transactions

SP_STMNT_26_2 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T2 as
Select
  A.*
From
RESP_IPF_CALC_T1 a
Where  RANK_DATE <= 6 ;`}).execute();

//Count of transactions should be more than 3 to calculate IPF

SP_STMNT_26_3 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T3 as
Select
  Customer_Key,mth_yr,count(1) Txn_Cnt  // CAM 704 Added monthly IPF logic - Pandit
From
  //RESP_IPF_CALC_T1
  RESP_IPF_CALC_T2                              // CAR 796 IPF table changed from T1 to T2 - txn_cnt to be calculated capped at 6 txns
where customer_key is not null
GROUP BY Customer_key,mth_yr
Having
  count(1) >= 3 ;`}).execute();

//Join to get txn count

SP_STMNT_26_4 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T4 as 
Select
  A.*, b.TXN_CNT
From
  RESP_IPF_CALC_T2 a,
  RESP_IPF_CALC_T3 b
Where
  a.Customer_key = b.Customer_key and a.mth_yr = b.mth_yr;`}).execute();

//Get first and last snd txn dates

SP_STMNT_26_5 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T5 as
  select
  customer_key,
  mth_yr,
  TXN_CNT,
  min( RCVPAYING_DATETIME ) first_SndTxn_Dt,
  max( RCVPAYING_DATETIME ) Last_SndTxn_Dt
From
  RESP_IPF_CALC_T4 GROUP BY customer_key,mth_yr, Txn_Cnt;`}).execute();

//CAM 704 Created new date table for monthly IPF calculation
SP_STMNT_26_6 = snowflake.createStatement( { sqlText:`create or replace table date_table_w as 
select mth_yr,last_day(mth_yr) as eo_mth_yr from va_kpi_2020_2;`}).execute();


//select * from date_table_w;

//create table date_table_w (r12_end  date );
//insert into date_table_w values ('2019-08-01');

//Calculate tenure and days since last txn

SP_STMNT_26_7 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T6 as
Select
  customer_key,
  a.mth_yr,
  Txn_Cnt,
  datediff(day,first_SndTxn_Dt,Last_SndTxn_Dt) tenure,
  datediff(day,Last_SndTxn_Dt,eo_mth_yr) days_since_last_txn,
  Last_SndTxn_Dt
From
  RESP_IPF_CALC_T5 a
  left join date_table_w b
  on a.mth_yr = b.mth_yr;`}).execute();

//Calculate IPF

SP_STMNT_26_8 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T7 AS
Select
  customer_key,
  Txn_Cnt,
  a.mth_yr,             // CAM 704 Added monthly IPF logic Pandit
  tenure/(Txn_Cnt-1) as IPF,					// CAR 750 IPF correction - Saif &&
  days_since_last_txn - IPF as IPF_overdue,
  datediff(day,Last_SndTxn_Dt,eo_mth_yr) as latest_Ipf,
  days_since_last_txn
From
  RESP_IPF_CALC_T6 a
  left join date_table_w b
  on a.mth_yr = b.mth_yr;`}).execute();

//Calculate IPF beats

SP_STMNT_26_9 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T8 as
Select
  A.*,
  case when latest_Ipf > (1.2*Ipf) then 'Decelerating'
  when latest_Ipf < (0.8*Ipf) then 'Accelerating'
  else 'Stable' end Ipf_Change,
  Case 
	when txn_cnt = 0 then '0 lost'
	when txn_cnt = 1 then '1 timer'
	when latest_Ipf <= 0.5*IPF then 'Ahead Schedule'			// CAR 796 IPF_overdue replaced with latest_Ipf
	when latest_Ipf <= 1*IPF   then 'On Schedule'
	when latest_Ipf <= 2*IPF   then '1 beat late'
	when latest_Ipf <= 3*IPF   then '2 beats late'
	when latest_Ipf <= 4*IPF   then '3 beats late'
	when latest_Ipf <= 5*IPF   then '4 beats late'
	when latest_Ipf >  5*IPF   then '5 beats plus late'
else null end as beats
From
  RESP_IPF_CALC_T7 a ;`}).execute();
  
SP_STMNT_26_10 = snowflake.createStatement( { sqlText:`create or replace table RESP_IPF_CALC_T8_IPF_13_Months as
Select * from RESP_IPF_CALC_T8;`}).execute();

//create table YN_cust_level_flags_counts_backup_13_apr as 
//select * from YN_cust_level_flags_counts;

/*
//R1 new 
select * from wudna.cex_sandbox.YN_cust_level_flags_counts 
where r1_txns > 0 and R2_TO_R13_TXNS=0 and R14_TO_R25_TXNS=0 and R26_TO_R37_TXNS=0;

//R12 new 
select * from wudna.cex_sandbox.YN_cust_level_flags_counts 
where r12_txns > 0 and pr12_txns=0 and ppr12_txns=0 ;
grant select on YN_cust_level_flags_counts to public;
*/


$$
    
    
   --SP-4

;call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_04();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_04()
returns VARCHAR
language javascript
execute as owner
AS

$$



SP_STMNT_27= snowflake.createStatement( { sqlText:`create or replace table YN_cust_level_flags_counts as 
select 
      A.sndcustomer_key,
      a.mth_yr,
      count(case when R12_flag='Y' then 1 end) as R12_txns,
      count(case when R24_flag='Y' then 1 end) as R24_txns,
      count(case when R36_flag='Y' then 1 end) as R36_txns,
	  count(case when R48_flag='Y' then 1 end) as R48_txns,			//CAR  718 added R48 txn count - Saif
	  
	  count(case when R2_flag='Y' then 1 end) as R2_txns,			//CAR  749 added R2, R3, R6 txn count - Saif    &&	  
	  count(case when R3_flag='Y' then 1 end) as R3_txns,
	  count(case when R6_flag='Y' then 1 end) as R6_txns,
r24_txns-r12_txns as pr12_txns,
r36_txns-r24_txns as ppr12_txns,
r48_txns-r36_txns as pppr12_txns,								// CAR-877 R36->R48 Saif @
count(case when R1_flag='Y' then 1 end ) R1_txns,
count(case when R1_flag='Y' and pricing_channel in ('WEB','APP') then 1 end ) R1_WEB_and_APP_txns,
count(case when R1_flag='Y' and pricing_CHANNEL='APP' then 1 end ) R1_APP_txns,    
count(case when R2_to_R13_flag='Y' then 1 end ) R2_to_R13_txns,
count(case when R14_to_R25_flag='Y' then 1 end ) R14_to_R25_txns,
count(case when R26_to_R37_flag='Y' then 1 end ) R26_to_R37_txns, 					
count(case when R38_to_R49_flag='Y' then 1 end ) R38_to_R49_txns,				// CAR-877 R36->R48 Saif @		
case 
      when r12_txns > 0 and pr12_txns=0 and ppr12_txns=0 and pppr12_txns=0 then 'NEW'				// CAR-877 R36->R48 Saif @
     -- when r12_txns > 0 and pr12_txns>0 and ppr12_txns=0 then 'RETAINED'			// commenting this CAR-877 R36->R48 Saif @ 	check1
	  when r12_txns > 0 and pr12_txns>0 then 'RETAINED'								// CAR-877 R36->R48 Saif @
      when r12_txns > 0 and pr12_txns=0 and (ppr12_txns>0 or pppr12_txns>0) then 'WINBACKS'			// CAR-877 R36->R48 Saif @ 
      end R12_active_breakup,
          
      count(case when pricing_channel in ('POS','AIR','TMT') and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_retail_txns,
      count(case when pricing_channel in ('WEB') and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_website_txns,
      count(case when pricing_channel in ('APP') and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_app_txns,
      count(case when Is_WUPLUS = 1 and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_wuplus_txns,
//  ------------- Code changes start for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
      count(case when direction ='DOMESTIC' and r12_flag='Y' then 1 end) as R12_Domestic_txns,
      count(case when direction ='CROSS BORDER' and r12_flag='Y' then 1 end) as R12_International_txns,	  
 
      count(case when direction ='DOMESTIC' and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_Domestic_txns,
      count(case when direction ='CROSS BORDER' and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_International_txns,
	
      count(case when PAYOUT_TYPE ='CASH' and r12_flag='Y' then 1 end) as R12_Payout_Cash_txns,
      count(case when PAYOUT_TYPE ='ACCOUNT' and r12_flag='Y' then 1 end) as R12_Payout_Account_txns,	  
 
      count(case when PAYOUT_TYPE ='CASH' and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_Payout_Cash_txns,
      count(case when PAYOUT_TYPE ='ACCOUNT' and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_Payout_Account_txns,
	  
      count(case when PAYIN_TYPE ='CASH' and r12_flag='Y' then 1 end) as R12_Payin_Cash_txns,
      count(case when PAYIN_TYPE ='ACCOUNT' and r12_flag='Y' then 1 end) as R12_Payin_Account_txns,	  
 
      count(case when PAYIN_TYPE ='CASH' and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_Payin_Cash_txns,
      count(case when PAYIN_TYPE ='ACCOUNT' and R24_flag='Y' and r12_flag='N' then 1 end) as PR12_Payin_Account_txns,
// ------------- Code changes end for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
      
    //  ---##### adding R1,R12,R24,R36 principal in the dataset at customer level
      sum(case when R1_flag='Y' then  nvl(SNDPRINCIPAL_USD,0) end) as R1_principal,
      sum(case when R12_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end) as R12_principal,
      sum(case when R24_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end) as R24_principal,
      sum(case when R36_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end ) as R36_principal,
	  sum(case when R48_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end ) as R48_principal,		//CAR  718 added r48 principal amount - Saif
	  
	  sum(case when R2_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end ) as R2_principal,		//CAR  749 added R2, R3, R6 principal amount - Saif  &&
	  sum(case when R3_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end ) as R3_principal,		
	  sum(case when R6_flag='Y' then nvl(SNDPRINCIPAL_USD,0) end ) as R6_principal,		
      
    //  ---######## adding PR12 & PPR12 principal in the dataset at customer level
	  (nvl(R24_principal,0) - nvl(R12_principal,0)) as PR12_principal,
      (nvl(R36_principal,0) - nvl(R24_principal,0)) as PPR12_principal,

      
    //  ---######## adding fee for current year & previous year in the dataset at customer level
      sum(case when R1_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R1_fee,
      sum(case when R12_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R12_fee,
      sum(case when R24_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R24_fee,
      sum(case when R36_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R36_fee,
	   sum(case when R48_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R48_fee,		//CAR  718 r48 fee added - Saif
      
	  sum(case when R2_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R2_fee,			//CAR  749 R2, R3, R6 fee added - Saif  &&
	  sum(case when R3_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R3_fee,
	  sum(case when R6_flag='Y' then nvl(TOTAL_CHARGES_USD,0) end) as R6_fee,
	  
	  
	  
      (nvl(R24_fee,0) - nvl(R12_fee,0)) as PR12_fee,
      (nvl(R36_fee,0) - nvl(R24_fee,0)) as PPR12_fee,
      
   //   ---######## adding net_fx for current year & previous year in the dataset at customer level
      sum(case when R1_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R1_net_fx,
      sum(case when R12_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_net_fx,
      sum(case when R24_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R24_net_fx,
      sum(case when R36_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R36_net_fx,
	  sum(case when R48_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R48_net_fx,		//CAR  718 R48 FX added - Saif
	  
	  sum(case when R2_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R2_net_fx,		//CAR  749 R2, R3, R6 FX added - Saif  &&
	  sum(case when R3_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R3_net_fx,
	  sum(case when R6_flag='Y' then nvl(NET_FOREIGN_EXCHANGE,0) end) as R6_net_fx,
      
      (nvl(R24_net_fx,0) - nvl(R12_net_fx,0)) as PR12_net_fx,
      (nvl(R36_net_fx,0) - nvl(R24_net_fx,0)) as PPR12_net_fx,
      
      
     // ---### adding R1,R12,R24,R36 revenue in the dataset at customer level
      sum(case when R1_flag='Y'  then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R1_revenue,
      sum(case when R12_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_revenue,
      sum(case when R24_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R24_revenue,
      sum(case when R36_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R36_revenue,
	  sum(case when R48_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R48_revenue,			//CAR  718 R48 revenue added - Saif
      
	  
	  sum(case when R2_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R2_revenue,			//CAR  749 R2, R3, R6 revenue added - Saif   &&
	  sum(case when R3_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R3_revenue,
	  sum(case when R6_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R6_revenue,
    //  ---### adding PR12 & PPR12 revenue in the dataset at customer level
      (nvl(R24_revenue,0) - nvl(R12_revenue,0)) as PR12_revenue,
      (nvl(R36_revenue,0)- nvl(R24_revenue,0)) as PPR12_revenue,
      
count(case when R12_flag='Y' and pricing_channel in ('AIR') then 1 end) as R12_AIR_txns,
count(case when R12_flag='Y' and pricing_channel in ('POS','AIR','TMT') then 1 end) as R12_Retail_txns,
count(case when R12_flag='Y' and pricing_channel ='WEB' then 1 end) as R12_website_txns,
count(case when R12_flag='Y' and pricing_channel ='APP' then 1 end) as R12_App_txns,
count(case when R12_flag='Y' and pricing_channel in ('POS') then 1 end) as R12_POS_txns,
count(case when R12_flag='Y' and Is_WUPLUS=1 then 1 end) as R12_WUPLUS_txns,
case 
when R12_Retail_txns > 0 and (R12_website_txns > 0 or R12_App_txns > 0 ) then 'Retail+Digital'
when R12_Retail_txns > 0 and (R12_website_txns = 0 and R12_App_txns = 0 ) then 'Retail_only'
when R12_Retail_txns = 0 and (R12_website_txns > 0 or R12_App_txns > 0 ) then 'Digital_only'
when R12_Retail_txns = 0 and (R12_website_txns = 0 and R12_App_txns = 0 ) then 'R12_INACTIVE'
end Retail_Digital_flag,

case 
when  R12_website_txns > 0 and R12_App_txns > 0 then 'Website+App'
when  R12_website_txns > 0 and R12_App_txns = 0 then 'Website_Only'
when  R12_website_txns = 0 and R12_App_txns > 0 then 'App_Only'
else Retail_Digital_flag end Web_App_flag,

count(case when upper(payin_type) in ('ACCOUNT') and r12_flag = 'Y' then 1 end) as account_pay_in,

count(case when upper(payout_type) in ('ACCOUNT') and r12_flag= 'Y' then 1 end) as account_pay_out,

		//CAR  718 adding R48 metrics to calculate R48_retail_digital_flag	- Saif
count(case when R48_flag='Y' and pricing_channel in ('AIR') then 1 end) as R48_AIR_txns,
count(case when R48_flag='Y' and pricing_channel in ('POS','AIR','TMT') then 1 end) as R48_Retail_txns,
count(case when R48_flag='Y' and pricing_channel ='WEB' then 1 end) as R48_website_txns,
count(case when R48_flag='Y' and pricing_channel ='APP' then 1 end) as R48_App_txns,
count(case when R48_flag='Y' and pricing_channel in ('POS') then 1 end) as R48_POS_txns,

case 
when R48_Retail_txns > 0 and (R48_website_txns > 0 or R48_App_txns > 0 ) then 'Retail+Digital'
when R48_Retail_txns > 0 and (R48_website_txns = 0 and R48_App_txns = 0 ) then 'Retail_only'
when R48_Retail_txns = 0 and (R48_website_txns > 0 or R48_App_txns > 0 ) then 'Digital_only'
when R48_Retail_txns = 0 and (R48_website_txns = 0 and R48_App_txns = 0 ) then 'R48_INACTIVE'
end R48_Retail_Digital_flag,



/*  --sum(case when R12_flag='Y' and pricing_channel in ('AIR') then SNDPRINCIPAL_USD end) as R12_AIR_principal,
--sum(case when R12_flag='Y' and pricing_channel in ('POS','AIR','TMT') then SNDPRINCIPAL_USD end) as R12_Retail_principal,
--sum(case when R12_flag='Y' and pricing_channel ='WEB' then SNDPRINCIPAL_USD end) as R12_website_principal,
--sum(case when R12_flag='Y' and pricing_channel ='APP' then SNDPRINCIPAL_USD end) as R12_App_principal,
--sum(case when R12_flag='Y' and pricing_channel ='OTHERS' then SNDPRINCIPAL_USD end) as R12_Other_principal,

--sum(case when R12_flag='Y' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_revenue,
--sum(case when R12_flag='Y' and pricing_channel in ('AIR') then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_AIR_revenue,
--sum(case when R12_flag='Y' and pricing_channel in ('POS','AIR','TMT') then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_Retail_revenue,
--sum(case when R12_flag='Y' and pricing_channel ='WEB' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_website_revenue,
--sum(case when R12_flag='Y' and pricing_channel ='APP' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_App_revenue,
--sum(case when R12_flag='Y' and pricing_channel ='OTHERS' then nvl(TOTAL_CHARGES_USD,0)+nvl(NET_FOREIGN_EXCHANGE,0) end) as R12_Other_revenue,
*/
count(case when R1_flag='Y' and pricing_channel in ('AIR') then 1 end ) R1_AIR_txns,
count(case when R1_flag='Y' and pricing_channel in ('POS','AIR','TMT') then 1 end ) R1_RETAIL_txns,
count(case when R1_flag='Y' and pricing_channel='WEB' then 1 end ) R1_WEBSITE_txns,
count(case when R1_flag='Y' and Is_WUPLUS=1 then 1 end ) R1_WUPLUS_txns,

count(case when R2_to_R13_flag='Y' and pricing_channel in ('AIR') then 1 end ) R2_to_R13_AIR_txns,
count(case when R2_to_R13_flag='Y' and pricing_channel in ('POS','AIR','TMT') then 1 end ) R2_to_R13_RETAIL_txns,
count(case when R2_to_R13_flag='Y' and pricing_channel='WEB' then 1 end ) R2_to_R13_WEBSITE_txns,
count(case when R2_to_R13_flag='Y' and pricing_channel='APP' then 1 end ) R2_to_R13_APP_txns,
count(case when R2_to_R13_flag='Y' and pricing_channel='OTHERS' then 1 end ) R2_to_R13_OTHERS_txns,
count(case when R2_to_R13_flag='Y' and Is_WUPLUS=1 then 1 end ) R2_to_R13_WUPLUS_txns,

count(case when R2_to_R37_flag='Y' and pricing_channel in ('WEB','APP') then 1 end ) R2_to_R37_digital_txns,
count(case when R2_to_R37_flag='Y' and pricing_channel in ('AIR') then 1 end ) R2_to_R37_air_txns,
count(case when R2_to_R37_flag='Y' and Is_WUPLUS=1 then 1 end ) R2_to_R37_wuplus_txns,

/* --sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel in ('AIR') then SNDPRINCIPAL_USD   end ) R1_AIR_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel in ('POS','AIR','TMT') then SNDPRINCIPAL_USD   end ) R1_RETAIL_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel='WEB' then SNDPRINCIPAL_USD end ) R1_WEBSITE_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel='APP' then SNDPRINCIPAL_USD end ) R1_APP_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel='OTHERS' then SNDPRINCIPAL_USD end ) R1_OTHERS_principal,

--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel in ('AIR') then SNDPRINCIPAL_USD end ) R2_to_R13_AIR_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel in ('POS','AIR','TMT') then SNDPRINCIPAL_USD end ) R2_to_R13_RETAIL_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel='WEB' then SNDPRINCIPAL_USD end ) R2_to_R13_WEBSITE_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel='APP' then SNDPRINCIPAL_USD end ) R2_to_R13_APP_principal,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel='OTHERS' then SNDPRINCIPAL_USD end ) R2_to_R13_OTHERS_principal,


--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel in ('AIR') then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0)   end ) R1_AIR_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel in ('POS','AIR','TMT') then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0)   end ) R1_RETAIL_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel='WEB' then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R1_WEBSITE_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel='APP' then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R1_APP_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) = mth_yr and pricing_channel='OTHERS' then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R1_OTHERS_revenue,

--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel in ('AIR') then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R2_to_R13_AIR_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel in ('POS','AIR','TMT') then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R2_to_R13_RETAIL_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel='WEB' then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R2_to_R13_WEBSITE_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel='APP' then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R2_to_R13_APP_revenue,
--sum(case when date_trunc('MONTH',RCVPAYING_DATETIME) <= add_months(mth_yr,-1) 
--        and date_trunc('MONTH',RCVPAYING_DATETIME) > add_months(mth_yr,-13) and pricing_channel='OTHERS' then nvl(total_charges_usd,0) + nvl(net_foreign_exchange,0) end ) R2_to_R13_OTHERS_revenue,
 */
 
count(case when  R12_flag='Y'    then 1 end) as R12_apn_txns,//GID MT_Type is not available in new Transactions master table
count(case when  R24_flag='Y'    then 1 end) as R24_apn_txns,//GID MT_Type is not available in new Transactions master table
count(case when  R36_flag='Y'    then 1 end) as R36_apn_txns,//GID MT_Type is not available in new Transactions master table
count(case when pricing_channel = 'AIR' and R24_flag='Y'    then 1 end) as R24_air_txns,
count(case when pricing_channel = 'AIR' and R36_flag='Y'    then 1 end) as R36_air_txns,

    
case 
when R12_txns > 0 and r24_txns-r12_txns = 0 then 'NEW'
when R12_txns > 0 and r24_txns-r12_txns > 0 then 'EXISTING'
when R12_txns = 0 then 'R12_INACTIVE' end New_Existing_flag,				

datediff(month,min(First_Txn_Mth),add_months(mth_yr,1)) as CUSTOMER_TENURE_IN_MONTHS
/* 
count(case when winbacks='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) winbacks,
count(case when winbacks='Y' and due_to_dco='Y' then 1 end) winbacks_due_to_dco,
count(case when digitisation='Y' then 1 end) digitisation,
count(case when digitisation='Y' and due_to_dco='Y' then 1 end) digitisation_due_to_dco,
count(case when POS_TO_AIR='Y' then 1 end) POS_TO_AIR,
count(case when POS_TO_AIR='Y' and due_to_dco='Y' then 1 end) POS_TO_AIR_due_to_dco,
count(case when txns_in_2_to_366_days > 0 and txns_in_1_to_365_days=0 then 1 end) churns,

count(case when ONEX_TO_TWOX_AND_PLUS='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) ONEX_TO_TWOX_AND_PLUS,
count(case when ONEX_TO_TWOX_AND_PLUS='Y' and due_to_dco='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) ONEX_TO_TWOX_AND_PLUS_due_to_dco,

count(case when ONEX_TO_TWOX='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) ONEX_TO_TWOX,
count(case when ONEX_TO_TWOX='Y' and due_to_dco='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) ONEX_TO_TWOX_due_to_dco,

count(case when TWOX_TO_THREEX='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) TWOX_TO_THREEX,
count(case when TWOX_TO_THREEX='Y' and due_to_dco='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) TWOX_TO_THREEX_due_to_dco,

count(case when THREEX_TO_FOURX_AND_PLUS='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) THREEX_TO_FOURX_AND_PLUS,
count(case when THREEX_TO_FOURX_AND_PLUS='Y' and due_to_dco='Y' and mth_yr=date_trunc(month,RCVPAYING_DATETIME) then 1 end) THREEX_TO_FOURX_AND_PLUS_due_to_dco
*/

      from YN_va_kpi_2020_3  a 
where mth_yr >='2020-01-01'															
      group by 1,2;`}).execute();

//select mth_yr,min(RCVPAYING_DATETIME),max(RCVPAYING_DATETIME) from YN_va_kpi_2020_3 where mth_yr='2021-12-01' and r12_flag='Y' group by 1 ;



$$ 
  
    
    
    
    
    
    --SP-5
; call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_05();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_05()
returns VARCHAR
language javascript
execute as owner
AS

$$

SP_STMNT_28 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table CEM_SC_CF_TF_DC as 
select a.*,channel_v1,pricing_channel,
f.sndcustomer_key as f_sndcustomer_key,f.due_to_dco as f_due_to_dco,
g.sndcustomer_key as g_sndcustomer_key,g.due_to_dco as g_due_to_dco,
h.sndcustomer_key as h_sndcustomer_key,h.due_to_dco as h_due_to_dco,
i.sndcustomer_key as i_sndcustomer_key,i.due_to_dco as i_due_to_dco,
j.sndcustomer_key as j_sndcustomer_key,j.due_to_dco as j_due_to_dco,
k.sndcustomer_key as k_sndcustomer_key,k.due_to_dco as k_due_to_dco,
l.sndcustomer_key as l_sndcustomer_key,l.due_to_dco as l_due_to_dco
--s.rcvcountry_code 
from 
YN_txn_freq_bucket  a 
left outer join YN_dominant_channel c on a.mth_yr=c.mth_yr and a.sndcustomer_key=c.sndcustomer_key 
left outer join YN_air_dominant_channel m on a.mth_yr=m.mth_yr and a.sndcustomer_key=m.sndcustomer_key 
left outer join R2D_monthly f on a.mth_yr=f.MONTH_OF_DIGITIZATION and a.sndcustomer_key=f.sndcustomer_key 
left outer join air_monthly g on a.mth_yr=g.MONTH_OF_DIGITIZATION and a.sndcustomer_key=g.sndcustomer_key 
left outer join WINBACKS_monthly h on a.mth_yr=h.MONTH_OF_DIGITIZATION and a.sndcustomer_key=h.sndcustomer_key 
left outer join ONE_X_TO_2X_AND_PLUS_monthly i on a.mth_yr=i.MONTH_OF_DIGITIZATION and a.sndcustomer_key=i.sndcustomer_key 
left outer join ONE_X_TO_2X_monthly j on a.mth_yr=j.MONTH_OF_DIGITIZATION and a.sndcustomer_key=j.sndcustomer_key 
left outer join TWO_X_TO_3X_monthly k on a.mth_yr=k.MONTH_OF_DIGITIZATION and a.sndcustomer_key=k.sndcustomer_key 
left outer join THREE_X_TO_4X_AND_PLUS_monthly l on a.mth_yr=l.MONTH_OF_DIGITIZATION and a.sndcustomer_key=l.sndcustomer_key 
--left outer join YN_dominant_rcvcountry s on a.mth_yr=s.mth_yr and a.sndcustomer_key=s.sndcustomer_key 
where a.mth_yr >= '2020-01-01'  ;`}).execute();				

/*
drop table excluding_cards_multiple_events_in_same_day;
create table excluding_cards_multiple_events_in_same_day as 
select distinct card_number 
from (select card_number,file_date,load_date,count(1) 
from (select distinct * from "WUDNA"."SUMMARY_GEN"."CURRENT_POINTS_VW") group by 1,2,3 having count(1) > 1 ) a ; --235


drop table YN_card_dates_tmp2;
create table YN_card_dates_tmp2 as
select   
           a.card_number,
           a.file_date,
           a.load_date,
           a.current_available_points,
           a.total_earned_points,
           a.total_redeemed_points,
           ROW_NUMBER () over (partition by a.card_number order by file_date,load_date ) as rnk_dates
from       "WUDNA"."SUMMARY_GEN"."CURRENT_POINTS_VW" a  left outer join excluding_cards_multiple_events_in_same_day b 
            on a.card_number=b.card_number where b.card_number is null           ;

drop table YN_card_dates_tmp3;
create table YN_card_dates_tmp3 as
select 
a.*,
case when total_earned_points - prior_total_earned_points >= 0 then total_earned_points - prior_total_earned_points else 0 end this_trans_earned_points,
case when total_redeemed_points - prior_total_redeemed_points >= 0 then total_redeemed_points - prior_total_redeemed_points else 0 end this_trans_redeemed_points,
case when total_earned_points - prior_total_earned_points < 0 then prior_total_earned_points - total_earned_points else 0 end points_expired,
this_trans_earned_points - this_trans_redeemed_points - points_expired as this_trans_points_left,
current_available_points-prior_current_available_points as available_points_in_this_txn
from 
(select    
           a.card_number, 
           a.file_date,
           a.current_available_points,
           a.total_earned_points,
           a.total_redeemed_points,
           nvl(b.current_available_points,0) as prior_current_available_points,
           nvl(b.total_earned_points,0) as prior_total_earned_points,
           nvl(b.total_redeemed_points,0) as prior_total_redeemed_points,
           a.rnk_dates as rank_a,
           b.rnk_dates as rank_b,
           row_number ( ) over (partition by a.card_number,date_trunc(month,a.file_date) order by a.file_date,a.load_date) as first_rank,
           row_number ( ) over (partition by a.card_number,date_trunc(month,a.file_date) order by a.file_date desc ,a.load_date desc) as last_rank
from       YN_card_dates_tmp2 a
           left outer join
           YN_card_dates_tmp2 b
on         a.card_number = b.card_number
and        b.rnk_dates = a.rnk_dates - 1
) a ;

*/

// --CHANGING POINTS DATE FROM HPNS TO RCX, AND EXCLUDING METRICS which ARE NOT USED IN CEM SCORECARD BY PAVAN ON 21st OCT 

SP_STMNT_29_0 = snowflake.createStatement( { sqlText:`create or replace table PK_card_redemption_dates as
select CUSTOMER_KEY,  //Changed card number to GID - Pandit
redemption_date as file_date,
REDEEMED_POINTS as this_trans_redeemed_points
from

"WUDNA"."SUMMARY_GEN"."WUDNA_REDEEMED_POINTS_RCX_VW"			// CAR 756 use RCX tables from WUDNA - Saif && //Changed table from RCX to WUDNA_RCX to map GID
/*
(select lri."member_id" ,to_date(substr("redemption_date",1,10)) as redemption_date,
sum("redeemed_pts") AS redeemed_pts
from  SUMMARY_GEN.RCX_LOYALTY_ACTIVITIES_VW la 
INNER JOIN SUMMARY_GEN.RCX_LOYALTY_REDEMPTION_ITEMS_VW LRI  ON la."id" = LRI."loyalty_activity_id" 
--INNER JOIN SUMMARY_GEN.rcx_purse_policies_vw pp ON pp."id" = LRI."purse_policy_id" 
WHERE la."activity_type" in ('Redemption','Adjustment') and la."level_code" not in ('XXC', 'YYC')
AND LRI."purse_policy_id" ='6091483c76e8a302e8399e64' -- ID belongs to Points
AND la."activity_status"='Processed'
AND LRI."delete_flag" = 'N'
group by 1,2) A
LEFT JOIN 
(select 
distinct "member_id", "loyalty_id"
FROM SUMMARY_GEN.RCX_LOYALTY_ACTIVITIES_VW) B
ON A."member_id"=B."member_id"
*/
;`}).execute();

/*
create table yn_monthly_redemptions as
select    a. card_number, 
        date_trunc(month,file_date) as mth_yr,
           sum(this_trans_earned_points) as points_earned_tm,
           sum(this_trans_redeemed_points) as points_redeemed_tm,
           sum(points_expired) as points_expired_tm,
   	   count(case when this_trans_redeemed_points > 0 then 1 end) as redemption_cnt_tm,
       count(case when this_trans_earned_points > 0 then 1  end) as earned_cnt_tm
from            YN_card_dates_tmp3 a where this_trans_redeemed_points > 0 group by    1,2;
*/

SP_STMNT_29 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table yn_monthly_redemptions as
select CUSTOMER_KEY, //changed card_number to customer_key GID - Pandit
        date_trunc(month,file_date) as mth_yr,
        sum(this_trans_redeemed_points) as points_redeemed_tm,
		count(this_trans_redeemed_points) as redemption_cnt_tm
from PK_card_redemption_dates group by 1,2;`}).execute();

/*
create table yn_monthly_R12_redemptions as
select    a. card_number, 
        mth_yr,
           sum(this_trans_earned_points) as points_earned_tm,
           sum(this_trans_redeemed_points) as points_redeemed_tm,
           sum(points_expired) as points_expired_tm,
   	   count(case when this_trans_redeemed_points > 0 then 1 end) as redemption_cnt_tm,
       count(case when this_trans_earned_points > 0 then 1  end) as earned_cnt_tm
from            YN_card_dates_tmp3 a,va_kpi_2020_2 b  
where date_trunc('month',file_date) <= mth_yr and date_trunc('month',file_date) > add_months(mth_yr,-12) 
and this_trans_redeemed_points > 0 
group by    1,2;
*/

SP_STMNT_30 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table yn_monthly_R12_redemptions as
select CUSTOMER_KEY,  //changed card_number to customer_key GID - Pandit
        mth_yr,
        sum(this_trans_redeemed_points) as points_redeemed_tm,
		count(this_trans_redeemed_points) as redemption_cnt_tm
from  PK_card_redemption_dates a,va_kpi_2020_2 b  
where date_trunc('month',file_date) <= mth_yr and date_trunc('month',file_date) > add_months(mth_yr,-12) 
group by 1,2;
`}).execute();

/*
create table yn_monthly_PR12_redemptions as
select    a. card_number, 
        mth_yr,
           sum(this_trans_earned_points) as points_earned_tm,
           sum(this_trans_redeemed_points) as points_redeemed_tm,
           sum(points_expired) as points_expired_tm,
   	   count(case when this_trans_redeemed_points > 0 then 1 end) as redemption_cnt_tm,
       count(case when this_trans_earned_points > 0 then 1  end) as earned_cnt_tm
from            YN_card_dates_tmp3 a,va_kpi_2020_2 
where date_trunc('MONTH',file_date) <= add_months(mth_yr,-12) and date_trunc('MONTH',file_date) > add_months(mth_yr,-24)
and this_trans_redeemed_points > 0 
group by    1,2;
*/

SP_STMNT_31 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table yn_monthly_PR12_redemptions as
select CUSTOMER_KEY,  //changed card_number to customer_key GID - Pandit
        mth_yr,
        sum(this_trans_redeemed_points) as points_redeemed_tm,
		count(this_trans_redeemed_points) as redemption_cnt_tm
from  PK_card_redemption_dates a,va_kpi_2020_2 
where date_trunc('MONTH',file_date) <= add_months(mth_yr,-12) and date_trunc('MONTH',file_date) > add_months(mth_yr,-24)
group by 1,2;
`}).execute();

SP_STMNT_32 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table yn_contacted_customers as 
select distinct customer_key,date_trunc(month,release_2_vendor_date) as  campaign_release_month
from 
(
select customer_key,release_2_vendor_date
from 
"WUDNA"."SUMMARY_GEN"."SOLICITATION_HISTORY_VW" a 
  inner join (select distinct campaign_id,campaign_desc,campaign_type,campaign_vendor from "WUDNA"."SUMMARY_GEN"."CAMPAIGN_LKUP_VW" ) b 
on nvl(a.pir_nbr,'NA')=nvl(b.campaign_id,'NA') AND upper(nvl(a.campaign_desc,'NA'))=upper(nvl(b.campaign_desc,'NA'))   
where (campaign_type='MARKETING' or upper(a.campaign_desc) not like '%SERVICE%' ) and substr(activity_code,1,1)='S' and substr(activity_code,3,1) in ('E','S') 
  and length(customer_key)=9 
group by 1,2 
  
union 
  
select customer_key,release_2_vendor_date
from 
"WUDNA"."SUMMARY_GEN"."SOLICITATION_HISTORY_VW" a 
inner join (select distinct campaign_id,campaign_desc,campaign_type,campaign_vendor from "WUDNA"."SUMMARY_GEN"."CAMPAIGN_LKUP_VW" ) b 
on nvl(a.pir_nbr,'NA')=nvl(b.campaign_id,'NA') AND upper(nvl(a.campaign_desc,'NA'))=upper(nvl(b.campaign_desc,'NA'))  
 
where (campaign_type='MARKETING' or upper(a.campaign_desc) not like '%SERVICE%' ) and substr(activity_code,1,1)='S' and substr(activity_code,3,1) in ('E','S') 
  and length(a.customer_key)=19 and release_2_vendor_date >= '2021-02-11'
group by 1,2 

  union 
  
  select case when g.cdb_customer_id is not null then h.customer_key else a.customer_key end as customer_key,release_2_vendor_date
from 
"WUDNA"."SUMMARY_GEN"."SOLICITATION_HISTORY_VW" a 
left outer join "WUDNA"."SUMMARY_GEN"."CDB_ID_GALACTIC_ID_MAPPING_VW" G on a.customer_key=to_char(g.cdb_customer_id)
left outer join WUDNA.SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW H on h.Customer_Key=g.rtra_galactic_id
inner join (select distinct campaign_id,campaign_desc,campaign_type,campaign_vendor from "WUDNA"."SUMMARY_GEN"."CAMPAIGN_LKUP_VW" ) b 
on nvl(a.pir_nbr,'NA')=nvl(b.campaign_id,'NA') AND upper(nvl(a.campaign_desc,'NA'))=upper(nvl(b.campaign_desc,'NA'))  
 
  where campaign_type='MARKETING' and substr(activity_code,1,1)='S' and substr(activity_code,3,1) in ('E','S') 
  and length(a.customer_key)=19 and release_2_vendor_date < '2021-02-11'
group by 1,2
 );`}).execute();
 
//select campaign_release_month,count(1) from yn_contacted_customers group by 1 order by 1 desc ;

//select * from "WUDNA"."SUMMARY_GEN"."CDB_ID_GALACTIC_ID_MAPPING_VW" where country_cd = 'MY';
  
SP_STMNT_33 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table cust_membership_date_R12 as 
select b.customer_key,a.mth_yr from cust_membership_date b , VA_KPI_2020_2 a 
where date_trunc(month,membership_date) <= a.mth_yr and date_trunc(month,membership_date) > add_months(a.mth_yr,-12);`}).execute();

//select mth_yr,count(1) from cust_membership_date_R12 group by 1 order by 1 desc ;
//select count(distinct sndcustomer_key) from WINBACKS_MONTHLY where MONTH_OF_DIGITIZATION='2022-02-01' and due_to_dco='Y';

SP_STMNT_34 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table YN_cust_flags as 		
select 
a.sndcustomer_key,
a.mth_yr,
ipf,
cm.customer_key,
-- consolidation_flag,   //CAR-830 remove consolidation flag Saif @
opt_sms,
opt_email,
EMAIL_ADDRESS_ON_FILE_FLAG,
MOBILE_NUMBER_ON_FILE_FLAG,
hvc_flag,
loyalty_member_flag,
registered_customer_flag,
PREFERRED_REGISTRATION_CHANNEL as registration_channel, //Not available in new wudna_customer_master_vw - GID
cm.country_code,
PREFERRED_REGISTRATION_DATE as registration_date,
K.FIRST_TXN_DATE,			// CAR  718 first_txn_date added  - Saif
K.LAST_TXN_DATE,			// CAR  785 last_txn_date added  - Saif		&&
--case when cm.country_code in ('AU','BH','BE','CA','FR','GA','DE','IT','CI','KW','MY','NL','NO','PH','QA','RU','SA','SN','ES','SE','CH','AE','GB','US') then 1 else 0 end as DCO_24,
--case when cm.country_code in ('US','GB','AE','IT','DE','FR','CH','SE','ES','SA','RU','QA','NO','KW','CI','DK','CA','BE','BH','AU','SG','SN','PH','PE','PA','NL','NZ','MY','JM','EC','AT','AR') then 1 else 0 end as DCO_32,
case when (EMAIL_ADDRESS_ON_FILE_FLAG = 'Y' OR  MOBILE_NUMBER_ON_FILE_FLAG = 'Y' ) then 'Y' else 'N' end as Flag_addressable,
case when ((EMAIL_ADDRESS_ON_FILE_FLAG = 'Y' and opt_email='I')
// ------------------------------- US & CA SMS MARKETABILITY customer optins and DOUBLE OPT SMS change----------------------------------------------
		OR  (MOBILE_NUMBER_ON_FILE_FLAG = 'Y' AND opt_sms = 'I' AND cm.country_code NOT IN ('US','CA'))
		or (MOBILE_NUMBER_ON_FILE_FLAG = 'Y' AND opt_sms = 'I' AND DOUBLE_OPT_SMS = 'I' and cm.country_code IN ('US','CA')) ) and marketing_flag='Y'
			  then 'Y' else 'N' end as Flag_marketable,
case when email_address_on_file_flag = 'Y' and opt_email = 'I' and marketing_flag='Y' then 'Y' else 'N' end as Email_Marketable,

case when ( (OPT_SMS = 'I' and mobile_number_on_File_Flag ='Y' and marketing_flag='Y' AND cm.country_code NOT IN ('US','CA'))			
	or (MOBILE_NUMBER_ON_FILE_FLAG = 'Y' AND opt_sms = 'I' AND DOUBLE_OPT_SMS = 'I' and marketing_flag='Y' and cm.country_code IN ('US','CA')))
	then 'Y' else 'N' end as SMS_Marketable,
// --------------------------------US & CA SMS MARKETABILITY customer optins and DOUBLE OPT SMS change----------------------------------------------
n.membership_date,
REDEEMER_START_DATE,
ipf_overdue,
latest_ipf,
days_since_last_txn,
ipf_change,
beats 
from
(
select distinct sndcustomer_key,mth_yr from YN_cust_level_flags_counts where mth_yr >= '2020-01-01'				
union 
select distinct customer_key,CAMPAIGN_RELEASE_MONTH from YN_contacted_customers where CAMPAIGN_RELEASE_MONTH >='2020-01-01'
union 
select distinct customer_key,mth_yr from cust_membership_date_R12  where mth_yr >= '2020-01-01'
union 
select distinct customer_key,optin_month from cpm_pref_email_optin_monthly where optin_month >='2020-01-01'
union 
select distinct customer_key,ROLLING_MONTH from cpm_pref_email_optin_R12 where ROLLING_MONTH >='2020-01-01'
union 
select distinct customer_key,optin_month from cpm_pref_sms_optin_monthly where optin_month >='2020-01-01'
union 
select distinct customer_key,ROLLING_MONTH from cpm_pref_sms_optin_R12 where ROLLING_MONTH >='2020-01-01'
union
// ---------------------------------------------- optout code inserted---------------------------------------------------
select distinct customer_key,optout_month from cpm_pref_email_optout_monthly where optout_month >='2020-01-01'  
union 
select distinct customer_key,ROLLING_MONTH from cpm_pref_email_optout_R12 where ROLLING_MONTH >='2020-01-01'
union
select distinct customer_key,optout_month from cpm_pref_sms_optout_monthly where optout_month >='2020-01-01'
union
select distinct customer_key,ROLLING_MONTH from cpm_pref_sms_optout_R12 where ROLLING_MONTH >='2020-01-01'
// ------------------------------------------------------ optout code ends----------------------------------------------
) a 
left outer join "WUDNA"."SUMMARY_GEN"."WUDNA_CUSTOMER_MASTER_VW" cm on a.sndcustomer_key=cm.customer_key  
left outer join cust_membership_date n on a.sndcustomer_key=n.customer_key 
LEFT OUTER JOIN 
(SELECT DISTINCT SNDCUSTOMER_KEY, FIRST_TXN_DATE, LAST_TXN_DATE FROM TXN_MASTER_SUPPLEMENT_1) K ON  a.sndcustomer_key=K.sndcustomer_key		//CAR  718 ADDED TO incorporate FIRST_TXN_DATE   // CAR  785 last_txn_date added  - Saif		&&
left outer join 
(select CUSTOMER_KEY as customer_key,min(file_date) as redeemer_start_date from PK_card_redemption_dates group by 1) x 
    on a.sndcustomer_key=x.customer_key  //CAM 704 To add IPF monthly logic, only latest month IPF considered - Pandit
left outer join RESP_IPF_CALC_T8 aa on a.sndcustomer_key=aa.customer_key and aa.mth_yr = DATEADD(month, -1, date_trunc('MONTH',sysdate()));`}).execute(); 

//select mth_yr,count(1) from yn_cust_flags group by 1 ;
//select mth_yr,count(1) from YN_cust_level_flags_counts group by 1 ;
/*
drop table YN_cust_flags_rolling_month;
create table YN_cust_flags_rolling_month as 
select 
b.*,a.*  
from 
yn_cust_flags a ,
va_kpi_2020_2 b ;
*/

SP_STMNT_35 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table YN_cust_flags_rolling as 
select  
a.*,
d.customer_key as d_customer_key,
r.CUSTOMER_KEY as r_customer_key,
y.CUSTOMER_KEY as y_customer_key,
r.REDEMPTION_CNT_TM as r_REDEMPTION_CNT_TM,
y.REDEMPTION_CNT_TM as y_REDEMPTION_CNT_TM,
t.customer_key as t_customer_key,
u.customer_key as u_customer_key,
v.customer_key as v_customer_key,
w.customer_key as w_customer_key,
// -------- code added here for optout customers------------------------------
e.customer_key as e_customer_key,
f.customer_key as f_customer_key,
g.customer_key as g_customer_key,
h.customer_key as h_customer_key
// ------------ code ends here for optout customers-----------------------------------
from 
YN_cust_flags  a 
left outer join YN_contacted_customers d on a.mth_yr=d.CAMPAIGN_RELEASE_MONTH and a.sndcustomer_key=d.customer_key 
left outer join YN_MONTHLY_R12_REDEMPTIONS r on a.mth_yr=r.mth_yr and a.sndcustomer_key=r.CUSTOMER_KEY 
left outer join YN_MONTHLY_REDEMPTIONS y on a.mth_yr=y.mth_yr and a.sndcustomer_key=y.CUSTOMER_KEY 
left outer join cpm_pref_email_optin_monthly t on a.sndcustomer_key=t.customer_key and a.mth_yr=t.optin_month
left outer join cpm_pref_email_optin_R12 u on a.sndcustomer_key=u.customer_key and a.mth_yr=u.rolling_month
left outer join cpm_pref_sms_optin_monthly v on a.sndcustomer_key=v.customer_key and a.mth_yr=v.optin_month
left outer join cpm_pref_sms_optin_R12 w on a.sndcustomer_key=w.customer_key and a.mth_yr=w.rolling_month
// -------------code added here --------------------------------------------------------------------------------------------------
left outer join cpm_pref_email_optout_monthly e on a.sndcustomer_key=e.customer_key and a.mth_yr=e.optout_month
left outer join cpm_pref_email_optout_R12 f on a.sndcustomer_key=f.customer_key and a.mth_yr=f.rolling_month
left outer join cpm_pref_sms_optout_monthly g on a.sndcustomer_key=g.customer_key and a.mth_yr=g.optout_month
left outer join cpm_pref_sms_optout_R12 h on a.sndcustomer_key=h.customer_key and a.mth_yr=h.rolling_month
// -------------- code ends here ----------------------------------------------------------------------------------------------------
where a.mth_yr >= '2020-01-01' ;`}).execute();

//select rolling_month,count(1),count(distinct customer_key) from cpm_pref_email_optin_R12 group by 1 order by 1 desc;

//select mth_yr,count(1) from YN_cust_flags_rolling group by 1;



$$
    
    
    
-- SP-6
; call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_06();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_06()
returns VARCHAR
language javascript
execute as owner
AS

$$



SP_STMNT_36 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  YN_Va_kpi_2020_output_engagement_cust_level as 
select 
nvl(New_Existing_flag,'R12_INACTIVE') as New_Existing_flag,				
--New_Existing_flag_Digi_team,
HVC_FLAG,
flag_addressable as flag_contactable,
EMAIL_ADDRESS_ON_FILE_FLAG AS Email_Addresable,        // CAM -857 Add SMS Addresable and Email Addresable   -pandit
MOBILE_NUMBER_ON_FILE_FLAG as SMS_Addresable,          // CAM -857 Add SMS Addresable and Email Addresable   -pandit
Flag_marketable ,
Email_Marketable,
SMS_Marketable,
COUNTRY_CODE,
nvl(RETAIL_DIGITAL_FLAG,'R12_INACTIVE') as RETAIL_DIGITAL_FLAG,
nvl(WEB_APP_FLAG,'R12_INACTIVE') as WEB_APP_FLAG,
a.FIRST_TXN_DATE, R48_RETAIL_DIGITAL_FLAG, 		//CAR  718 added first txn date and R48_RETAIL_DIGITAL_FLAG		-Saif
a.LAST_TXN_DATE,                                // CAR  785 last_txn_date added  - Saif		&&
--case 
--when e.r12_txns > 0 and rcvcountry_code in ('US','MX','PH','IN','CO','TR','MA','FR','RO','AR') then rcvcountry_code 
--when e.r12_txns > 0 then 'OTHERS' 
--else 'R12_INACTIVE' end dom_rcv_corridor,
case when r12_apn_txns > 0 then 'Y' else 'N' end APN_txn_atleast_once_in_R12,
case when e.r12_air_txns > 0 then 'Y' else 'N' end AIR_txn_atleast_once_in_R12,
a.mth_yr,

case when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) then 'Y' else 'N' end membership_by_end_of_month,
case 
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and r_REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and (r_REDEMPTION_CNT_TM = 0 or r_REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,

case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
R12_active_breakup,			
nvl(txn_freq_bucket,'R12_INACTIVE') as R12_txn_freq_bucket,
nvl(channel_v1,'R12_INACTIVE') as R12_Dominant_channel,
a.sndcustomer_key,
e.r12_txns, 
e.r1_txns,
e.R48_TXNS,			//CAR  718 added r48 txn count  -Saif

e.R2_TXNS,			//CAR  749 added R2, R3, R6 txn count  -Saif    &&
e.R3_TXNS,
e.R6_TXNS,

CUSTOMER_TENURE_IN_MONTHS,
channel_v1,
r12_website_txns, 
r12_app_txns,
R12_WUPLUS_txns,
pricing_channel as air_dominant_channel,
r12_air_txns,
account_pay_in,
account_pay_out,
membership_date,
redeemer_start_date,
f.CUSTOMER_KEY as pr12_redeemer,  //replaced card_number with customer_key
y_REDEMPTION_CNT_TM,
r_REDEMPTION_CNT_TM,
h_due_to_dco,
r2_to_r13_txns,
ipf,
days_since_last_txn,
ipf_overdue,	
ipf_change,            // CAR-856 add ipf_change Saif @
beats,
d_customer_key,
f_sndcustomer_key,g_sndcustomer_key,
r12_pos_txns,
f_due_to_dco,
g_due_to_dco,
R2_TO_R13_RETAIL_TXNS,
R2_TO_R13_WEBSITE_TXNS,
R2_TO_R13_APP_TXNS,
R2_to_R13_WUPLUS_TXNS,
R1_APP_TXNS,
g.sndcustomer_key as sndcustomer_key_due_to_dco,
r24_air_txns,
pr12_txns,
pr12_retail_txns,
pr12_website_txns,
pr12_app_txns,
PR12_wuplus_txns,
// ------------- Code changes start for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
R12_Domestic_txns,
R12_International_txns,	  
PR12_Domestic_txns,
PR12_International_txns,

R12_Payout_Cash_txns,
R12_Payout_Account_txns,
PR12_Payout_Cash_txns,
PR12_Payout_Account_txns,

R12_Payin_Cash_txns,
R12_Payin_Account_txns,
PR12_Payin_Cash_txns,
PR12_Payin_Account_txns,

case when pr12_retail_txns = 0 and R12_Retail_txns > 0 then 'Y' else 'N' end New_2_Retail,
case when pr12_website_txns = 0 and R12_website_txns > 0 then 'Y' else 'N' end New_2_Website,
case when pr12_app_txns = 0 and R12_App_txns > 0 then 'Y' else 'N' end New_2_App,
case when pr12_website_txns = 0 and pr12_app_txns = 0 and (R12_website_txns > 0 or R12_App_txns > 0) then 'Y' else 'N' end New_2_Digital,

case when PR12_Domestic_txns = 0 and R12_Domestic_txns > 0 then 'Y' else 'N' end New_2_Domestic,
case when PR12_International_txns = 0 and R12_International_txns > 0 then 'Y' else 'N' end New_2_International,

case when PR12_Payout_Cash_txns = 0 and R12_Payout_Cash_txns > 0 then 'Y' else 'N' end New_2_Payout_Cash,
case when PR12_Payout_Account_txns = 0 and R12_Payout_Account_txns > 0 then 'Y' else 'N' end New_2_Payout_Account,

case when PR12_Payin_Cash_txns = 0 and R12_Payin_Cash_txns > 0 then 'Y' else 'N' end New_2_Payin_Cash,
case when PR12_Payin_Account_txns = 0 and R12_Payin_Account_txns > 0 then 'Y' else 'N' end New_2_Payin_Account,
// ------------- Code changes end for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
r36_air_txns,
R48_air_txns,					//CAR-877 R36->48 Saif @
i_sndcustomer_key,
j_sndcustomer_key,
k_sndcustomer_key,
l_sndcustomer_key,
i_due_to_dco,
j_due_to_dco,
k_due_to_dco,
l_due_to_dco,
r36_txns,
r24_txns,
ppr12_txns,
pppr12_txns, //car saif @
r14_to_r25_txns,
r26_to_r37_txns,
R38_to_R49_txns, 			//CAR-877 R36->48 Saif @

// --------- #### R1,PR12,PPR12 PRINCIPAL added here
R1_principal,
R12_principal,
PR12_principal,
PPR12_principal,
R48_principal,		//CAR  718 ADDED  r48 principal	-Saif

R2_principal,		//CAR  749 ADDED  R2, R3, R6 principal	-Saif  &&
R3_principal,
R6_principal,


// --------- #### R1,PR12,PPR12 FEE added here
R1_fee,
R12_fee,
PR12_fee,
PPR12_fee,
R48_fee,			//CAR  718 ADDED R48 FEE	-Saif

R2_fee,			//CAR  749 ADDED R2, R3, R6 FEE	-Saif		&&
R3_fee,
R6_fee,


// --------- #### R1,PR12,PPR12 NET_FX added here
R1_net_fx,
R12_net_fx,
PR12_net_fx,
PPR12_net_fx,
R48_net_fx, 		//CAR  718 r48 fx	-Saif

R2_net_fx,			//CAR  749 R2, R3, R6 fx	-Saif  &&
R3_net_fx,
R6_net_fx,


// --------- ##### R1,PR12,PPR12 revenue added here
R1_revenue,
R12_revenue,
PR12_revenue,
PPR12_revenue,
R48_revenue, 		//CAR  718 R48 REVENUE	-Saif

R2_revenue,		//CAR  749 R2, R3, R6 REVENUE	-Saif  &&
R3_revenue,
R6_revenue,

// -----------------------------------------------------

t_customer_key,
u_customer_key,
v_customer_key,
w_customer_key,
// -----------------------optout customer---------------------------------
e_customer_key,
f_customer_key,
g_customer_key,
h_customer_key,
// ------------------------------optout customer---------------------------------------------------
r12_apn_txns,
loyalty_member_flag,
r12_retail_txns,
r1_air_txns,
r1_retail_txns,
r1_website_txns,
r1_wuplus_txns,
R2_TO_R13_AIR_TXNS,
R24_APN_TXNS,
R36_APN_TXNS,

case when r2_to_r13_txns > 0 then 'Y' else 'N' end as month_begining_customer,        //CAR-877 R36->48 Saif @
case when r1_txns > 0 and r2_to_r13_txns=0 and r14_to_r25_txns = 0  and r26_to_r37_txns=0 and R38_to_R49_txns=0 then 'Y' else 'N' end new_customer,          //CAR-877 R36->48 Saif @
case when r1_txns > 0 and r2_to_r13_txns=0 and (r14_to_r25_txns > 0 or r26_to_r37_txns > 0 or R38_to_R49_txns>0) then 'Y' else 'N' end winback_customer,     //CAR-877 R36->48 Saif @
case when r12_txns = 0 and r2_to_r13_txns > 0  then 'Y' else 'N' end churn_customer, //CAR-877 R36->48 Saif @
case when r12_txns > 0 then 'Y' else 'N' end as month_ending_customer                //CAR-877 R36->48 Saif @


from 
YN_cust_flags_rolling a 
left outer join CEM_SC_CF_TF_DC b on a.mth_yr=b.mth_yr and a.sndcustomer_key=b.sndcustomer_key 
left outer join YN_cust_level_flags_counts e on a.sndcustomer_key=e.sndcustomer_key and a.mth_yr=e.mth_yr 
left outer join yn_monthly_PR12_redemptions f on a.sndcustomer_key=f.CUSTOMER_KEY and a.mth_yr=f.mth_yr 
left outer join (select distinct sndcustomer_key,date_trunc('MONTH',RCVPAYING_DATETIME) as txn_month from txn_master_supplement_1 where dco_txn='Y') g 
on a.sndcustomer_key=g.sndcustomer_key and a.mth_yr=g.txn_month
where a.mth_yr >= '2020-01-01';`}).execute();

/*
select date_trunc(month,membership_date),count(distinct sndcustomer_key) 
from YN_Va_kpi_2020_output_engagement_cust_level group by 1 order by 1 desc;

select mth_yr,
count(case when  date_trunc(month,membership_date) = mth_yr 
      then 1 end ) as New_enroll_ments_R1

      from YN_Va_kpi_2020_output_engagement_cust_level group by 1 order by 1 desc;

select date_trunc(month,a.membership_date),count(distinct a.customer_key),count(distinct b.sndcustomer_key) 
from cust_membership_date a 
left outer join YN_Va_kpi_2020_output_engagement_cust_level b on a.customer_key=b.sndcustomer_key and 
date_trunc(month,a.membership_date) = mth_yr group by 1 order by 1 desc ;

select min(a.membership_date),max(a.membership_date)
from cust_membership_date a 
left outer join (select * from YN_Va_kpi_2020_output_engagement_cust_level where mth_yr='2021-12-01') b 
on a.customer_key=b.sndcustomer_key  
where date_trunc(year,a.membership_date)='2021-01-01' and b.sndcustomer_key is null ;

select date_trunc(month,a.membership_date),count(1),min(a.membership_date),max(a.membership_date)
from cust_membership_date a 
left outer  join (select * from YN_Va_kpi_2020_output_engagement_cust_level where mth_yr='2021-12-01') b 
on a.customer_key=b.sndcustomer_key  
where date_trunc(year,a.membership_date)='2021-01-01' and b.sndcustomer_key is null group by 1  ;
*/

SP_STMNT_37 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  YN_Va_kpi_2020_output_engagement as 
select 
nvl(New_Existing_flag,'R12_INACTIVE') as New_Existing_flag,				
--New_Existing_flag_Digi_team,
HVC_FLAG,
flag_contactable,
Flag_marketable ,
Email_Marketable,
SMS_Marketable,
COUNTRY_CODE,
nvl(RETAIL_DIGITAL_FLAG,'R12_INACTIVE') as RETAIL_DIGITAL_FLAG,
nvl(WEB_APP_FLAG,'R12_INACTIVE') as WEB_APP_FLAG,
--case 
--when r12_txns > 0 and rcvcountry_code in ('US','MX','PH','IN','CO','TR','MA','FR','RO','AR') then rcvcountry_code 
--when r12_txns > 0 then 'OTHERS' 
--else 'R12_INACTIVE' end dom_rcv_corridor,
case when r12_apn_txns > 0 then 'Y' else 'N' end APN_txn_atleast_once_in_R12,
case when r12_air_txns > 0 then 'Y' else 'N' end AIR_txn_atleast_once_in_R12,
mth_yr,
case when loyalty_member_flag ='Y' and membership_date < add_months(mth_yr,1) then 'Y' else 'N' end membership_by_end_of_month,
case 
when loyalty_member_flag ='Y' and membership_date < add_months(mth_yr,1) and r_REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date < add_months(mth_yr,1) and (r_REDEMPTION_CNT_TM = 0 or r_REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,

case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
R12_active_breakup,
nvl(R12_txn_freq_bucket,'R12_INACTIVE') as R12_txn_freq_bucket,
nvl(channel_v1,'R12_INACTIVE') as R12_Dominant_channel,

--count(1) as R12_Customers,
count(case when Flag_marketable='Y' and r12_txns > 0 then 1 end) as R12_Marketable_Customers,
count(case when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and r12_txns > 0 then 1 end) as R12_MYWU_Members,
count(case when MYWU_status in ('Member_Redeemer') and r12_txns > 0 then 1 end) as R12_MYWU_Member_Redeemers,

count(case when Flag_marketable='Y' and r1_txns > 0 then 1 end) as R1_Marketable_Customers,
count(case when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and r1_txns > 0 then 1 end) as R1_MYWU_Members,
count(case when MYWU_status in ('Member_Redeemer') and r1_txns > 0 then 1 end) as R1_MYWU_Member_Redeemers,

--sum(r12_txns) as r12_txns,
sum(case when Flag_marketable='Y' then r12_txns end) as R12_Marketable_txns,
sum(case when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then r12_txns end) as R12_MYWU_Members_txns,
sum(case when MYWU_status in ('Member_Redeemer') then r12_txns end) as R12_MYWU_Member_Redeemers_txns,

sum(case when r12_txns > 0 then CUSTOMER_TENURE_IN_MONTHS end ) as R12_customers_tenure,
sum(case when Flag_marketable='Y' and r12_txns > 0 then CUSTOMER_TENURE_IN_MONTHS end) as R12_Marketable_customers_tenure,
sum(case when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and r12_txns > 0 then CUSTOMER_TENURE_IN_MONTHS end) as R12_MYWU_Members_tenure,
sum(case when MYWU_status in ('Member_Redeemer') and r12_txns > 0 then CUSTOMER_TENURE_IN_MONTHS end) as R12_MYWU_Member_Redeemers_tenure,

count(case when channel_v1 in ('WEBSITE','APP') and r12_txns > 0 then 1 end ) as R12_Digi_dominant_Customers,
count(case when channel_v1 in ('WEBSITE','APP') and r12_txns > 0 and Flag_marketable='Y' then 1 end) as R12_Digi_dominant_Marketable_Customers,
count(case when channel_v1 in ('WEBSITE','APP') and r12_txns > 0 and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as R12_Digi_dominant_MYWU_Members,
count(case when channel_v1 in ('WEBSITE','APP') and r12_txns > 0 and MYWU_status in ('Member_Redeemer') then 1 end) as R12_Digi_dominant_MYWU_Member_Redeemers,

count(case when channel_v1 in ('APP') and r12_txns > 0 then 1 end ) as R12_app_dominant_Customers,
count(case when channel_v1 in ('APP') and r12_txns > 0 and Flag_marketable='Y' then 1 end) as R12_app_dominant_Marketable_Customers,
count(case when channel_v1 in ('APP') and r12_txns > 0 and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as R12_app_dominant_MYWU_Members,
count(case when channel_v1 in ('APP') and r12_txns > 0 and MYWU_status in ('Member_Redeemer') then 1 end) as R12_app_dominant_MYWU_Member_Redeemers,

count(case when r12_txns=nvl(r12_website_txns,0)+nvl(r12_app_txns,0) and r12_txns > 0 then 1 end ) as R12_digital_native_customers,
count(case when r12_website_txns > 0 or r12_app_txns > 0  then 1 end ) as R12_digital_user,

count(case when r12_txns=nvl(r12_app_txns,0) and r12_txns > 0 then 1 end ) as R12_app_native_customers,
count(case when r12_app_txns > 0  then 1 end ) as R12_app_user,

count(case when r12_txns=r12_air_txns and r12_air_txns > 0 then 1 end ) as R12_air_native_customers,
count(case when air_dominant_channel is not null then 1 end ) as R12_air_dominant_Customers,
count(case when r12_air_txns > 0 then 1 end ) as R12_air_user,

count(case when r12_pos_txns=r12_txns and account_pay_in > 0 then 1 end) as retail_used_account_pay_in,
count(case when r12_pos_txns=r12_txns and account_pay_out > 0 then 1 end) as retail_used_account_pay_out,

// ------------------------ New Enrollments Splitting into All and R12_Inactive(CAR 262,265) ----------------------------

count(case when membership_by_end_of_month='Y' and date_trunc(month,membership_date) <= a.mth_yr and date_trunc(month,membership_date) > add_months(a.mth_yr,-12) 
      and R12_Dominant_Channel <> 'R12_INACTIVE' then 1 end ) as New_enroll_ments_R12,
	  
count(case when membership_by_end_of_month='Y' and date_trunc(month,membership_date) = date_trunc(month,mth_yr) 
	and R12_Dominant_Channel <> 'R12_INACTIVE' then 1 end ) as New_enroll_ments_R1,
	  
count(case when membership_by_end_of_month='Y' and date_trunc(month,membership_date) = date_trunc(month,mth_yr) and R1_txns = 0 
	and R12_Dominant_Channel <> 'R12_INACTIVE' then 1 end ) as New_enroll_ments_R1_Inactive,
	  
count(case when membership_by_end_of_month='Y' and date_trunc(month,membership_date) <= a.mth_yr and date_trunc(month,membership_date) > add_months(a.mth_yr,-12) 
      and R12_Dominant_Channel ='R12_INACTIVE' then 1 end ) as New_enroll_ments_R12_R12Inactive,
	  
count(case when membership_by_end_of_month='Y' and date_trunc(month,membership_date) = date_trunc(month,mth_yr) 
	and R12_Dominant_Channel = 'R12_INACTIVE' then 1 end ) as New_enroll_ments_R1_R12Inactive,
	
// ---------------------------------------- Ends here ------------------------------------

count(case when membership_by_end_of_month='Y' and date_trunc(month,redeemer_start_date) <= a.mth_yr 
      and date_trunc(month,redeemer_start_date) > add_months(a.mth_yr,-12) then 1 end ) as New_redeemers_life_time_in_R12,
count(case when membership_by_end_of_month='Y' and date_trunc(month,redeemer_start_date) = date_trunc(month,mth_yr) then 1 end ) as New_redeemers_lifetime_in_R1,

count(case when membership_by_end_of_month='Y' and PR12_REDEEMER is null  and r_REDEMPTION_CNT_TM > 0 then 1 end ) as New_redeemers_R12_in_R12,
count(case when membership_by_end_of_month='Y' and y_REDEMPTION_CNT_TM=r_REDEMPTION_CNT_TM then 1 end ) as New_redeemers_R12_in_R1,

count(case when membership_by_end_of_month='Y' and PR12_REDEEMER is not null  and r_REDEMPTION_CNT_TM > 0 then 1 end ) as Existing_redeemers_R12_in_R12,
count(case when membership_by_end_of_month='Y' and y_REDEMPTION_CNT_TM>0 and r_REDEMPTION_CNT_TM+y_REDEMPTION_CNT_TM > y_REDEMPTION_CNT_TM then 1 end ) as Existing_redeemers_R12_in_R1,

--winbacks

count(case when h_due_to_dco='Y'  then 1 end ) as cem_winbacks,		
count(case when h_due_to_dco='Y'  and Flag_marketable='Y' then 1 end) as cem_winbacks_Marketable_Customers,
count(case when h_due_to_dco='Y'  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as cem_winbacks_MYWU_Members,
count(case when h_due_to_dco='Y'  and MYWU_status in ('Member_Redeemer') then 1 end) as cem_winbacks_MYWU_Member_Redeemers,

count(case when r12_txns = 0  and r2_to_r13_txns > 0  then 1 end ) as churns,
count(case when r12_txns = 0  and r2_to_r13_txns > 0   and Flag_marketable='Y' then 1 end) as churns_Marketable_Customers,
count(case when r12_txns = 0  and r2_to_r13_txns > 0  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as churns_MYWU_Members,
count(case when r12_txns = 0  and r2_to_r13_txns > 0  and MYWU_status in ('Member_Redeemer') then 1 end) as churns_MYWU_Member_Redeemers,

sum(ipf) as ipf,	
sum(case when  Flag_marketable='Y' then ipf end) as Marketable_Customers_ipf,
sum(case when  MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then ipf end) as MYWU_Members_ipf,
sum(case when  MYWU_status in ('Member_Redeemer') then ipf end) as MYWU_Member_Redeemers_ipf,

sum(days_since_last_txn) as days_since_last_txn,

sum(ipf_overdue) as ipf_overdue,
sum(case when  Flag_marketable='Y' then ipf_overdue end) as Marketable_Customers_ipf_overdue,
sum(case when   MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then ipf_overdue end) as MYWU_Members_ipf_overdue,
sum(case when  MYWU_status in ('Member_Redeemer') then ipf_overdue end) as MYWU_Member_Redeemers_ipf_overdue,

count(case when ipf is not null then 1 end ) as ipf_cust,
count(case when ipf is not null and Flag_marketable='Y' then 1 end) as Marketable_Customers_ipf_cust,
count(case when ipf is not null and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as MYWU_Members_ipf_cust,
count(case when ipf is not null and MYWU_status in ('Member_Redeemer') then 1 end) as MYWU_Member_Redeemers_ipf_cust,

count(case when ipf is not null and beats='Ahead Schedule' then 1 end ) as ahead_schedule_cust,
count(case when ipf is not null and beats='On Schedule' then 1 end ) as on_schedule_cust,
count(case when ipf is not null and beats='1 beat late' then 1 end ) as one_beat_late_cust,
count(case when ipf is not null and beats='2 beats late' then 1 end ) as two_beat_late_cust,
count(case when ipf is not null and beats='3 beats late' then 1 end ) as three_beat_late_cust,
count(case when ipf is not null and beats='4 beats late' then 1 end ) as four_beat_late_cust,
count(case when ipf is not null and beats='5 beats plus late' then 1 end ) as five_beats_plus_late_cust,

count(case when r12_txns = 0  and r2_to_r13_txns > 0 and d_customer_key is not null then 1 end ) as churns_inspite_of_cem,

--r2d 

count(case when f_sndcustomer_key is not null  then 1 end ) as R2D_adoptors,
count(case when f_sndcustomer_key is not null   and Flag_marketable='Y' then 1 end) as R2D_adoptors_Marketable_Customers,
count(case when f_sndcustomer_key is not null   and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as R2D_adoptors_MYWU_Members,
count(case when f_sndcustomer_key is not null   and MYWU_status in ('Member_Redeemer') then 1 end) as R2D_adoptors_MYWU_Member_Redeemers,

count(case when r12_air_txns > 0 then 1 end ) as R12_air_users,
count(case when r12_air_txns > 0  and Flag_marketable='Y' then 1 end) as R12_air_Marketable_Customers,
count(case when r12_air_txns > 0  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as R12_air_MYWU_Members,
count(case when r12_air_txns > 0  and MYWU_status in ('Member_Redeemer') then 1 end) as R12_air_MYWU_Member_Redeemers,

count(case when g_sndcustomer_key is not null  then 1 end ) as POS_2_AIR_adoptors,
count(case when g_sndcustomer_key is not null  and Flag_marketable='Y' then 1 end) as POS_2_AIR_adoptors_Marketable_Customers,
count(case when g_sndcustomer_key is not null  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as POS_2_AIR_adoptors_MYWU_Members,
count(case when g_sndcustomer_key is not null   and MYWU_status in ('Member_Redeemer') then 1 end) as POS_2_AIR_adoptors_MYWU_Member_Redeemers,

count(case when ACCOUNT_PAY_IN > 0 and r12_pos_txns=r12_txns  then 1 end ) as card_or_account_users_at_pos,
count(case when ACCOUNT_PAY_IN > 0 and r12_pos_txns=r12_txns  and Flag_marketable='Y' then 1 end) as card_or_account_users_at_pos_Marketable_Customers,
count(case when ACCOUNT_PAY_IN > 0 and r12_pos_txns=r12_txns  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as card_or_account_users_at_pos_MYWU_Members,
count(case when ACCOUNT_PAY_IN > 0 and r12_pos_txns=r12_txns  and MYWU_status in ('Member_Redeemer') then 1 end) as card_or_account_users_at_pos_MYWU_Member_Redeemers,

count(case when  f_sndcustomer_key is not null   then sndcustomer_key end ) as cust_POS_to_WEB_or_APP_v ,
count(case when  f_due_to_dco='Y'  then sndcustomer_key end ) as cust_POS_to_WEB_or_APP_due_to_dco_v,
count(case when  g_due_to_dco='Y'  then sndcustomer_key end ) as CUST_POS_TO_AIR_DUE_TO_DCO_V,

count(case when R2_TO_R13_RETAIL_TXNS = 0 and R2_TO_R13_WEBSITE_TXNS > 0 and R2_TO_R13_APP_TXNS = 0  and R1_APP_TXNS >= 1  then sndcustomer_key end ) as cust_WEB_to_APP_v ,
count(case when R2_TO_R13_RETAIL_TXNS = 0 and R2_TO_R13_WEBSITE_TXNS > 0 and R2_TO_R13_APP_TXNS = 0  and R1_APP_TXNS >= 1 and sndcustomer_key is not null then sndcustomer_key end ) as cust_WEB_to_APP_due_to_dco_v,

count(case when r12_air_txns > 0 and r24_air_txns-r12_air_txns > 0 then 1 end ) as R12_existing_air_users,
count(case when r12_air_txns > 0 and r24_air_txns-r12_air_txns = 0 then 1 end ) as R12_new_air_users,
count(case when r12_air_txns > 0 and pr12_txns = 0 then 1 end ) as new_2_franchise_AIR,
count(case when r12_air_txns > 0 and r24_air_txns-r12_air_txns = 0 and pr12_retail_txns = 0 and pr12_website_txns+pr12_app_txns > 0  then 1 end ) 
    as Digital_2_AIR,
count(case when r12_air_txns > 0 and r24_air_txns-r12_air_txns = 0 and pr12_retail_txns > 0 and pr12_website_txns+pr12_app_txns = 0  then 1 end ) 
    as retail_2_AIR,
count(case when r12_air_txns > 0 and r24_air_txns-r12_air_txns = 0 and pr12_retail_txns > 0 and pr12_website_txns+pr12_app_txns > 0  then 1 end ) 
    as retail_and_digital_2_AIR,

count(case when r12_air_txns > 0 and r48_air_txns-r12_air_txns = 0 then 1 end ) as first_time_air_users,	//CAR-877 R36->48 Saif @

count(case when r12_pos_txns=r12_txns  then 1 end ) as R12_active_pos_only,

--1x to 2x+ 

count(case when i_sndcustomer_key is not null   then 1 end ) as oneX_to_twox_and_plus,
count(case when i_sndcustomer_key is not null  and Flag_marketable='Y' then 1 end) as oneX_to_twox_and_plus_Marketable_Customers,
count(case when i_sndcustomer_key is not null  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as oneX_to_twox_and_plus_MYWU_Members,
count(case when i_sndcustomer_key is not null  and MYWU_status in ('Member_Redeemer') then 1 end) as oneX_to_twox_and_plus_MYWU_Member_Redeemers,

count(case when j_sndcustomer_key is not null  then 1 end ) as oneX_to_twox,
count(case when j_sndcustomer_key is not null and Flag_marketable='Y' then 1 end) as oneX_to_twox_Marketable_Customers,
count(case when j_sndcustomer_key is not null and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as oneX_to_twox_MYWU_Members,
count(case when j_sndcustomer_key is not null and MYWU_status in ('Member_Redeemer') then 1 end) as oneX_to_twox_MYWU_Member_Redeemers,

count(case when k_sndcustomer_key is not null  then 1 end ) as twox_to_threex,
count(case when k_sndcustomer_key is not null and Flag_marketable='Y' then 1 end) as twox_to_threex_Marketable_Customers,
count(case when k_sndcustomer_key is not null and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as twox_to_threex_MYWU_Members,
count(case when k_sndcustomer_key is not null and MYWU_status in ('Member_Redeemer') then 1 end) as twox_to_threex_MYWU_Member_Redeemers,

count(case when l_sndcustomer_key is not null > 0  then 1 end ) as threex_to_fourx_and_plus,
count(case when l_sndcustomer_key is not null > 0  and Flag_marketable='Y' then 1 end) as threex_to_fourx_and_plus_Marketable_Customers,
count(case when l_sndcustomer_key is not null > 0  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then 1 end) as threex_to_fourx_and_plus_MYWU_Members,
count(case when l_sndcustomer_key is not null > 0  and MYWU_status in ('Member_Redeemer') then 1 end) as threex_to_fourx_and_plus_MYWU_Member_Redeemers,

count(case when i_due_to_dco='Y'   then 1 end ) as oneX_to_twox_and_plus_due_to_dco,
count(case when j_due_to_dco='Y'   then 1 end ) as oneX_to_twox_due_to_dco,
count(case when k_due_to_dco='Y'  then 1 end ) as twox_to_threex_due_to_dco,
count(case when l_due_to_dco='Y'  then 1 end ) as threex_to_fourx_and_plus_due_to_dco,

count(case when r36_txns > 0  then sndcustomer_key end ) as R36_customers,
count(case when r24_txns > 0  then sndcustomer_key end ) as R24_customers,
count(case when r12_txns > 0  then sndcustomer_key end ) as R12_customers,				

count(case when r12_txns > 0 and pr12_txns=0 and ppr12_txns=0 and pppr12_txns=0 then 1 end ) new_customers_r12_active_breakup,	//CAR-877 R36->48 Saif @
count(case when r12_txns > 0 and pr12_txns>0  then 1 end ) RETAINED_r12_active_breakup,										
count(case when r12_txns > 0 and pr12_txns=0 and (ppr12_txns>0 or pppr12_txns>0) then 1 end ) WINBACKS_r12_active_breakup,		//CAR-877 R36->48 Saif @
 

count(case when r2_to_r13_txns > 0 then 1 end) as month_begining_customers,
count(case when r1_txns > 0 and r2_to_r13_txns=0 and r14_to_r25_txns = 0  and r26_to_r37_txns=0 and R38_to_R49_txns=0 then 1 end) new_customers,  //CAR-877 R36->48 Saif @
count(case when r1_txns > 0 and r2_to_r13_txns=0 and (r14_to_r25_txns > 0 or r26_to_r37_txns > 0 or R38_to_R49_txns>0) then 1 end) winbacks,      //CAR-877 R36->48 Saif @
count(case when r12_txns = 0 and r2_to_r13_txns > 0  then 1 end) churning ,
count(case when r12_txns > 0 then 1 end) as month_ending_customers,

count(case when r12_txns > 0 and (r24_txns-r12_txns)=0 then sndcustomer_key end ) as R12_New_customers,
count(case when r12_txns > 0 and (r24_txns-r12_txns)>0 then sndcustomer_key end ) as R12_Existing_customers,
count(case when R14_to_R25_txns > 0 and R2_to_R13_txns > 0 and r1_txns=0 then sndcustomer_key end ) as Existing_cust_inactive_in_R1,  
count(case when R14_to_R25_txns = 0 and R2_to_R13_txns > 0 and r1_txns=0 then sndcustomer_key end ) as New_cust_inactive_in_R1,  
count(case when R14_to_R25_txns > 0 and R2_to_R13_txns > 0 and r1_txns>0 then sndcustomer_key end ) as Existing_cust_active_in_R1,    
count(case when R14_to_R25_txns = 0 and R2_to_R13_txns > 0 and r1_txns>0 then sndcustomer_key end ) as New_cust_active_in_R1,        

count(case when Pr12_txns >0  and r12_txns = 0  then sndcustomer_key end ) as Lapsing_customers,
count(case when PPr12_txns > 0  and Pr12_txns =0 and r12_txns =0 then sndcustomer_key end ) as Lapsed_customers,

count(case when r12_txns > 0 and flag_marketable='Y' then sndcustomer_key end ) as Active_and_addressable_customers,
count(case when Pr12_txns >0  and r12_txns = 0 and flag_marketable='Y' then sndcustomer_key end ) as Lapsing_and_addressable_customers,
count(case when PPr12_txns > 0  and Pr12_txns =0 and flag_marketable='Y' then sndcustomer_key end ) as Lapsed_and_addressable_customers,

// ------------- Code changes start for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
count(case when New_2_Retail = 'Y' then 1 end ) as New_2_Retail_Customers,
count(case when New_2_Website = 'Y' then 1 end ) as New_2_Website_Customers,
count(case when New_2_App = 'Y' then 1 end ) as New_2_App_Customers,
count(case when New_2_Digital = 'Y' then 1 end ) as New_2_Digital_Customers,
count(case when New_2_Domestic = 'Y' then 1 end ) as New_2_Domestic_Customers,
count(case when New_2_International = 'Y' then 1 end ) as New_2_International_Customers,
count(case when New_2_Payout_Cash = 'Y' then 1 end ) as New_2_Payout_Cash_Customers,
count(case when New_2_Payout_Account = 'Y' then 1 end ) as New_2_Payout_Account_Customers,
count(case when New_2_Payin_Cash = 'Y' then 1 end ) as New_2_Payin_Cash_Customers,
count(case when New_2_Payin_Account = 'Y' then 1 end ) as New_2_Payin_Account_Customers,
// ------------- Code changes end for CAR 428(New to Channel, Corridor, PayOut, PayIn)-------------------

sum(r12_txns) as r12_txns,
sum(Pr12_txns) as R24_TXNS,
sum(PPr12_txns) as R36_TXNS,

// --------- ###### R1,,R12,PR12,PPR12 PRINCIPAL added here
sum(R1_principal) as R1_principal,
sum(R12_principal) as R12_principal,
sum(PR12_principal) as PR12_principal,
sum(PPR12_principal) as PPR12_principal,

// --------- ######## R1,,R12,PR12,PPR12 revenue added here
sum(R1_fee) as R1_fee,
sum(R12_fee) as R12_fee,
sum(PR12_fee) as PR12_fee,
sum(PPR12_fee) as PPR12_fee,

// --------- ######## R1,,R12,PR12,PPR12 revenue added here
sum(R1_net_fx) as R1_net_fx,
sum(R12_net_fx) as R12_net_fx,
sum(PR12_net_fx) as PR12_net_fx,
sum(PPR12_net_fx) as PPR12_net_fx,


// --------- ######## R1,,R12,PR12,PPR12 revenue added here
sum(R1_revenue) as R1_revenue,
sum(R12_revenue) as R12_revenue,
sum(PR12_revenue) as PR12_revenue,
sum(PPR12_revenue) as PPR12_revenue,


count(case when r12_txns > 0 then d_customer_key end ) as Active_customers_Contacted,
count(case when Pr12_txns >0  and r12_txns = 0  then d_customer_key end ) as Lapsing_customers_Contacted,
count(case when PPr12_txns > 0  and Pr12_txns =0 then d_customer_key end ) as Lapsed_customers_Contacted,

--count(case when r12_txns > 0 then customer_key end ) as Active_customers_Contacted_first_time_this_year,
--count(case when Pr12_txns >0  and r12_txns = 0  then customer_key end ) as Lapsing_customers_Contacted_first_time_this_year,
--count(case when PPr12_txns > 0  and Pr12_txns =0 then customer_key end ) as Lapsed_customers_Contacted_first_time_this_year,

count(case when R2_to_R13_txns > 0 and R1_txns = 0 then sndcustomer_key end ) as Active_Customers_Becoming_Inactive_in_R1,

count(case when R2_to_R13_txns > 0 and r12_txns = 0 then sndcustomer_key end ) as Active_Customers_Becoming_Inactive,
count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS > 0 and r12_txns = 0 and Pr12_txns = 0 then sndcustomer_key end ) as Inactive_Customers_Attriting,

count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS > 0 and R1_txns > 0 then sndcustomer_key end ) as Lapsing_Customers_Reactivated,
count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS = 0 and R26_TO_R37_TXNS > 0 and R1_txns > 0 then sndcustomer_key end ) as Attrited_Customers_Reactivated, //check


count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS > 0 and R1_txns > 0 then sndcustomer_key end ) as Lapsing_Customers_Reactivated_within_7_Days_of_DCO_Communication,
count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS = 0 and R26_TO_R37_TXNS > 0 and R1_txns > 0 then sndcustomer_key end ) as Lapsed_Customers_Reactivated_within_7_Days_of_DCO_Communication,
sum(Pr12_txns) as Pr12_txns,

sum(R1_TXNS) as R1_TXNS,
sum(R2_TO_R13_TXNS) as R2_TO_R13_TXNS,
sum(R14_TO_R25_TXNS) as R14_TO_R25_TXNS,
sum(R26_TO_R37_TXNS) as R26_TO_R37_TXNS,
sum(R38_TO_R49_TXNS) as R38_TO_R49_TXNS,			//CAR-877 R36->48 Saif @	


count(case when r2_to_r13_txns > 0  and R1_txns > 0   then sndcustomer_key end ) as SR_retained_cust,
count(case when r2_to_r13_txns > 0 then sndcustomer_key end) as SR_r2_to_r13_cust,
count(case when pr12_txns > 0  and r12_txns > 0   then sndcustomer_key end ) as LT_retained_cust,
count(case when pr12_txns > 0    then sndcustomer_key end ) as LT_PR12_cust,

count(case when pr12_txns > 0  and r12_txns > 0  and Flag_marketable='Y' then sndcustomer_key end ) as LT_retained_marketable,
count(case when pr12_txns > 0   and Flag_marketable='Y' then sndcustomer_key end ) as LT_PR12_marketable,

count(case when pr12_txns > 0  and r12_txns > 0  and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then sndcustomer_key end ) as LT_retained_members,
count(case when pr12_txns > 0   and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') then sndcustomer_key end ) as LT_PR12_members,

count(case when pr12_txns > 0  and r12_txns > 0  and PR12_REDEEMER is not null then sndcustomer_key end ) as LT_retained_redeemers,
count(case when pr12_txns > 0  and PR12_REDEEMER is not null  then sndcustomer_key end ) as LT_PR12_redeemers,


count(case when r12_air_txns > 0 then sndcustomer_key end ) as R12_AIR_cust,
count(case when R12_RETAIL_TXNS > 0 then sndcustomer_key end ) as R12_Retail_cust,
count(case when R12_WEBSITE_TXNS > 0 then sndcustomer_key end ) as R12_website_cust,
count(case when R12_APP_TXNS > 0 then sndcustomer_key end ) as R12_app_cust,
count(case when R12_WUPLUS_TXNS > 0 then sndcustomer_key end ) as R12_wuplus_cust,

sum(	r12_air_txns	) as 	r12_air_txns,
sum(	R12_RETAIL_TXNS	) as 	R12_RETAIL_TXNS,
sum(	R12_WEBSITE_TXNS	) as 	R12_WEBSITE_TXNS,
sum(	R12_APP_TXNS	) as 	R12_APP_TXNS,
sum(	R12_WUPLUS_TXNS	) as 	R12_WUPLUS_TXNS,

count(case when R1_AIR_TXNS > 0 then sndcustomer_key end ) as R1_AIR_cust,
count(case when R1_RETAIL_TXNS > 0 then sndcustomer_key end ) as R1_Retail_cust,
count(case when R1_WEBSITE_TXNS > 0 then sndcustomer_key end ) as R1_website_cust,
count(case when R1_APP_TXNS > 0 then sndcustomer_key end ) as R1_app_cust,
count(case when R1_WUPLUS_TXNS > 0 then sndcustomer_key end ) as R1_wuplus_cust,

count(case when R2_to_R13_AIR_TXNS > 0 then sndcustomer_key end ) as R2_to_R13_AIR_cust,
count(case when R2_to_R13_RETAIL_TXNS > 0 then sndcustomer_key end ) as R2_to_R13_Retail_cust,
count(case when R2_to_R13_WEBSITE_TXNS > 0 then sndcustomer_key end ) as R2_to_R13_website_cust,
count(case when R2_to_R13_APP_TXNS > 0 then sndcustomer_key end ) as R2_to_R13_app_cust,
count(case when R2_to_R13_WUPLUS_TXNS > 0 then sndcustomer_key end ) as R2_to_R13_wuplus_cust,

sum(	R1_AIR_TXNS	) as 	R1_AIR_TXNS,
sum(	R1_RETAIL_TXNS	) as 	R1_RETAIL_TXNS,
sum(	R1_WEBSITE_TXNS	) as 	R1_WEBSITE_TXNS,
sum(	R1_APP_TXNS	) as 	R1_APP_TXNS,
sum(	R1_WUPLUS_TXNS	) as 	R1_WUPLUS_TXNS,

sum(	R2_TO_R13_AIR_TXNS	) as 	R2_TO_R13_AIR_TXNS,
sum(	R2_TO_R13_RETAIL_TXNS	) as 	R2_TO_R13_RETAIL_TXNS,
sum(	R2_TO_R13_WEBSITE_TXNS	) as 	R2_TO_R13_WEBSITE_TXNS,
sum(	R2_TO_R13_APP_TXNS	) as 	R2_TO_R13_APP_TXNS,
sum(	R2_to_R13_WUPLUS_TXNS	) as 	R2_to_R13_WUPLUS_TXNS,

count( case when r12_apn_txns > 0 then 1 end ) as R12_APN_CUST,
sum(r12_apn_txns) as R12_APN_TXN,
sum(case when r12_apn_txns > 0 then r12_txns end ) as R12_APN_non_apn_TXN,
sum(case when r12_txns > 0 and flag_marketable='Y' then r12_txns end  ) as ACTIVE_AND_MARKETABLE_CUSTOMER_TXNS,
sum(case when r12_txns > 0 and d_customer_key is not null then r12_txns end  ) as ACTIVE_CUSTOMERS_CONTACTED_TXNS,

count(distinct case when R12_apn_txns > 0  then sndcustomer_key end) R12_APN_active_customers,
count(distinct case when r12_txns = 0 and R24_apn_txns > 0 then sndcustomer_key end) Lapsing_APN_cust,
count(distinct case when r12_txns = 0 and Pr12_txns=0 and R36_apn_txns > 0 then sndcustomer_key end) Lapsed_APN_cust,

count(distinct case when flag_marketable='Y' and R12_apn_txns > 0  then sndcustomer_key end) R12_APN_marketable_active_customers,
count(distinct case when flag_marketable='Y' and r12_txns = 0 and R24_apn_txns > 0 then sndcustomer_key end) Lapsing_APN_marketable,
count(distinct case when flag_marketable='Y' and r12_txns = 0 and Pr12_txns=0 and R36_apn_txns > 0 then sndcustomer_key end) Lapsed_APN_marketable,

sum( case when flag_marketable='Y' and R12_apn_txns > 0  then R12_apn_txns end) R12_APN_marketable_apn_txns,
sum( case when flag_marketable='Y' and R12_apn_txns > 0  then r12_txns end) R12_APN_marketable_apn_non_apn_txns,


count(distinct case when d_customer_key is not null and R12_apn_txns > 0  then sndcustomer_key end) R12_APN_contacted_active_customers,
count(distinct case when d_customer_key is not null and r12_txns = 0 and R24_apn_txns > 0 then sndcustomer_key end) Lapsing_APN_contacted,
count(distinct case when d_customer_key is not null and r12_txns = 0 and Pr12_txns=0 and R36_apn_txns > 0 then sndcustomer_key end) Lapsed_APN_contacted,

sum( case when d_customer_key is not null and R12_apn_txns > 0  then R12_apn_txns end) R12_APN_contacted_apn_txns,
sum( case when d_customer_key is not null and R12_apn_txns > 0  then r12_txns end) R12_APN_contacted_apn_non_apn_txns,

count(distinct case when r12_air_txns > 0  then sndcustomer_key end) R12_AIR_active_customers,
count(distinct case when r12_txns = 0 and R24_AIR_txns > 0 then sndcustomer_key end) Lapsing_AIR_cust,
count(distinct case when r12_txns = 0 and Pr12_txns=0 and R36_AIR_txns > 0 then sndcustomer_key end) Lapsed_AIR_cust,

count(distinct case when flag_marketable='Y' and r12_air_txns > 0  then sndcustomer_key end) R12_AIR_marketable_active_customers,
count(distinct case when flag_marketable='Y' and r12_txns = 0 and R24_AIR_txns > 0 then sndcustomer_key end) Lapsing_AIR_marketable,
count(distinct case when flag_marketable='Y' and r12_txns = 0 and Pr12_txns=0 and R36_AIR_txns > 0 then sndcustomer_key end) Lapsed_AIR_marketable,

sum( case when flag_marketable='Y' and r12_air_txns > 0  then r12_air_txns end) R12_AIR_marketable_AIR_txns,
sum( case when flag_marketable='Y' and r12_air_txns > 0  then r12_txns end) R12_AIR_marketable_AIR_non_AIR_txns,


count(distinct case when d_customer_key is not null and r12_air_txns > 0  then sndcustomer_key end) R12_AIR_contacted_active_customers,
count(distinct case when d_customer_key is not null and r12_txns = 0 and R24_AIR_txns > 0 then sndcustomer_key end) Lapsing_AIR_contacted,
count(distinct case when d_customer_key is not null and r12_txns = 0 and Pr12_txns=0 and R36_AIR_txns > 0 then sndcustomer_key end) Lapsed_AIR_contacted,

sum( case when d_customer_key is not null and r12_air_txns > 0  then r12_air_txns end) R12_AIR_contacted_AIR_txns,
sum( case when d_customer_key is not null and r12_air_txns > 0  then r12_txns end) R12_AIR_contacted_AIR_non_AIR_txns,
sum(case when r12_air_txns > 0 then r12_txns end ) as R12_Air_non_air_TXN,


count(case when  R2_TO_R13_RETAIL_TXNS > 0 and R2_TO_R13_WEBSITE_TXNS = 0 and R2_TO_R13_APP_TXNS = 0   then sndcustomer_key end ) as SR_r2_r13_cust_POS ,

count(case when  PR12_RETAIL_TXNS > 0 and PR12_WEBSITE_TXNS = 0 and PR12_APP_TXNS = 0  
      and (R12_WEBSITE_TXNS >= 1 or R12_APP_txns >= 1 ) then sndcustomer_key end ) as LR_cust_POS_to_WEB_or_APP_v,
count(case when  PR12_RETAIL_TXNS > 0 and PR12_WEBSITE_TXNS = 0 and PR12_APP_TXNS = 0  
       then sndcustomer_key end ) as LR_PR12_cust_POS,
// -------------------------------------------code change for optins-----------------------------------------------------------
count(case when t_customer_key is not null  then 1 end ) as new_email_optins,
count(case when v_customer_key is not null  then 1 end ) as new_sms_optins,
count(case when (t_customer_key is not null or v_customer_key is not null)  then 1 end ) as new_email_or_sms_optins,
count(case when t_customer_key is not null and v_customer_key is not null  then 1 end ) as new_email_and_sms_optins,

count(case when u_customer_key is not null  then 1 end ) as new_email_optins_r12,
count(case when w_customer_key is not null  then 1 end ) as new_sms_optins_r12,
count(case when (u_customer_key is not null or w_customer_key is not null)  then 1 end ) as new_email_or_sms_optins_r12,
count(case when u_customer_key is not null and w_customer_key is not null  then 1 end ) as new_email_and_sms_optins_r12,
// -------------------------------------------code change for optins-----------------------------------------------------------

// -------------------------------------------code change for optout-----------------------------------------------------------
count(case when e_customer_key is not null  then 1 end ) as new_email_optout,
count(case when g_customer_key is not null  then 1 end ) as new_sms_optout,
count(case when (e_customer_key is not null or g_customer_key is not null)  then 1 end ) as new_email_or_sms_optout,
count(case when e_customer_key is not null and g_customer_key is not null  then 1 end ) as new_email_and_sms_optout,

count(case when f_customer_key is not null  then 1 end ) as new_email_optout_r12,
count(case when h_customer_key is not null  then 1 end ) as new_sms_optout_r12,
count(case when (f_customer_key is not null or h_customer_key is not null)  then 1 end ) as new_email_or_sms_optout_r12,
count(case when f_customer_key is not null and h_customer_key is not null  then 1 end ) as new_email_and_sms_optout_r12,
// -------------------------------------------code change for optout-----------------------------------------------------------
count(case when r1_txns > 0 then 1 end ) as R1_customers,
count(case when mywu_status='Member_Redeemer'  then 1 end ) as R12_MYWU_redeemers 

from 
YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_cust_LEVEL a
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18;
`}).execute();

//select * from YN_VA_KPI_2020_OUTPUT_ENGAGEMENT;



$$
    
    
    -- SP-7
    ; call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_07();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_07()
returns VARCHAR
language javascript
execute as owner
AS

$$

SP_STMNT_38 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  yn_existing_inactive_in_R1 as 
select 
nvl(New_Existing_flag,'R12_INACTIVE') as New_Existing_flag,
--New_Existing_flag_Digi_team,
HVC_FLAG,
flag_contactable,
Flag_marketable ,
Email_Marketable,
SMS_Marketable,
COUNTRY_CODE,
nvl(RETAIL_DIGITAL_FLAG,'R12_INACTIVE') as RETAIL_DIGITAL_FLAG,
nvl(WEB_APP_FLAG,'R12_INACTIVE') as WEB_APP_FLAG,
--case 
--when e.r12_txns > 0 and rcvcountry_code in ('US','MX','PH','IN','CO','TR','MA','FR','RO','AR') then rcvcountry_code 
--when e.r12_txns > 0 then 'OTHERS' 
--else 'R12_INACTIVE' end dom_rcv_corridor,
case when r12_apn_txns > 0 then 'Y' else 'N' end APN_txn_atleast_once_in_R12,
case when r12_air_txns > 0 then 'Y' else 'N' end AIR_txn_atleast_once_in_R12,
a.mth_yr,
case when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) then 'Y' else 'N' end membership_by_end_of_month,
case 
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and r_REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and (r_REDEMPTION_CNT_TM = 0 or r_REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,

case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
R12_active_breakup,
nvl(r12_txn_freq_bucket,'R12_INACTIVE') as R12_txn_freq_bucket,
nvl(channel_v1,'R12_INACTIVE') as R12_Dominant_channel,
count(case when R14_to_R25_txns > 0 and R2_to_R13_txns > 0 and r1_txns=0 then a.sndcustomer_key end ) as Existing_cust_inactive_in_R1,			
count(case when R14_to_R25_txns = 0 and R2_to_R13_txns > 0 and r1_txns=0 then a.sndcustomer_key end ) as New_cust_inactive_in_R1,				
count(case when R14_to_R25_txns > 0 and R2_to_R13_txns > 0 and r1_txns>0 then a.sndcustomer_key end ) as Existing_cust_active_in_R1,			
count(case when R14_to_R25_txns = 0 and R2_to_R13_txns > 0 and r1_txns>0 then a.sndcustomer_key end ) as New_cust_active_in_R1,
count(case when R2_TO_R13_RETAIL_TXNS = 0 and R2_TO_R13_WEBSITE_TXNS > 0 and R2_TO_R13_APP_TXNS = 0  and R1_APP_TXNS >= 1 and SNDCUSTOMER_KEY_DUE_TO_DCO is not null then a.sndcustomer_key end ) as cust_WEB_to_APP_due_to_dco_v,
count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS > 0 and R1_txns > 0 then SNDCUSTOMER_KEY_DUE_TO_DCO end ) as Lapsing_Customers_Reactivated_within_7_Days_of_DCO_Communication,
count(case when R2_to_R13_txns = 0 and R14_TO_R25_TXNS = 0 and R26_TO_R37_TXNS > 0 and R1_txns > 0 then SNDCUSTOMER_KEY_DUE_TO_DCO end ) as Lapsed_Customers_Reactivated_within_7_Days_of_DCO_Communication
from 
YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_cust_LEVEL a 
where mth_yr >= '2020-01-01'  
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18;
`}).execute();

SP_STMNT_39 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  YN_EXISTING_INACTIVE_IN_R2 as 
select 
super_region as region,
country_name,
NEW_EXISTING_FLAG	,
HVC_FLAG	,
FLAG_CONTACTABLE	,
FLAG_MARKETABLE	,
EMAIL_MARKETABLE	,
SMS_MARKETABLE	,
a.COUNTRY_CODE	,
RETAIL_DIGITAL_FLAG	,
WEB_APP_FLAG	,
APN_TXN_ATLEAST_ONCE_IN_R12	,
AIR_TXN_ATLEAST_ONCE_IN_R12	,
MTH_YR	,
MEMBERSHIP_BY_END_OF_MONTH	,
MYWU_STATUS	,
CEM_SEGMENT	,
R12_ACTIVE_BREAKUP	,
R12_TXN_FREQ_BUCKET	,
R12_DOMINANT_CHANNEL	,
EXISTING_CUST_INACTIVE_IN_R1,
NEW_CUST_INACTIVE_IN_R1,
EXISTING_CUST_ACTIVE_IN_R1,
NEW_CUST_ACTIVE_IN_R1,
cust_WEB_to_APP_due_to_dco_v,
Lapsing_Customers_Reactivated_within_7_Days_of_DCO_Communication,
Lapsed_Customers_Reactivated_within_7_Days_of_DCO_Communication

from YN_EXISTING_INACTIVE_IN_R1 a 
// ---------- updted table name and condition
left outer join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" b on a.country_code=b.country_code
WHERE  super_region IS NOT NULL;
`}).execute();

//select New_Existing_flag,count(1) from yn_R1_return_rate_in_60_days group by 1 ;

// ------------R1 customers ( also created new and existing as per R1 vs r2_r13 definition)

SP_STMNT_40 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  yn_R1_return_rate_in_60_days as 
select 
case 
when r1_txns > 0 and r2_to_r13_txns = 0 then 'NEW'
when r1_txns > 0 and r2_to_r13_txns > 0 then 'EXISTING' end New_Existing_flag,
--New_Existing_flag_Digi_team,
HVC_FLAG,
flag_contactable,
Flag_marketable ,
Email_Marketable,
SMS_Marketable,
COUNTRY_CODE,
nvl(RETAIL_DIGITAL_FLAG,'R12_INACTIVE') as RETAIL_DIGITAL_FLAG,
nvl(WEB_APP_FLAG,'R12_INACTIVE') as WEB_APP_FLAG,
--case 
--when e.r12_txns > 0 and rcvcountry_code in ('US','MX','PH','IN','CO','TR','MA','FR','RO','AR') then rcvcountry_code 
--when e.r12_txns > 0 then 'OTHERS' 
--else 'R12_INACTIVE' end dom_rcv_corridor,
case when r12_apn_txns > 0 then 'Y' else 'N' end APN_txn_atleast_once_in_R12,
case when r12_air_txns > 0 then 'Y' else 'N' end AIR_txn_atleast_once_in_R12,
a.mth_yr,
case when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) then 'Y' else 'N' end membership_by_end_of_month,
case 
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and r_REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and (r_REDEMPTION_CNT_TM = 0 or r_REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,

case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
R12_active_breakup,
R12_txn_freq_bucket,
nvl(case when pricing_channel in ('POS','TMT','AIR') then 'RETAIL'
    when pricing_channel='WEB' then 'WEBSITE'
    when pricing_channel='APP' then 'APP' end,'R12_INACTIVE') as R12_Dominant_channel,
a.sndcustomer_key,
RCVPAYING_DATETIME as first_txn_date,
sum(r1_txns) as R1_txns,
sum(	R1_AIR_TXNS	) as 	R1_AIR_TXNS,
sum(	R1_RETAIL_TXNS	) as 	R1_RETAIL_TXNS,
sum(	R1_WEBSITE_TXNS	) as 	R1_WEBSITE_TXNS,
sum(	R1_APP_TXNS	) as 	R1_APP_TXNS
from 
YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_cust_LEVEL a 
left outer join 
(select * from (select *,row_number() over(partition by sndcustomer_key,mth_yr order by RCVPAYING_DATETIME) as rnk  
 from YN_VA_KPI_2020_3 where r1_flag='Y') h where rnk=1) h 
on a.sndcustomer_key=h.sndcustomer_key and a.mth_yr=h.mth_yr
where a.mth_yr >= '2020-01-01' and r1_txns > 0 
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;
`}).execute();

//select * from wudna.cex_sandbox.YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_cust_LEVEL limit 100;

// ---------------- next 60 days transactions 

SP_STMNT_41 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  yn_R1_return_rate_in_60_days_1 as 
select 
New_Existing_flag,
HVC_FLAG,
flag_contactable,
Flag_marketable ,
Email_Marketable,
SMS_Marketable,
COUNTRY_CODE,
RETAIL_DIGITAL_FLAG,
WEB_APP_FLAG,
APN_txn_atleast_once_in_R12,
AIR_txn_atleast_once_in_R12,
a.mth_yr,membership_by_end_of_month,
MYWU_status,
CEM_SEGMENT,
R12_active_breakup,
R12_txn_freq_bucket,
R12_Dominant_channel,
a.sndcustomer_key,
a.first_txn_date,
R1_txns,
R1_AIR_TXNS,
R1_RETAIL_TXNS,
R1_WEBSITE_TXNS,
R1_APP_TXNS,
count(b.txn_id) as txns_in_60_days,
count(distinct case when pricing_channel in ('POS','TMT','AIR') then txn_id end) as retail_txns_in_60_days,
count(distinct case when pricing_channel in ('WEB') then txn_id end) as website_txns_in_60_days,
count(distinct case when pricing_channel in ('APP') then txn_id end) as app_txns_in_60_days
from yn_R1_return_rate_in_60_days a 
left outer join TXN_MASTER_SUPPLEMENT_1 b on a.sndcustomer_key=b.sndcustomer_key 
and RCVPAYING_DATETIME > a.first_txn_date and RCVPAYING_DATETIME <= add_months(a.first_txn_date,2) 
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25;
`}).execute();

//select mth_yr,count(1),count(distinct sndcustomer_key) from yn_R1_return_rate_in_60_days_1 group by 1 order by 1 desc;

// ---------- aggregated table r1 customers and retained in next 60 days 

SP_STMNT_42 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  yn_R1_return_rate_in_60_days_2 as 
select 
super_region as region,
country_name,
NEW_EXISTING_FLAG	,
HVC_FLAG	,
FLAG_CONTACTABLE	,
FLAG_MARKETABLE	,
EMAIL_MARKETABLE	,
SMS_MARKETABLE	,
a.COUNTRY_CODE	,
RETAIL_DIGITAL_FLAG	,
WEB_APP_FLAG	,
APN_TXN_ATLEAST_ONCE_IN_R12	,
AIR_TXN_ATLEAST_ONCE_IN_R12	,
MTH_YR	,
MEMBERSHIP_BY_END_OF_MONTH	,
MYWU_STATUS	,
CEM_SEGMENT	,
R12_ACTIVE_BREAKUP	,
R12_TXN_FREQ_BUCKET	,
R12_DOMINANT_CHANNEL	,
count(distinct sndcustomer_key) as R1_Customers,
count(distinct case when TXNS_IN_60_DAYS > 0 then sndcustomer_key end) as Retained_in_two_months,
count(distinct case when RETAIL_TXNS_IN_60_DAYS > 0 then sndcustomer_key end) as Retained_to_retail_in_two_months,
count(distinct case when WEBSITE_TXNS_IN_60_DAYS > 0 then sndcustomer_key end) as Retained_to_website_in_two_months,
count(distinct case when APP_TXNS_IN_60_DAYS > 0 then sndcustomer_key end) as Retained_to_app_in_two_months
from yn_R1_return_rate_in_60_days_1 a 
// ----added condition here---------------------
left outer join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" b on a.country_code=b.country_code
WHERE  super_region IS NOT NULL
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;
`}).execute();

/*
select distinct region from YN_R1_RETURN_RATE_IN_60_DAYS_2 ;
select * from wudna.cex_sandbox.yn_R1_return_rate_in_60_days_2;
select * from wudna.cex_sandbox.yn_R1_return_rate_in_60_days_1; 

grant select on yn_R1_return_rate_in_60_days_2 to public;--aggregated level 
grant select on yn_R1_return_rate_in_60_days_1 to public;--Customer level 
grant select on yn_R1_return_rate_in_60_days to public; 
grant select on txn_master_supplement_1 to public;

select * from yn_R1_return_rate_in_60_days_1 
where new_existing_flag='NEW' and sndcustomer_key='106001281' ;
select * from txn_master_supplement_1 where sndcustomer_key='106001281' order by RCVPAYING_DATETIME;

select * from yn_R1_return_rate_in_60_days_1 
where new_existing_flag='NEW' and r12_txn_freq_bucket='a) 1X';
select * from txn_master_supplement_1 where sndcustomer_key='106001281' order by RCVPAYING_DATETIME;

select region,country_name,mth_yr,new_existing_flag,r12_dominant_channel,flag_marketable,sum(r1_customers),sum(Retained_in_two_months)
from yn_R1_return_rate_in_60_days_2 group by 1,2,3,4,5,6 order by 1 desc ;

select region,country_name,mth_yr,new_existing_flag,r12_dominant_channel,flag_marketable,sum(r1_customers_for_60_days_retention),sum(Retained_in_two_months)
from VA_KPI_2020_OUTPUT_V group by 1,2,3,4,5,6 order by 1 desc ;

select count(distinct a.sndcustomer_key),count(distinct a.sndcustomer_key||a.pricing_channel),count(distinct b.sndcustomer_key)
from 
(select distinct sndcustomer_key,pricing_channel from txn_master_supplement_1 
 where date_trunc(month,RCVPAYING_DATETIME)='2021-10-01') a
left outer join 
(select distinct sndcustomer_key from txn_master_supplement_1 
 where RCVPAYING_DATETIME >='2021-11-01' and RCVPAYING_DATETIME < '2022-01-01') b on a.sndcustomer_key=b.sndcustomer_key
 ;
 */

SP_STMNT_43 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  yn_Va_kpi_2020_output_v as 
select a.*,b.country_name,b.super_region as region 
from YN_Va_kpi_2020_output_engagement a 
inner join  "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" b on a.country_code=b.country_code
// ------------code inserted for REGION filtering------------------------------------------
WHERE b.super_region IS NOT NULL AND b.super_region <> 'TESTING';
`}).execute();

/*
select distinct region from YN_VA_KPI_2020_OUTPUT_V ;

select mth_yr,sum(ACTIVE_CUSTOMERS_CONTACTED),sum(lapsing_customers_contacted),sum(lapsed_customers_contacted) 
from yn_Va_kpi_2020_output_v where country_name='SWEDEN' group by 1 order by 1 ;

select * from yn_Va_kpi_2020_output_v limit 100;*/

SP_STMNT_44 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE retention_base_backup as 
select * from retention_base;
`}).execute();

//------- code appended from Saif (R12_active_breakup, txn_freq_bucket, channel_v1 columns are calculated for PR12 period)

SP_STMNT_45 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  retention_base as 
select 
u.country_name,
u.super_region as region,
e.New_Existing_flag ,
--New_Existing_flag_Digi_team,
HVC_FLAG,
flag_addressable,
Flag_marketable ,
Email_Marketable,
SMS_Marketable,b.COUNTRY_CODE,
e.RETAIL_DIGITAL_FLAG,
e.WEB_APP_FLAG ,
--case 
--when e.r12_txns > 0 and rcvcountry_code in ('US','MX','PH','IN','CO','TR','MA','FR','RO','AR') then rcvcountry_code 
--when e.r12_txns > 0 then 'OTHERS' 
--else 'R12_INACTIVE' end dom_rcv_corridor,
case when e.r12_apn_txns > 0 then 'Y' else 'N' end APN_txn_atleast_once_in_R12,
case when e.r12_air_txns > 0 then 'Y' else 'N' end AIR_txn_atleast_once_in_R12,
add_months(a.mth_yr,12) as mth_yr,
case when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) then 'Y' else 'N' end membership_by_end_of_month,
case 
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date < add_months(a.mth_yr,1) and (REDEMPTION_CNT_TM = 0 or REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,

case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
e.R12_active_breakup,
a.txn_freq_bucket as R12_txn_freq_bucket,
c.channel_v1 as R12_Dominant_channel,
--over all
count(1) as PR12_Customers,
count(case when Flag_marketable='Y' and e.r12_txns > 0 then 1 end) as PR12_Marketable_Customers,
count(case when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and e.r12_txns > 0 then 1 end) as PR12_MYWU_Members,
count(case when MYWU_status in ('Member_Redeemer') and e.r12_txns > 0 then 1 end) as PR12_MYWU_Member_Redeemers,

// ----------------------------------------- New addition as suggested by Prasad (below 2 fields)
count(case when MYWU_status ='Non_Member' and e.r12_txns > 0 then 1 end) as PR12_MYWU_NON_Members,
count(case when MYWU_status ='Non_Member' and t.sndcustomer_key is not null then 1 end) as retained_MYWU_NON_Members,

count(t.sndcustomer_key) as Retained_Customers,
count(case when Flag_marketable='Y' and t.sndcustomer_key is not null then 1 end) as retained_Marketable_Customers,
count(case when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and t.sndcustomer_key is not null then 1 end) as retained_MYWU_Members,
count(case when MYWU_status in ('Member_Redeemer') and t.sndcustomer_key is not null then 1 end) as retained_MYWU_Member_Redeemers,

--Retail
count(case when e.r12_retail_txns > 0 then 1 end) as PR12_retail_Customers,
count(case when e.r12_retail_txns > 0 and Flag_marketable='Y' and e.r12_txns > 0 then 1 end) as PR12_retail_Marketable_Customers,
count(case when e.r12_retail_txns > 0 and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and e.r12_txns > 0 then 1 end) as PR12_retail_MYWU_Members,
count(case when e.r12_retail_txns > 0 and MYWU_status in ('Member_Redeemer') and e.r12_txns > 0 then 1 end) as PR12_retail_MYWU_Member_Redeemers,

count(case when e.r12_retail_txns > 0 and t.r12_retail_txns > 0 then t.sndcustomer_key end ) as retail_Retained_Customers,
count(case when e.r12_retail_txns > 0 and t.r12_retail_txns > 0 and Flag_marketable='Y' and t.sndcustomer_key is not null then 1 end) as retail_retained_Marketable_Customers,
count(case when e.r12_retail_txns > 0 and t.r12_retail_txns > 0 and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and t.sndcustomer_key is not null then 1 end) as retail_retained_MYWU_Members,
count(case when e.r12_retail_txns > 0 and t.r12_retail_txns > 0 and MYWU_status in ('Member_Redeemer') and t.sndcustomer_key is not null then 1 end) as retail_retained_MYWU_Member_Redeemers,

--digital
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 then 1 end) as PR12_digital_Customers,
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and Flag_marketable='Y' and e.r12_txns > 0 then 1 end) as PR12_digital_Marketable_Customers,
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and e.r12_txns > 0 then 1 end) as PR12_digital_MYWU_Members,
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and MYWU_status in ('Member_Redeemer') and e.r12_txns > 0 then 1 end) as PR12_digital_MYWU_Member_Redeemers,

count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and (t.R12_WEBSITE_TXNS + t.R12_APP_TXNS ) > 0 then t.sndcustomer_key end ) as digital_Retained_Customers,
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and (t.R12_WEBSITE_TXNS + t.R12_APP_TXNS ) > 0 and Flag_marketable='Y' and t.sndcustomer_key is not null then 1 end) as digital_retained_Marketable_Customers,
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and (t.R12_WEBSITE_TXNS + t.R12_APP_TXNS ) > 0 and MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and t.sndcustomer_key is not null then 1 end) as digital_retained_MYWU_Members,
count(case when (e.R12_WEBSITE_TXNS + e.R12_APP_TXNS ) > 0 and (t.R12_WEBSITE_TXNS + t.R12_APP_TXNS ) > 0 and MYWU_status in ('Member_Redeemer') and t.sndcustomer_key is not null then 1 end) as digital_retained_MYWU_Member_Redeemers


from 
YN_txn_freq_bucket   a 
left outer join (select distinct country_code,sndcustomer_key,hvc_flag,flag_addressable,flag_marketable,email_marketable,sms_marketable,
                 LOYALTY_MEMBER_FLAG,MEMBERSHIP_DATE from YN_cust_flags) b on  a.sndcustomer_key=b.sndcustomer_key  
left outer join YN_dominant_channel c on a.mth_yr=c.mth_yr and a.sndcustomer_key=c.sndcustomer_key 
left outer join YN_cust_level_flags_counts e on a.sndcustomer_key=e.sndcustomer_key and a.mth_yr=e.mth_yr 
left outer join YN_MONTHLY_PR12_REDEMPTIONS r on a.mth_yr=add_months(r.mth_yr,-12) and a.sndcustomer_key=r.CUSTOMER_KEY 
--left outer join YN_MONTHLY_REDEMPTIONS y on a.mth_yr=y.mth_yr and a.sndcustomer_key=y.card_number  
--left outer join YN_dominant_rcvcountry s on a.mth_yr=s.mth_yr and a.sndcustomer_key=s.sndcustomer_key 
left outer join (select * from YN_cust_level_flags_counts where r12_txns > 0 ) t on a.mth_yr=add_months(t.mth_yr,-12) and a.sndcustomer_key=t.sndcustomer_key 
// ----added condition here-------------------------------
inner join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW"  u on b.country_code=u.country_code
where a.mth_yr >= '2019-01-01' 
and u.super_region IS NOT NULL
--and a.mth_yr < add_months(sysdate(),-12)  
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;
`}).execute();

//select distinct region from retention_base ;
//select mth_yr,sum(retained_customers) from retention_base group by 1 order by mth_yr ;

//select * from YN_Va_kpi_2020_output_engagement order by mth_yr ;

SP_STMNT_46 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  YN_Va_kpi_2020_output_engagement_v as 
select a.* from yn_Va_kpi_2020_output_v a 
--union all
--select a.* from YN_VA_KPI_2020_OUTPUT_V_BACKUP_ON_14_4 a where mth_yr < '2021-02-01'
;`}).execute();

SP_STMNT_47 = snowflake.createStatement ({sqlText: `alter table YN_Va_kpi_2020_output_engagement_v drop column lt_pr12_cust;
`}).execute();
SP_STMNT_48 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_pr12_marketable;
`}).execute();
SP_STMNT_49 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_pr12_members;
`}).execute();
SP_STMNT_50 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_pr12_redeemers;
`}).execute();
SP_STMNT_51 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_retained_cust;
`}).execute();
SP_STMNT_52 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_retained_marketable;
`}).execute();
SP_STMNT_53 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_retained_members;
`}).execute();
SP_STMNT_54 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column lt_retained_redeemers;
`}).execute();
SP_STMNT_55 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column EXISTING_CUST_INACTIVE_IN_R1;
`}).execute();
SP_STMNT_56 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column NEW_CUST_INACTIVE_IN_R1;
`}).execute();
SP_STMNT_57 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column EXISTING_CUST_ACTIVE_IN_R1;
`}).execute();
SP_STMNT_58 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column NEW_CUST_ACTIVE_IN_R1;
`}).execute();
SP_STMNT_59 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column cust_WEB_to_APP_due_to_dco_v;
`}).execute();
SP_STMNT_60 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column Lapsing_Customers_Reactivated_within_7_Days_of_DCO_Communication;
`}).execute();
SP_STMNT_61 = snowflake.createStatement ({sqlText: `ALTER  table YN_Va_kpi_2020_output_engagement_v drop column Lapsed_Customers_Reactivated_within_7_Days_of_DCO_Communication;
`}).execute();

SP_STMNT_62 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  yn_output_retention as 
select a.*,b.* from 
(
select 
distinct 
country_name,
  region,
NEW_EXISTING_FLAG	,
HVC_FLAG	,
flag_addressable as FLAG_CONTACTABLE	,
FLAG_MARKETABLE	,
EMAIL_MARKETABLE	,
SMS_MARKETABLE	,
COUNTRY_CODE	,
RETAIL_DIGITAL_FLAG	,
WEB_APP_FLAG	,
APN_TXN_ATLEAST_ONCE_IN_R12	,
AIR_TXN_ATLEAST_ONCE_IN_R12	,
MEMBERSHIP_BY_END_OF_MONTH	,
MYWU_STATUS	,
CEM_SEGMENT	,
R12_ACTIVE_BREAKUP	,
R12_TXN_FREQ_BUCKET	,
R12_DOMINANT_CHANNEL	
from RETENTION_BASE 
union 
select 
distinct   
country_name,
region,
NEW_EXISTING_FLAG	,
HVC_FLAG	,
FLAG_CONTACTABLE	,
FLAG_MARKETABLE	,
EMAIL_MARKETABLE	,
SMS_MARKETABLE	,
COUNTRY_CODE	,
RETAIL_DIGITAL_FLAG	,
WEB_APP_FLAG	,
APN_TXN_ATLEAST_ONCE_IN_R12	,
AIR_TXN_ATLEAST_ONCE_IN_R12	,
MEMBERSHIP_BY_END_OF_MONTH	,
MYWU_STATUS	,
CEM_SEGMENT	,
R12_ACTIVE_BREAKUP	,
R12_TXN_FREQ_BUCKET	,
R12_DOMINANT_CHANNEL
  
from YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_V 
  union 
select 
distinct   
country_name,
region,
NEW_EXISTING_FLAG	,
HVC_FLAG	,
FLAG_CONTACTABLE	,
FLAG_MARKETABLE	,
EMAIL_MARKETABLE	,
SMS_MARKETABLE	,
COUNTRY_CODE	,
RETAIL_DIGITAL_FLAG	,
WEB_APP_FLAG	,
APN_TXN_ATLEAST_ONCE_IN_R12	,
AIR_TXN_ATLEAST_ONCE_IN_R12	,
MEMBERSHIP_BY_END_OF_MONTH	,
MYWU_STATUS	,
CEM_SEGMENT	,
R12_ACTIVE_BREAKUP	,
R12_TXN_FREQ_BUCKET	,
R12_DOMINANT_CHANNEL	

from YN_R1_RETURN_RATE_IN_60_DAYS_2) a ,
(select distinct  mth_yr from YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_V
union 
 select distinct mth_yr from RETENTION_BASE where mth_yr < date_trunc(month,sysdate())
) b 
;`}).execute();

//select distinct date_trunc(month,sysdate()) from RETENTION_BASE;

SP_STMNT_63 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE Va_kpi_2020_output_v_backup clone Va_kpi_2020_output_v;
`}).execute();

//select mth_yr,sum(r12_customers),sum(lt_pr12_cust),sum(LT_RETAINED_CUST) from Va_kpi_2020_output_v  group by 1 order by 1 desc;

SP_STMNT_64 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  Va_kpi_2020_output_v as 
select 
case when d.NEW_EXISTING_FLAG='R12_INACTIVE' then 	'R12_INACTIVE' else d.NEW_EXISTING_FLAG end NEW_EXISTING_FLAG,
d.	HVC_FLAG	,
d.	FLAG_CONTACTABLE	,
d.	FLAG_MARKETABLE	,
d.	EMAIL_MARKETABLE	,
d.	SMS_MARKETABLE	,
d.	COUNTRY_CODE	,
// -------name and region added here
d.  country_name,
d.  region ,
case when d.RETAIL_DIGITAL_FLAG='R12_INACTIVE' then 	'R12_INACTIVE' else d.RETAIL_DIGITAL_FLAG end RETAIL_DIGITAL_FLAG,
case when d.WEB_APP_FLAG='R12_INACTIVE' then 	'R12_INACTIVE' else d.WEB_APP_FLAG end WEB_APP_FLAG,
d.	APN_TXN_ATLEAST_ONCE_IN_R12	,
d.	AIR_TXN_ATLEAST_ONCE_IN_R12	,
d.	MEMBERSHIP_BY_END_OF_MONTH	,
d.	MYWU_STATUS	,
d.	CEM_SEGMENT	,
d.	R12_ACTIVE_BREAKUP	,
d.	R12_TXN_FREQ_BUCKET	,
d.	R12_DOMINANT_CHANNEL	,
d.	MTH_YR	,

R12_MARKETABLE_CUSTOMERS	,
R12_MYWU_MEMBERS	,
R12_MYWU_MEMBER_REDEEMERS	,
R1_MARKETABLE_CUSTOMERS	,
R1_MYWU_MEMBERS	,
R1_MYWU_MEMBER_REDEEMERS	,
R12_MARKETABLE_TXNS	,
R12_MYWU_MEMBERS_TXNS	,
R12_MYWU_MEMBER_REDEEMERS_TXNS	,
R12_CUSTOMERS_TENURE	,
R12_MARKETABLE_CUSTOMERS_TENURE	,
R12_MYWU_MEMBERS_TENURE	,
R12_MYWU_MEMBER_REDEEMERS_TENURE	,
R12_DIGI_DOMINANT_CUSTOMERS	,
R12_DIGI_DOMINANT_MARKETABLE_CUSTOMERS	,
R12_DIGI_DOMINANT_MYWU_MEMBERS	,
R12_DIGI_DOMINANT_MYWU_MEMBER_REDEEMERS	,
R12_APP_DOMINANT_CUSTOMERS	,
R12_APP_DOMINANT_MARKETABLE_CUSTOMERS	,
R12_APP_DOMINANT_MYWU_MEMBERS	,
R12_APP_DOMINANT_MYWU_MEMBER_REDEEMERS	,
R12_DIGITAL_NATIVE_CUSTOMERS	,
R12_DIGITAL_USER	,
R12_APP_NATIVE_CUSTOMERS	,
R12_APP_USER	,
R12_AIR_NATIVE_CUSTOMERS	,
R12_AIR_DOMINANT_CUSTOMERS	,
R12_AIR_USER	,
RETAIL_USED_ACCOUNT_PAY_IN	,
RETAIL_USED_ACCOUNT_PAY_OUT	,
// ------- CAR 262,265 -----
NEW_ENROLL_MENTS_R12	,
NEW_ENROLL_MENTS_R1	,
NEW_ENROLL_MENTS_R1_INACTIVE	,
NEW_ENROLL_MENTS_R12_R12INACTIVE	,
NEW_ENROLL_MENTS_R1_R12INACTIVE	,
// ------ Ends here ------
NEW_REDEEMERS_LIFE_TIME_IN_R12	,
NEW_REDEEMERS_LIFETIME_IN_R1	,
NEW_REDEEMERS_R12_IN_R12	,
NEW_REDEEMERS_R12_IN_R1	,
EXISTING_REDEEMERS_R12_IN_R12	,
EXISTING_REDEEMERS_R12_IN_R1	,
CEM_WINBACKS	,
CEM_WINBACKS_MARKETABLE_CUSTOMERS	,
CEM_WINBACKS_MYWU_MEMBERS	,
CEM_WINBACKS_MYWU_MEMBER_REDEEMERS	,
CHURNS	,
CHURNS_MARKETABLE_CUSTOMERS	,
CHURNS_MYWU_MEMBERS	,
CHURNS_MYWU_MEMBER_REDEEMERS	,
IPF	,
MARKETABLE_CUSTOMERS_IPF	,
MYWU_MEMBERS_IPF	,
MYWU_MEMBER_REDEEMERS_IPF	,
DAYS_SINCE_LAST_TXN	,
IPF_OVERDUE	,
MARKETABLE_CUSTOMERS_IPF_OVERDUE	,
MYWU_MEMBERS_IPF_OVERDUE	,
MYWU_MEMBER_REDEEMERS_IPF_OVERDUE	,
IPF_CUST	,
MARKETABLE_CUSTOMERS_IPF_CUST	,
MYWU_MEMBERS_IPF_CUST	,
MYWU_MEMBER_REDEEMERS_IPF_CUST	,
nvl(AHEAD_SCHEDULE_CUST,0)+nvl(ON_SCHEDULE_CUST,0) as ON_SCHEDULE_CUST	,
ONE_BEAT_LATE_CUST	,
TWO_BEAT_LATE_CUST	,
THREE_BEAT_LATE_CUST	,
FOUR_BEAT_LATE_CUST	,
FIVE_BEATS_PLUS_LATE_CUST	,
CHURNS_INSPITE_OF_CEM	,
R2D_ADOPTORS	,
R2D_ADOPTORS_MARKETABLE_CUSTOMERS	,
R2D_ADOPTORS_MYWU_MEMBERS	,
R2D_ADOPTORS_MYWU_MEMBER_REDEEMERS	,
R12_AIR_USERS	,
R12_AIR_MARKETABLE_CUSTOMERS	,
R12_AIR_MYWU_MEMBERS	,
R12_AIR_MYWU_MEMBER_REDEEMERS	,
POS_2_AIR_ADOPTORS	,
POS_2_AIR_ADOPTORS_MARKETABLE_CUSTOMERS	,
POS_2_AIR_ADOPTORS_MYWU_MEMBERS	,
POS_2_AIR_ADOPTORS_MYWU_MEMBER_REDEEMERS	,
CARD_OR_ACCOUNT_USERS_AT_POS	,
CARD_OR_ACCOUNT_USERS_AT_POS_MARKETABLE_CUSTOMERS	,
CARD_OR_ACCOUNT_USERS_AT_POS_MYWU_MEMBERS	,
CARD_OR_ACCOUNT_USERS_AT_POS_MYWU_MEMBER_REDEEMERS	,
CUST_POS_TO_WEB_OR_APP_V	,
CUST_POS_TO_WEB_OR_APP_DUE_TO_DCO_V	,
CUST_POS_TO_AIR_DUE_TO_DCO_V	,
CUST_WEB_TO_APP_V	,
CUST_WEB_TO_APP_DUE_TO_DCO_V	,
R12_EXISTING_AIR_USERS	,
R12_NEW_AIR_USERS	,
NEW_2_FRANCHISE_AIR	,
DIGITAL_2_AIR	,
RETAIL_2_AIR	,
RETAIL_AND_DIGITAL_2_AIR	,
FIRST_TIME_AIR_USERS	,
R12_ACTIVE_POS_ONLY	,
ONEX_TO_TWOX_AND_PLUS	,
ONEX_TO_TWOX_AND_PLUS_MARKETABLE_CUSTOMERS	,
ONEX_TO_TWOX_AND_PLUS_MYWU_MEMBERS	,
ONEX_TO_TWOX_AND_PLUS_MYWU_MEMBER_REDEEMERS	,
ONEX_TO_TWOX	,
ONEX_TO_TWOX_MARKETABLE_CUSTOMERS	,
ONEX_TO_TWOX_MYWU_MEMBERS	,
ONEX_TO_TWOX_MYWU_MEMBER_REDEEMERS	,
TWOX_TO_THREEX	,
TWOX_TO_THREEX_MARKETABLE_CUSTOMERS	,
TWOX_TO_THREEX_MYWU_MEMBERS	,
TWOX_TO_THREEX_MYWU_MEMBER_REDEEMERS	,
THREEX_TO_FOURX_AND_PLUS	,
THREEX_TO_FOURX_AND_PLUS_MARKETABLE_CUSTOMERS	,
THREEX_TO_FOURX_AND_PLUS_MYWU_MEMBERS	,
THREEX_TO_FOURX_AND_PLUS_MYWU_MEMBER_REDEEMERS	,
ONEX_TO_TWOX_AND_PLUS_DUE_TO_DCO	,
ONEX_TO_TWOX_DUE_TO_DCO	,
TWOX_TO_THREEX_DUE_TO_DCO	,
THREEX_TO_FOURX_AND_PLUS_DUE_TO_DCO	,
R36_CUSTOMERS	,
R24_CUSTOMERS	,
R12_CUSTOMERS	,
NEW_CUSTOMERS_R12_ACTIVE_BREAKUP	,
RETAINED_R12_ACTIVE_BREAKUP	,
WINBACKS_R12_ACTIVE_BREAKUP	,
MONTH_BEGINING_CUSTOMERS	,
NEW_CUSTOMERS	,
WINBACKS	,
CHURNING	,
MONTH_ENDING_CUSTOMERS	,
R12_NEW_CUSTOMERS	,
R12_EXISTING_CUSTOMERS	,
e.EXISTING_CUST_INACTIVE_IN_R1	,
e.NEW_CUST_INACTIVE_IN_R1	,
e.EXISTING_CUST_ACTIVE_IN_R1	,
e.NEW_CUST_ACTIVE_IN_R1	,
LAPSING_CUSTOMERS	,
LAPSED_CUSTOMERS	,
ACTIVE_AND_ADDRESSABLE_CUSTOMERS	,
LAPSING_AND_ADDRESSABLE_CUSTOMERS	,
LAPSED_AND_ADDRESSABLE_CUSTOMERS	,
// ------------- Code changes start for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
New_2_Retail_Customers,
New_2_Website_Customers,
New_2_App_Customers,
New_2_Digital_Customers,
New_2_Domestic_Customers,
New_2_International_Customers,
New_2_Payout_Cash_Customers,
New_2_Payout_Account_Customers,
New_2_Payin_Cash_Customers,
New_2_Payin_Account_Customers,
// ------------- Code changes end for CAR 428(New to Channel, Corridor, PayOut, PayIn) -------------------
R12_TXNS	,
R24_TXNS	,
R36_TXNS	,

// --------- #### R1,R12,PR12,PPR12 PRINCIPAL added here
R1_PRINCIPAL,
R12_PRINCIPAL,
PR12_PRINCIPAL,
PPR12_PRINCIPAL,

// --------- #### R1,R12,PR12,PPR12 FEE added here
R1_FEE,
R12_FEE,
PR12_FEE,
PPR12_FEE,

// --------- #### R1,R12,PR12,PPR12 NET_FX added here
R1_NET_FX,
R12_NET_FX,
PR12_NET_FX,
PPR12_NET_FX,


// ---------###### R1,PR12,PPR12 revenue added here
R1_REVENUE,
R12_REVENUE,
PR12_REVENUE,
PPR12_REVENUE,
// -------------------------------------------------------------
ACTIVE_CUSTOMERS_CONTACTED	,
LAPSING_CUSTOMERS_CONTACTED	,
LAPSED_CUSTOMERS_CONTACTED	,
ACTIVE_CUSTOMERS_BECOMING_INACTIVE_IN_R1	,
ACTIVE_CUSTOMERS_BECOMING_INACTIVE	,
INACTIVE_CUSTOMERS_ATTRITING	,
LAPSING_CUSTOMERS_REACTIVATED	,
ATTRITED_CUSTOMERS_REACTIVATED	,
LAPSING_CUSTOMERS_REACTIVATED_WITHIN_7_DAYS_OF_DCO_COMMUNICATION	,
LAPSED_CUSTOMERS_REACTIVATED_WITHIN_7_DAYS_OF_DCO_COMMUNICATION	,
PR12_TXNS	,
R1_TXNS	,
R2_TO_R13_TXNS	,
R14_TO_R25_TXNS	,
R26_TO_R37_TXNS	,
SR_RETAINED_CUST	,
SR_R2_TO_R13_CUST	,
R12_AIR_CUST	,
R12_RETAIL_CUST	,
R12_WEBSITE_CUST	,
R12_APP_CUST	,
R12_WUPLUS_CUST	,
R12_AIR_TXNS	,
R12_RETAIL_TXNS	,
R12_WEBSITE_TXNS	,
R12_APP_TXNS	,
R12_WUPLUS_TXNS	,
R1_AIR_CUST	,
R1_RETAIL_CUST	,
R1_WEBSITE_CUST	,
R1_APP_CUST	,
R1_WUPLUS_CUST	,
R2_TO_R13_AIR_CUST	,
R2_TO_R13_RETAIL_CUST	,
R2_TO_R13_WEBSITE_CUST	,
R2_TO_R13_APP_CUST	,
R2_TO_R13_WUPLUS_CUST	,
R1_AIR_TXNS	,
R1_RETAIL_TXNS	,
R1_WEBSITE_TXNS	,
R1_APP_TXNS	,
R1_WUPLUS_TXNS	,
R2_TO_R13_AIR_TXNS	,
R2_TO_R13_RETAIL_TXNS	,
R2_TO_R13_WEBSITE_TXNS	,
R2_TO_R13_APP_TXNS	,
R2_TO_R13_WUPLUS_TXNS	,
R12_APN_CUST	,
R12_APN_TXN	,
R12_APN_NON_APN_TXN	,
ACTIVE_AND_MARKETABLE_CUSTOMER_TXNS	,
ACTIVE_CUSTOMERS_CONTACTED_TXNS	,
R12_APN_ACTIVE_CUSTOMERS	,
LAPSING_APN_CUST	,
LAPSED_APN_CUST	,
R12_APN_MARKETABLE_ACTIVE_CUSTOMERS	,
LAPSING_APN_MARKETABLE	,
LAPSED_APN_MARKETABLE	,
R12_APN_MARKETABLE_APN_TXNS	,
R12_APN_MARKETABLE_APN_NON_APN_TXNS	,
R12_APN_CONTACTED_ACTIVE_CUSTOMERS	,
LAPSING_APN_CONTACTED	,
LAPSED_APN_CONTACTED	,
R12_APN_CONTACTED_APN_TXNS	,
R12_APN_CONTACTED_APN_NON_APN_TXNS	,
R12_AIR_ACTIVE_CUSTOMERS	,
LAPSING_AIR_CUST	,
LAPSED_AIR_CUST	,
R12_AIR_MARKETABLE_ACTIVE_CUSTOMERS	,
LAPSING_AIR_MARKETABLE	,
LAPSED_AIR_MARKETABLE	,
R12_AIR_MARKETABLE_AIR_TXNS	,
R12_AIR_MARKETABLE_AIR_NON_AIR_TXNS	,
R12_AIR_CONTACTED_ACTIVE_CUSTOMERS	,
LAPSING_AIR_CONTACTED	,
LAPSED_AIR_CONTACTED	,
R12_AIR_CONTACTED_AIR_TXNS	,
R12_AIR_CONTACTED_AIR_NON_AIR_TXNS	,
R12_AIR_NON_AIR_TXN	,
SR_R2_R13_CUST_POS	,
LR_CUST_POS_TO_WEB_OR_APP_V	,
LR_PR12_CUST_POS	,
NEW_EMAIL_OPTINS	,
NEW_SMS_OPTINS	,
NEW_EMAIL_OR_SMS_OPTINS	,
NEW_EMAIL_AND_SMS_OPTINS	,
NEW_EMAIL_OPTINS_R12	,
NEW_SMS_OPTINS_R12	,
NEW_EMAIL_OR_SMS_OPTINS_R12	,
NEW_EMAIL_AND_SMS_OPTINS_R12,
// ------------code inserted for optout------------------------------------------
NEW_EMAIL_OPTOUT	,
NEW_SMS_OPTOUT	,
NEW_EMAIL_OR_SMS_OPTOUT	,
NEW_EMAIL_AND_SMS_OPTOUT	,
NEW_EMAIL_OPTOUT_R12	,
NEW_SMS_OPTOUT_R12	,
NEW_EMAIL_OR_SMS_OPTOUT_R12	,
NEW_EMAIL_AND_SMS_OPTOUT_R12,
// ------------code ends for optout------------------------------------------
a.R1_CUSTOMERS	,
R12_MYWU_REDEEMERS	,

c.PR12_CUSTOMERS as lt_pr12_cust,
c.PR12_MARKETABLE_CUSTOMERS as lt_pr12_marketable,
c.PR12_MYWU_MEMBERS as lt_pr12_members,
c.PR12_MYWU_MEMBER_REDEEMERS as lt_pr12_redeemers,
c.RETAINED_CUSTOMERS as lt_retained_cust,
c.RETAINED_MARKETABLE_CUSTOMERS as lt_retained_marketable,
c.RETAINED_MYWU_MEMBERS as lt_retained_members,
c.RETAINED_MYWU_MEMBER_REDEEMERS as lt_retained_redeemers ,

// ----------- code added for above Prasad change in retention table----------------------------------------
c.PR12_MYWU_NON_Members as lt_pr12_non_members,
c.retained_MYWU_NON_Members as lt_retained_non_members,
// ----------------------------------------------------------------------------------------------------

c.PR12_retail_CUSTOMERS as lt_pr12_retail_cust,
c.PR12_retail_MARKETABLE_CUSTOMERS as lt_pr12_retail_marketable,
c.PR12_retail_MYWU_MEMBERS as lt_pr12_retail_members,
c.PR12_retail_MYWU_MEMBER_REDEEMERS as lt_pr12_retail_redeemers,
c.retail_RETAINED_CUSTOMERS as lt_retail_retained_cust,
c.retail_RETAINED_MARKETABLE_CUSTOMERS as lt_retail_retained_marketable,
c.retail_RETAINED_MYWU_MEMBERS as lt_retail_retained_members,
c.retail_RETAINED_MYWU_MEMBER_REDEEMERS as lt_retail_retained_redeemers ,


c.PR12_digital_CUSTOMERS as lt_pr12_digital_cust,
c.PR12_digital_MARKETABLE_CUSTOMERS as lt_pr12_digital_marketable,
c.PR12_digital_MYWU_MEMBERS as lt_pr12_digital_members,
c.PR12_digital_MYWU_MEMBER_REDEEMERS as lt_pr12_digital_redeemers,
c.digital_RETAINED_CUSTOMERS as lt_digital_retained_cust,
c.digital_RETAINED_MARKETABLE_CUSTOMERS as lt_digital_retained_marketable,
c.digital_RETAINED_MYWU_MEMBERS as lt_digital_retained_members,
c.digital_RETAINED_MYWU_MEMBER_REDEEMERS as lt_digital_retained_redeemers ,

--e.EXISTING_CUST_INACTIVE_IN_R1,
--e.NEW_CUST_INACTIVE_IN_R1,
--e.EXISTING_CUST_ACTIVE_IN_R1,
--e.NEW_CUST_ACTIVE_IN_R1,
f.r1_customers as r1_customers_for_60_days_retention,
f.RETAINED_IN_TWO_MONTHS,
f.RETAINED_TO_RETAIL_IN_TWO_MONTHS,
f.RETAINED_TO_WEBSITE_IN_TWO_MONTHS,
f.RETAINED_TO_APP_IN_TWO_MONTHS
from 
yn_output_retention d 
left outer join 
YN_Va_kpi_2020_output_engagement_v a  

on   
nvl(d.new_existing_flag ,'NA') =  nvl(a.new_existing_flag,'NA') and  
nvl(d.hvc_flag ,'NA') =  nvl(a.hvc_flag,'NA') and  
nvl(d.flag_contactable ,'NA') =  nvl(a.flag_contactable,'NA') and  
nvl(d.flag_marketable ,'NA') =  nvl(a.flag_marketable,'NA') and  
nvl(d.email_marketable ,'NA') =  nvl(a.email_marketable,'NA') and  
nvl(d.sms_marketable ,'NA') =  nvl(a.sms_marketable,'NA') and  
nvl(d.country_code ,'N/A') =  nvl(a.country_code,'N/A') and  
nvl(d.RETAIL_DIGITAL_FLAG ,'NA') =  nvl(a.RETAIL_DIGITAL_FLAG,'NA') and  
nvl(d.WEB_APP_FLAG ,'NA') =  nvl(a.WEB_APP_FLAG,'NA') and  
nvl(d.APN_TXN_ATLEAST_ONCE_IN_R12 ,'NA') =  nvl(a.APN_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
nvl(d.AIR_TXN_ATLEAST_ONCE_IN_R12 ,'NA') =  nvl(a.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
d.mth_yr = a.mth_yr and  
nvl(d.MEMBERSHIP_BY_END_OF_MONTH ,'NA') =  nvl(a.MEMBERSHIP_BY_END_OF_MONTH,'NA') and  
nvl(d.mywu_status ,'NA') =  nvl(a.mywu_status,'NA') and  
nvl(d.cem_segment ,'NA') =  nvl(a.cem_segment,'NA') and  
nvl(d.r12_active_breakup ,'NA') =  nvl(a.r12_active_breakup,'NA') and  
nvl(d.r12_txn_freq_bucket ,'NA') =  nvl(a.r12_txn_freq_bucket,'NA') and  
nvl(d.R12_DOMINANT_CHANNEL ,'NA') =  nvl(a.R12_DOMINANT_CHANNEL ,'NA') and 
nvl(d.country_name ,'N/A') =  nvl(a.country_name ,'N/A') and 
nvl(d.region ,'N/A') =  nvl(a.region ,'N/A') 

left  outer join 
RETENTION_BASE  c 
on   
nvl(d.new_existing_flag,'NA')=nvl(c.new_existing_flag,'NA') and  
nvl(d.hvc_flag,'NA')=nvl(c.hvc_flag,'NA') and  
nvl(d.flag_contactable,'NA')=nvl(c.flag_addressable,'NA') and  
nvl(d.flag_marketable,'NA')=nvl(c.flag_marketable,'NA') and  
nvl(d.email_marketable,'NA')=nvl(c.email_marketable,'NA') and  
nvl(d.sms_marketable,'NA')=nvl(c.sms_marketable,'NA') and  
d.country_code=c.country_code and  
nvl(d.RETAIL_DIGITAL_FLAG,'NA')=nvl(c.RETAIL_DIGITAL_FLAG,'NA') and  
nvl(d.WEB_APP_FLAG,'NA')=nvl(c.WEB_APP_FLAG,'NA') and  
nvl(d.APN_TXN_ATLEAST_ONCE_IN_R12,'NA')=nvl(c.APN_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
nvl(d.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA')=nvl(c.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
d.mth_yr=c.mth_yr and  
nvl(d.MEMBERSHIP_BY_END_OF_MONTH,'NA')=nvl(c.MEMBERSHIP_BY_END_OF_MONTH,'NA') and  
nvl(d.mywu_status,'NA')=nvl(c.mywu_status,'NA') and  
nvl(d.cem_segment,'NA')=nvl(c.cem_segment,'NA') and  
nvl(d.r12_active_breakup,'NA')=nvl(c.r12_active_breakup,'NA') and  
nvl(d.r12_txn_freq_bucket,'NA')=nvl(c.r12_txn_freq_bucket,'NA') and  
nvl(d.R12_DOMINANT_CHANNEL,'NA')=nvl(c.R12_DOMINANT_CHANNEL,'NA')  and 
nvl(d.country_name ,'N/A') =  nvl(c.country_name ,'N/A') and 
nvl(d.region ,'N/A') =  nvl(c.region ,'N/A') 

left  outer join 
YN_EXISTING_INACTIVE_IN_R2  e 
on   
nvl(d.new_existing_flag,'NA')=nvl(e.new_existing_flag,'NA') and  
nvl(d.hvc_flag,'NA')=nvl(e.hvc_flag,'NA') and  
nvl(d.flag_contactable,'NA')=nvl(e.flag_contactable,'NA') and  
nvl(d.flag_marketable,'NA')=nvl(e.flag_marketable,'NA') and  
nvl(d.email_marketable,'NA')=nvl(e.email_marketable,'NA') and  
nvl(d.sms_marketable,'NA')=nvl(e.sms_marketable,'NA') and  
d.country_code=e.country_code and  
nvl(d.RETAIL_DIGITAL_FLAG,'NA')=nvl(e.RETAIL_DIGITAL_FLAG,'NA') and  
nvl(d.WEB_APP_FLAG,'NA')=nvl(e.WEB_APP_FLAG,'NA') and  
nvl(d.APN_TXN_ATLEAST_ONCE_IN_R12,'NA')=nvl(e.APN_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
nvl(d.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA')=nvl(e.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
d.mth_yr=e.mth_yr and  
nvl(d.MEMBERSHIP_BY_END_OF_MONTH,'NA')=nvl(e.MEMBERSHIP_BY_END_OF_MONTH,'NA') and  
nvl(d.mywu_status,'NA')=nvl(e.mywu_status,'NA') and  
nvl(d.cem_segment,'NA')=nvl(e.cem_segment,'NA') and  
nvl(d.r12_active_breakup,'NA')=nvl(e.r12_active_breakup,'NA') and  
nvl(d.r12_txn_freq_bucket,'NA')=nvl(e.r12_txn_freq_bucket,'NA') and  
nvl(d.R12_DOMINANT_CHANNEL,'NA')=nvl(e.R12_DOMINANT_CHANNEL,'NA')  and 
nvl(d.country_name ,'N/A') =  nvl(e.country_name ,'N/A') and 
nvl(d.region ,'N/A') =  nvl(e.region ,'N/A') 

left  outer join 
YN_R1_RETURN_RATE_IN_60_DAYS_2  f 
on   
nvl(d.new_existing_flag,'NA')=nvl(f.new_existing_flag,'NA') and  
nvl(d.hvc_flag,'NA')=nvl(f.hvc_flag,'NA') and  
nvl(d.flag_contactable,'NA')=nvl(f.flag_contactable,'NA') and  
nvl(d.flag_marketable,'NA')=nvl(f.flag_marketable,'NA') and  
nvl(d.email_marketable,'NA')=nvl(f.email_marketable,'NA') and  
nvl(d.sms_marketable,'NA')=nvl(f.sms_marketable,'NA') and  
d.country_code=f.country_code and  
nvl(d.RETAIL_DIGITAL_FLAG,'NA')=nvl(f.RETAIL_DIGITAL_FLAG,'NA') and  
nvl(d.WEB_APP_FLAG,'NA')=nvl(f.WEB_APP_FLAG,'NA') and  
nvl(d.APN_TXN_ATLEAST_ONCE_IN_R12,'NA')=nvl(f.APN_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
nvl(d.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA')=nvl(f.AIR_TXN_ATLEAST_ONCE_IN_R12,'NA') and  
d.mth_yr=f.mth_yr and  
nvl(d.MEMBERSHIP_BY_END_OF_MONTH,'NA')=nvl(f.MEMBERSHIP_BY_END_OF_MONTH,'NA') and  
nvl(d.mywu_status,'NA')=nvl(f.mywu_status,'NA') and  
nvl(d.cem_segment,'NA')=nvl(f.cem_segment,'NA') and  
nvl(d.r12_active_breakup,'NA')=nvl(f.r12_active_breakup,'NA') and  
nvl(d.r12_txn_freq_bucket,'NA')=nvl(f.r12_txn_freq_bucket,'NA') and  
nvl(d.R12_DOMINANT_CHANNEL,'NA')=nvl(f.R12_DOMINANT_CHANNEL,'NA')  and 
nvl(d.country_name ,'N/A') =  nvl(f.country_name ,'N/A') and 
nvl(d.region ,'N/A') =  nvl(f.region ,'N/A') 
// ---- inserted filter for REGION--------
WHERE d.REGION IS NOT NULL OR d.REGION <> 'TESTING';
`}).execute();

/*
SELECT DISTINCT REGION,COUNTRY_CODE,COUNTRY_NAME FROM Va_kpi_2020_output_v order by region;

grant select on Va_kpi_2020_output_v to public;

----------OPTINS VALIDATIONS------------------------------------------------------------------
SELECT REGION,MTH_YR,NEW_EMAIL_OPTINS,NEW_SMS_OPTINS,NEW_EMAIL_OR_SMS_OPTINS
FROM "WUDNA"."CEX_SANDBOX"."VA_KPI_2020_OUTPUT_V"
ORDER BY MTH_YR DESC;
*/

/*
select 
mth_yr,
RETAIL_DIGITAL_FLAG,
MYWU_STATUS,
sum(lt_retained_cust) as lt_retained_cust,sum(lt_pr12_cust) as lt_pr12_cust,
sum(lt_retained_Marketable) as lt_retained_Marketable,sum(lt_pr12_Marketable) as lt_pr12_Marketable,
sum(lt_retained_members) as lt_retained_members,sum(lt_PR12_Members) as lt_PR12_Members,
sum(lt_retained_Redeemers) as lt_retained_Redeemers,sum(lt_PR12_Redeemers) as lt_PR12_Redeemers,

sum(lt_retail_retained_cust) as lt_retail_retained_cust,sum(lt_pr12_retail_cust) as lt_pr12_retail_cust,
sum(lt_retail_retained_Marketable) as lt_retail_retained_Marketable,sum(lt_pr12_retail_Marketable) as lt_pr12_retail_Marketable,
sum(lt_retail_retained_members) as lt_retail_retained_members,sum(lt_PR12_retail_Members) as lt_PR12_retail_Members,
sum(lt_retail_retained_Redeemers) as lt_retail_retained_Redeemers,sum(lt_PR12_retail_Redeemers) as lt_PR12_retail_Redeemers,

sum(lt_digital_retained_cust) as lt_digital_retained_cust,sum(lt_pr12_digital_cust) as lt_pr12_digital_cust,
sum(lt_digital_retained_Marketable) as lt_digital_retained_Marketable,sum(lt_pr12_digital_Marketable) as lt_pr12_digital_Marketable,
sum(lt_digital_retained_members) as lt_digital_retained_members,sum(lt_PR12_digital_Members) as lt_PR12_digital_Members,
sum(lt_digital_retained_Redeemers) as lt_digital_retained_Redeemers,sum(lt_PR12_digital_Redeemers) as lt_PR12_digital_Redeemers,

sum(R12_CUSTOMERS_TENURE) as R12_CUSTOMERS_TENURE,
sum(R12_MARKETABLE_CUSTOMERS_TENURE) as R12_MARKETABLE_CUSTOMERS_TENURE,
sum(R12_MYWU_MEMBERS_TENURE) as R12_MYWU_MEMBERS_TENURE,
sum(R12_MYWU_MEMBER_REDEEMERS_TENURE) as R12_MYWU_MEMBER_REDEEMERS_TENURE,
sum(R12_customers) as r12_customers,
sum(R12_marketable_customers) as R12_marketable_customers,
sum(R12_MYWU_MEMBERS) as R12_MYWU_MEMBERS,
sum(R12_MYWU_MEMBER_REDEEMERS) as R12_MYWU_MEMBER_REDEEMERS
from "WUDNA"."CEX_SANDBOX"."VA_KPI_2020_OUTPUT_V"  group by 1,2,3 order by 1 desc ;
*/ 

//--=================================================
//--====POST Migration 
//--===================================================

SP_STMNT_65 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  r2d_post as 
select
s.country_name,
case 
when s.super_region='NORTH AMERICA' then 'a '||s.super_region 
when s.super_region='EU and CIS' then 'b '||s.super_region 
when s.super_region='MEPA' then 'c '||s.super_region 
when s.super_region='APAC' then 'd '||s.super_region 
when s.super_region='LACA' then 'e '||s.super_region 
// --------------------------ADDED region HERE-------------------
when s.super_region='AFRICA' then 'f '||s.super_region 
end as region,
Flag_marketable ,
case when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME then 'Y' else 'N' end membership_as_of_digitization_date,
case 
when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME and r.REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME and (r.REDEMPTION_CNT_TM = 0 or r.REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,
case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
due_to_dco as Marketing_Communication_Received_in_30_days_prior_to_Digitizatin_Date ,
Month_of_Digitization,
date_trunc(month,b.RCVPAYING_DATETIME) as Month_of_txn,
count(distinct b.sndcustomer_key) as customers,
count(distinct case when b.channel_v = 'Retail' then b.sndcustomer_key end) as retail_customers,
count(distinct case when b.channel_v = 'Web' then b.sndcustomer_key end) as digital_customers,

count(distinct b.txn_id) as txns,
count(distinct case when b.channel_v = 'Retail' then b.txn_id end) as retail_txns,
count(distinct case when b.channel_v = 'Web' then b.txn_id end) as digital_txns,

sum(b.SNDPRINCIPAL_USD) as principal,
sum(case when b.channel_v = 'Retail' then b.SNDPRINCIPAL_USD end) as retail_principal,
sum(case when b.channel_v = 'Web' then b.SNDPRINCIPAL_USD end) as digital_principal,

sum(nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0)) as revenue,
sum(case when b.channel_v = 'Retail' then nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0) end) as retail_revenue,
sum(case when b.channel_v = 'Web' then nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0) end) as digital_revenue
from R2D_Monthly a 
left outer join txn_master_supplement_1 b on a.sndcustomer_key=b.sndcustomer_key and b.RCVPAYING_DATETIME >= MONTH_OF_DIGITIZATION
left outer join 
(select distinct country_code,sndcustomer_key,hvc_flag,flag_addressable,flag_marketable,email_marketable,sms_marketable,
                 LOYALTY_MEMBER_FLAG,MEMBERSHIP_DATE from YN_cust_flags) e on a.sndcustomer_key=e.sndcustomer_key 
--left outer join cust_membership_date f on a.sndcustomer_key=f.customer_key 
left outer join YN_MONTHLY_R12_REDEMPTIONS r on MONTH_OF_DIGITIZATION=r.mth_yr and a.sndcustomer_key=r.CUSTOMER_KEY
left outer join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" s on e.country_code = s.country_code 
// ----------------------- filter for region added here-------------------------------------------------------------------------------
WHERE s.super_region IS NOT NULL OR s.super_region <> 'TESTING'
group by 1,2,3,4,5,6,7,8,9;
`}).execute();

//select distinct region from r2d_post;

//SELECT * FROM R2D_POST WHERE REGION IS NULL OR REGION = 'TESTING' ;

//select month_of_txn,sum(digital_revenue),sum(retail_revenue) from r2d_post where MONTH_OF_DIGITIZATION >= '2021-01-01' group by 1 order by 1 desc ;
//select month_of_txn,sum(digital_revenue),sum(retail_revenue) from winback_post where MONTH_OF_DIGITIZATION >= '2021-01-01' group by 1 order by 1 desc ;
//select month_of_txn,sum(digital_revenue),sum(retail_revenue) from ONEX_TO_TWOX_POST where MONTH_OF_DIGITIZATION >= '2021-01-01' group by 1 order by 1 desc ;

SP_STMNT_66 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  winback_post as 
select
s.country_name,
case 
when s.super_region='NORTH AMERICA' then 'a '||s.super_region 
when s.super_region='EU and CIS' then 'b '||s.super_region 
when s.super_region='MEPA' then 'c '||s.super_region 
when s.super_region='APAC' then 'd '||s.super_region 
when s.super_region='LACA' then 'e '||s.super_region 
// --------------------------ADDED region HERE-------------------
when s.super_region='AFRICA' then 'f '||s.super_region 
end as region,
Flag_marketable ,
case when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME then 'Y' else 'N' end membership_as_of_digitization_date,
case 
when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME and r.REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME and (r.REDEMPTION_CNT_TM = 0 or r.REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,
case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
due_to_dco as Marketing_Communication_Received_in_30_days_prior_to_Digitizatin_Date ,
 Month_of_Digitization,
date_trunc(month,b.RCVPAYING_DATETIME) as Month_of_txn,
count(distinct b.sndcustomer_key) as customers,
count(distinct case when b.channel_v = 'Retail' then b.sndcustomer_key end) as retail_customers,
count(distinct case when b.channel_v = 'Web' then b.sndcustomer_key end) as digital_customers,

count(distinct b.txn_id) as txns,

count(distinct case when b.channel_v = 'Retail' then b.txn_id end) as retail_txns,
count(distinct case when b.channel_v = 'Web' then b.txn_id end) as digital_txns,

sum(b.SNDPRINCIPAL_USD) as principal,
sum(case when b.channel_v = 'Retail' then b.SNDPRINCIPAL_USD end) as retail_principal,
sum(case when b.channel_v = 'Web' then b.SNDPRINCIPAL_USD end) as digital_principal,

sum(nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0)) as revenue,
sum(case when b.channel_v = 'Retail' then nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0) end) as retail_revenue,
sum(case when b.channel_v = 'Web' then nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0) end) as digital_revenue
from winbacks_monthly a 
left outer join txn_master_supplement_1 b on a.sndcustomer_key=b.sndcustomer_key and b.RCVPAYING_DATETIME >= Month_of_Digitization
left outer join 
(select distinct country_code,sndcustomer_key,hvc_flag,flag_addressable,flag_marketable,email_marketable,sms_marketable,
                 LOYALTY_MEMBER_FLAG,MEMBERSHIP_DATE from YN_cust_flags) e on a.sndcustomer_key=e.sndcustomer_key 
--left outer join cust_membership_date f on a.sndcustomer_key=f.customer_key 
left outer join YN_MONTHLY_R12_REDEMPTIONS r on Month_of_Digitization=r.mth_yr and a.sndcustomer_key=r.CUSTOMER_KEY
left outer join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" s on e.country_code=s.country_code 
// -------------------------------------- filter for region added here-------------------------------------------------------
WHERE s.super_region IS NOT NULL OR s.super_region <> 'TESTING'
group by 1,2,3,4,5,6,7,8,9;
`}).execute();

//select distinct region from winback_post;
//SELECT * FROM WINBACK_POST WHERE REGION IS NULL OR REGION ='TESTING';

SP_STMNT_67 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE TABLE  ONEX_TO_TWOX_POST as 
select
s.country_name,
case 
when s.super_region='NORTH AMERICA' then 'a '||s.super_region 
when s.super_region='EU and CIS' then 'b '||s.super_region 
when s.super_region='MEPA' then 'c '||s.super_region 
when s.super_region='APAC' then 'd '||s.super_region 
when s.super_region='LACA' then 'e '||s.super_region 
// -------------------------ADDED region HERE-------------------
when s.super_region='AFRICA' then 'f '||s.super_region 
end as region,
Flag_marketable ,
case when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME then 'Y' else 'N' end membership_as_of_digitization_date,
case 
when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME and r.REDEMPTION_CNT_TM > 0 then 'Member_Redeemer'
when loyalty_member_flag ='Y' and membership_date <= a.RCVPAYING_DATETIME and (r.REDEMPTION_CNT_TM = 0 or r.REDEMPTION_CNT_TM  is null ) then 'Member_Non_Redeemer'
else 'Non_Member' end MYWU_status,
case 
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='Y' then 'MARKETABLE_&_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='Y' then 'MARKETABLE_BUT_NOT_MYWU_MEMBER'
when MYWU_status in ('Member_Redeemer','Member_Non_Redeemer') and flag_marketable='N' then 'NOT_MARKETABLE_BUT_MYWU_MEMBER'
when MYWU_status in ('Non_Member') and flag_marketable='N' then 'NEITHER_MARKETABLE_NOR_MYWU_MEMBER'
end as CEM_SEGMENT,
due_to_dco as Marketing_Communication_Received_in_30_days_prior_to_Digitizatin_Date ,
 Month_of_Digitization,
date_trunc(month,b.RCVPAYING_DATETIME) as Month_of_txn,
count(distinct b.sndcustomer_key) as customers,
count(distinct case when b.channel_v = 'Retail' then b.sndcustomer_key end) as retail_customers,
count(distinct case when b.channel_v = 'Web' then b.sndcustomer_key end) as digital_customers,

count(distinct b.txn_id) as txns,
count(distinct case when b.channel_v = 'Retail' then b.txn_id end) as retail_txns,
count(distinct case when b.channel_v = 'Web' then b.txn_id end) as digital_txns,

sum(b.SNDPRINCIPAL_USD) as principal,
sum(case when b.channel_v = 'Retail' then b.SNDPRINCIPAL_USD end) as retail_principal,
sum(case when b.channel_v = 'Web' then b.SNDPRINCIPAL_USD end) as digital_principal,

sum(nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0)) as revenue,
sum(case when b.channel_v = 'Retail' then nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0) end) as retail_revenue,
sum(case when b.channel_v = 'Web' then nvl(total_charges_usd,0)+nvl(net_foreign_exchange,0) end) as digital_revenue
from one_x_to_2X_and_plus_monthly a 
left outer join txn_master_supplement_1 b on a.sndcustomer_key=b.sndcustomer_key and b.RCVPAYING_DATETIME >= Month_of_Digitization
left outer join 
(select distinct country_code,sndcustomer_key,hvc_flag,flag_addressable,flag_marketable,email_marketable,sms_marketable,
                 LOYALTY_MEMBER_FLAG,MEMBERSHIP_DATE from YN_cust_flags) e on a.sndcustomer_key=e.sndcustomer_key 
--left outer join cust_membership_date f on a.sndcustomer_key=f.customer_key 
left outer join YN_MONTHLY_R12_REDEMPTIONS r on Month_of_Digitization=r.mth_yr and a.sndcustomer_key=r.CUSTOMER_KEY
left outer join "WUDNA"."SUMMARY_GEN"."COUNTRY_VW" s on e.country_code=s.country_code 
// --------------------filter for region added here---------------------------------------------
WHERE s.super_region IS NOT NULL OR s.super_region <> 'TESTING'
group by 1,2,3,4,5,6,7,8,9;
`}).execute();

//select distinct region from ONEX_TO_TWOX_POST ;

//SELECT * FROM ONEX_TO_TWOX_POST WHERE REGION IS NULL OR REGION ='TESTING';

SP_STMNT_68 = snowflake.createStatement ({sqlText: `CREATE OR REPLACE table monthly_va_kpi_2020_output_v_SCORE as 
select 
COUNTRY_NAME, 
REGION, 
FLAG_CONTACTABLE,
FLAG_MARKETABLE,
SMS_MARKETABLE,
EMAIL_MARKETABLE,
R12_DOMINANT_CHANNEL,
RETAIL_DIGITAL_FLAG,
MYWU_STATUS,
CEM_SEGMENT,
NEW_EXISTING_FLAG,
R12_TXN_FREQ_BUCKET,
AIR_TXN_ATLEAST_ONCE_IN_R12,
mth_yr,
LT_RETAIL_RETAINED_CUST AS RETAIL_RETAINED ,
LT_PR12_RETAIL_CUST AS RETAIL_PR12, 
LT_RETAIL_RETAINED_MARKETABLE AS RETAIL_MARKETABLE,
LT_PR12_RETAIL_MARKETABLE AS RETAIL_MARKETABLE_PR12,
LT_RETAIL_RETAINED_MEMBERS AS RETAIL_MEMBERS, 
LT_PR12_RETAIL_MEMBERS AS RETAIL_MEMBERS_PR12, 
LT_RETAIL_RETAINED_REDEEMERS AS RETAIL_REDEEMER,
LT_PR12_RETAIL_REDEEMERS AS RETAIL_REDEEMERS_PR12,
LT_DIGITAL_RETAINED_CUST AS DIGITAL_RETAINED ,
LT_PR12_DIGITAL_CUST AS DIGITAL_PR12, 
LT_DIGITAL_RETAINED_MARKETABLE AS DIGITAL_MARKETABLE,
LT_PR12_DIGITAL_MARKETABLE AS DIGITAL_MARKETABLE_PR12,
LT_DIGITAL_RETAINED_MEMBERS AS DIGITAL_MEMBERS,
LT_PR12_DIGITAL_MEMBERS AS DIGITAL_MEMBERS_PR12,
LT_DIGITAL_RETAINED_REDEEMERS AS DIGITAL_REDEEMER,
LT_PR12_DIGITAL_REDEEMERS AS DIGITAL_REDEEMERS_PR12
from va_KPI_2020_output_v 
// ---------CODE INSERTED HERE--------------------------------------------------------------------------------------
where region is not null OR region <> 'TESTING'  ;
`}).execute();

// CAR 710 adding dominant corridor and dominant agent tables below 

// below has been created as a single table for all Dominancy Metrics CAR-871 Saif @

SP_STMNT_68_001 = snowflake.createStatement ({sqlText: `create or replace table SK_DOMINANCY_METRICS AS
WITH SK_DOMINANT_AGENT_NETWORK as 
(SELECT
      A.sndcustomer_key, a.mth_yr, DOMINANT_AGENT_NUMBER,
      COMPANY_BRAND DOMINANT_AGENT_COMPANY_BRAND, CITY DOMINANT_AGENT_CITY, STATE DOMINANT_AGENT_STATE, 
      REGION DOMINANT_AGENT_REGION, SUPER_REGION DOMINANT_AGENT_SUPER_REGION, DMA_CODE DOMINANT_AGENT_DMA_CODE, 
      DMA_DESC DOMINANT_AGENT_DMA_DESC, ZIP_CODE DOMINANT_AGENT_ZIP_CODE, BUSINESS_NAME DOMINANT_AGENT_BUSINESS_NAME, 
	  CLASS_OF_TRADE_CODE DOMINANT_AGENT_CLASS_OF_TRADE_CODE, NETWORK_DESC DOMINANT_AGENT_NETWORK_DESC,AGENT_NETWORK as DOMINANT_AGENT_NETWORK, 
      NETWORK_NAME DOMINANT_AGENT_NETWORK_NAME,
      case when country_code in ('US','CA') then NVL(NETWORK_NAME ,BUSINESS_NAME) 
           else NVL(NETWORK_DESC, BUSINESS_NAME)  end DOMINANT_AGENT_NETWORK_2
          
 FROM
  (
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
      A.SNDAGENT_NUMBER AS DOMINANT_AGENT_NUMBER,
      ROW_NUMBER() OVER (PARTITION BY A.sndcustomer_key,a.mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP
    FROM   
  (
    select d.sndcustomer_key,
      d.mth_yr,
    d.RCVPAYING_DATETIME,
      d.SNDAGENT_NUMBER   
    from cex_sandbox.YN_va_kpi_2020_3 d
	inner join YN_dominant_channel e on d.mth_yr=e.mth_yr and d.sndcustomer_key=e.sndcustomer_key
	where R12_flag = 'Y' 
	and channel_v1 = 'RETAIL')  A
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr,
      A.SNDAGENT_NUMBER
    ) A
    INNER JOIN SUMMARY_GEN.AGENT_SUMMARY_VW B
    ON A.DOMINANT_AGENT_NUMBER=B.AGENT_NUMBER
WHERE A.TOP=1
union
	select CEM.sndcustomer_key,mth_yr,'NA' as DOMINANT_AGENT_NUMBER, 'NA' as DOMINANT_AGENT_COMPANY_BRAND,
	'NA' as DOMINANT_AGENT_CITY, 'NA' as DOMINANT_AGENT_STATE, 'NA' as DOMINANT_AGENT_REGION, 'NA' as DOMINANT_AGENT_SUPER_REGION,
	GEO.DMA_CODE as DOMINANT_AGENT_DMA_CODE, GEO.DMA as DOMINANT_AGENT_DMA_DESC, 'NA' as DOMINANT_AGENT_ZIP_CODE, 'NA' as DOMINANT_AGENT_BUSINESS_NAME,
	'NA' as DOMINANT_AGENT_CLASS_OF_TRADE_CODE, 'NA' as DOMINANT_AGENT_NETWORK_DESC, 'NA' as DOMINANT_AGENT_NETWORK, 'NA' as DOMINANT_AGENT_NETWORK_NAME,
	'NA' as DOMINANT_AGENT_NETWORK_2
	from YN_VA_KPI_2020_OUTPUT_ENGAGEMENT_CUST_LEVEL CEM
	left join ( SELECT
                CUSTOMER_KEY,
                NVL(ZIP.DMA_CODE,'N/A') AS DMA_CODE,
                NVL(DMA_DESC,'Customer DMA Not Available') AS DMA         
                FROM SUMMARY_GEN.WUDNA_CUSTOMER_MASTER_VW CM 
                LEFT JOIN SUMMARY_GEN.DMA_ZIPCODE_VW ZIP ON CM.ZIP_POSTAL_CODE = ZIP.ZIP_CODE
                LEFT JOIN SUMMARY_GEN.DMA_VW DMA ON ZIP.DMA_CODE = DMA.DMA_CODE) GEO ON CEM.SNDCUSTOMER_KEY = GEO.CUSTOMER_KEY
	where CEM.channel_v1 in ('APP','WEBSITE')    //Pandit
),

SK_DOMINANT_ATTRBUTE_FUNDS_IN as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 SUB_PAYIN_TYPE DOMINANT_ATTRBUTE_FUNDS_IN, --GID
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),

SK_DOMINANT_ATTRBUTE_FUNDS_OUT as
(
SELECT * FROM             //Pandit
 (SELECT
 sndcustomer_key,                    
 mth_yr,
 SUB_PAYOUT_TYPE DOMINANT_ATTRBUTE_FUNDS_OUT,--GID
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),


SK_DOMINANT_RECEIVE_AGENT_NETWORK as 
(SELECT
      A.sndcustomer_key, a.mth_yr, DOMINANT_RCVAGENT_NUMBER,
      COMPANY_BRAND DOMINANT_RCVAGENT_COMPANY_BRAND, CITY DOMINANT_RCVAGENT_CITY, STATE DOMINANT_RCVAGENT_STATE, 
      REGION DOMINANT_RCVAGENT_REGION, SUPER_REGION DOMINANT_RCVAGENT_SUPER_REGION, DMA_CODE DOMINANT_RCVAGENT_DMA_CODE, 
      DMA_DESC DOMINANT_RCVAGENT_DMA_DESC, ZIP_CODE DOMINANT_RCVAGENT_ZIP_CODE, BUSINESS_NAME DOMINANT_RCVAGENT_BUSINESS_NAME, 
	  CLASS_OF_TRADE_CODE DOMINANT_RCVAGENT_CLASS_OF_TRADE_CODE, NETWORK_DESC DOMINANT_RCVAGENT_NETWORK_DESC,AGENT_NETWORK as DOMINANT_RCVAGENT_NETWORK, 
      NETWORK_NAME DOMINANT_RCVAGENT_NETWORK_NAME,
      case when country_code in ('US','CA') then NVL(NETWORK_NAME ,BUSINESS_NAME) 
           else NVL(NETWORK_DESC, BUSINESS_NAME)  end DOMINANT_RCVAGENT_NETWORK_2
          
 FROM
  (
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
      A.RCVAGENT_NUMBER AS DOMINANT_RCVAGENT_NUMBER,
      ROW_NUMBER() OVER (PARTITION BY A.sndcustomer_key,a.mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP
    FROM   
  (
    select d.sndcustomer_key,
      d.mth_yr,
    d.RCVPAYING_DATETIME,
      d.RCVAGENT_NUMBER   
    from cex_sandbox.YN_va_kpi_2020_3 d
	inner join SK_DOMINANT_ATTRBUTE_FUNDS_OUT e on d.mth_yr=e.mth_yr and d.sndcustomer_key=e.sndcustomer_key
	where R12_flag = 'Y' 
	and UPPER(DOMINANT_ATTRBUTE_FUNDS_OUT) = 'CASH')  A
    GROUP BY
      A.sndcustomer_key,
      a.mth_yr,
      A.RCVAGENT_NUMBER
    ) A
    INNER JOIN SUMMARY_GEN.AGENT_SUMMARY_VW B
    ON A.DOMINANT_RCVAGENT_NUMBER=B.AGENT_NUMBER
WHERE A.TOP=1
),

SK_DOMINANT_CORRIDOR as 
(SELECT
  A.*
FROM
  (
    SELECT
      A.sndcustomer_key,
      a.mth_yr,
      A.SNDCOUNTRY_CODE DOMINANT_SNDCOUNTRY_CODE, A.RCVCOUNTRY_CODE DOMINANT_RCVCOUNTRY_CODE,
      A.CORRIDOR DOMINANT_CORRIDOR,
      A.CORRIDOR_TYPE DOMINANT_CORRIDOR_TYPE,
	  A.CORRIDOR_NAME DOMINANT_CORRIDOR_NAME,
	  A.SEND_COUNTRY_NAME DOMINANT_SNDCOUNTRY_NAME, A.RCV_COUNTRY_NAME DOMINANT_RCVCOUNTRY_NAME,
      ROW_NUMBER() OVER (PARTITION BY A.sndcustomer_key,a.mth_yr ORDER BY COUNT(1) DESC,MAX(RECORD_DATETIME) DESC) TOP
    FROM  
  (
        select a.*,
  A.SNDCOUNTRY_CODE||'-'||A.RCVCOUNTRY_CODE AS CORRIDOR,
  A.SEND_COUNTRY_NAME||'('||A.SNDCOUNTRY_CODE||') -'|| A.RCV_COUNTRY_NAME||'('||A.RCVCOUNTRY_CODE||')' AS CORRIDOR_NAME,
   CASE WHEN A.SNDCOUNTRY_CODE=A.RCVCOUNTRY_CODE THEN 'DOMESTIC'
         WHEN A.SNDCOUNTRY_CODE<>A.RCVCOUNTRY_CODE THEN 'INTERNATIONAL'
    END AS CORRIDOR_TYPE
    
  from cex_sandbox.YN_va_kpi_2020_3 A
	where R12_flag = 'Y' )  A
    GROUP BY
      1,2,3,4,5,6,7,8,9
    ) A
WHERE A.TOP=1
),

SK_DOMINANT_PAYIN_METHOD as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 PAYIN_TYPE DOMINANT_PAY_IN_METHOD,
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),

SK_DOMINANT_PAYOUT_METHOD as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 PAYOUT_TYPE DOMINANT_PAYOUT_METHOD,
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),

SK_DOMINANT_COMPANY_BRAND as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 COMPANY_BRAND DOMINANT_COMPANY_BRAND,
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),

SK_DOMINANT_CURRENCY_PAIR as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 SNDCURRENCY_CODE || '-' || RCVCURRENCY_CODE DOMINANT_CURRENCY_PAIR,
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),

SK_DOMINANT_PRINCIPAL_BAND as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 case when sndprincipal_usd > 0 and sndprincipal_usd< 11 then '1-10'
    when sndprincipal_usd > 10 and sndprincipal_usd< 51 then '11-50'
    when sndprincipal_usd > 50 and sndprincipal_usd < 101 then '51-100'
    when sndprincipal_usd >100  and sndprincipal_usd< 201 then '101-200'
    when sndprincipal_usd >200  and sndprincipal_usd< 301 then '201-300'
    when sndprincipal_usd >300  and sndprincipal_usd< 501 then '301-500'
    when sndprincipal_usd >500  and sndprincipal_usd< 1001 then '501-1000'
    when sndprincipal_usd >1000  and sndprincipal_usd< 2001 then '1001-2000'
    when sndprincipal_usd >2000  and sndprincipal_usd< 5001 then '2001-5000'
    when sndprincipal_usd >5000  and sndprincipal_usd< 10001 then '5001-10000'
    when sndprincipal_usd >10000  and sndprincipal_usd< 15001 then '10001-15000'
    when sndprincipal_usd >15000  and sndprincipal_usd< 20001 then '15001-20000'
    when sndprincipal_usd >20000  and sndprincipal_usd< 25001 then '20001-25000'
    when sndprincipal_usd >25000  and sndprincipal_usd< 50001 then '25001-50000' end as DOMINANT_PRINCIPAL_BAND,
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
),

SK_DOMINANT_PRICING_CHANNEL as
(
SELECT * FROM
 (SELECT
 sndcustomer_key,
 mth_yr,
 PRICING_CHANNEL DOMINANT_PRICING_CHANNEL,
 ROW_NUMBER() OVER (PARTITION BY sndcustomer_key,mth_yr ORDER BY COUNT(1) DESC,MAX(RCVPAYING_DATETIME) DESC) TOP 
 from cex_sandbox.YN_va_kpi_2020_3 
where R12_flag = 'Y'
 group by 1,2,3) A
WHERE A.TOP=1
)

SELECT A.sndcustomer_key, a.mth_yr,
DOMINANT_AGENT_NUMBER,
DOMINANT_AGENT_COMPANY_BRAND, DOMINANT_AGENT_CITY, DOMINANT_AGENT_STATE, 
DOMINANT_AGENT_REGION,  DOMINANT_AGENT_SUPER_REGION,  DOMINANT_AGENT_DMA_CODE, 
DOMINANT_AGENT_DMA_DESC,  DOMINANT_AGENT_ZIP_CODE,  DOMINANT_AGENT_BUSINESS_NAME, 
DOMINANT_AGENT_CLASS_OF_TRADE_CODE, DOMINANT_AGENT_NETWORK_DESC, DOMINANT_AGENT_NETWORK, DOMINANT_AGENT_NETWORK_NAME,
DOMINANT_AGENT_NETWORK_2, 

DOMINANT_RCVAGENT_NUMBER, DOMINANT_RCVAGENT_COMPANY_BRAND, DOMINANT_RCVAGENT_CITY,
DOMINANT_RCVAGENT_REGION, DOMINANT_RCVAGENT_SUPER_REGION, DOMINANT_RCVAGENT_DMA_CODE, 
DOMINANT_RCVAGENT_DMA_DESC, DOMINANT_RCVAGENT_ZIP_CODE, DOMINANT_RCVAGENT_BUSINESS_NAME, 
DOMINANT_RCVAGENT_CLASS_OF_TRADE_CODE, DOMINANT_RCVAGENT_NETWORK_DESC, DOMINANT_RCVAGENT_NETWORK, DOMINANT_RCVAGENT_NETWORK_NAME,
DOMINANT_RCVAGENT_NETWORK_2,

DOMINANT_SNDCOUNTRY_CODE, DOMINANT_RCVCOUNTRY_CODE,
DOMINANT_CORRIDOR,
DOMINANT_CORRIDOR_TYPE,
DOMINANT_CORRIDOR_NAME,      //Pandit CAM-1174 - Add Country Name along with Country Code Across all Report
DOMINANT_SNDCOUNTRY_NAME,
DOMINANT_RCVCOUNTRY_NAME,


DOMINANT_PAY_IN_METHOD,  //GID Change - Pandit
DOMINANT_PAYOUT_METHOD,
DOMINANT_ATTRBUTE_FUNDS_IN,     //Pandit CAM - 1124 To add different Dominance matrixes in SK_Dominance_matrix table
DOMINANT_ATTRBUTE_FUNDS_OUT,    //Pandit 
DOMINANT_COMPANY_BRAND,
DOMINANT_CURRENCY_PAIR,
DOMINANT_PRINCIPAL_BAND,
DOMINANT_PRICING_CHANNEL

from SK_DOMINANT_AGENT_NETWORK a 
left join SK_DOMINANT_CORRIDOR b on a.sndcustomer_key=b.sndcustomer_key and a.mth_yr=b.mth_yr
left join SK_DOMINANT_PAYIN_METHOD c on a.sndcustomer_key=c.sndcustomer_key and a.mth_yr=c.mth_yr
left join SK_DOMINANT_PAYOUT_METHOD d on a.sndcustomer_key=d.sndcustomer_key and a.mth_yr=d.mth_yr
left join SK_DOMINANT_COMPANY_BRAND e on a.sndcustomer_key=e.sndcustomer_key and a.mth_yr=e.mth_yr
left join SK_DOMINANT_PRICING_CHANNEL f on a.sndcustomer_key=f.sndcustomer_key and a.mth_yr=f.mth_yr
left join SK_DOMINANT_ATTRBUTE_FUNDS_IN g on a.sndcustomer_key=g.sndcustomer_key and a.mth_yr=g.mth_yr
left join SK_DOMINANT_ATTRBUTE_FUNDS_OUT h on a.sndcustomer_key=h.sndcustomer_key and a.mth_yr=h.mth_yr
left join SK_DOMINANT_RECEIVE_AGENT_NETWORK i on a.sndcustomer_key=i.sndcustomer_key and a.mth_yr=i.mth_yr
left join SK_DOMINANT_CURRENCY_PAIR j on a.sndcustomer_key=j.sndcustomer_key and a.mth_yr=j.mth_yr
left join SK_DOMINANT_PRINCIPAL_BAND k on a.sndcustomer_key=k.sndcustomer_key and a.mth_yr=k.mth_yr;`}).execute();


$$

--SP-8
;call SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_08();
;create or replace procedure SP_CEM_SCORCARD_MONTHLY_WITHOUT_WEEKLY_08()
returns VARCHAR
language javascript
execute as owner
AS

$$


SP_STMNT_69 = snowflake.createStatement ({sqlText: `grant select on TXN_MASTER_SUPPLEMENT to DNA_RL;`}).execute();
SP_STMNT_70= snowflake.createStatement ({sqlText: `grant select on cust_Membership_date to DNA_RL;`}).execute();
SP_STMNT_71= snowflake.createStatement ({sqlText: `grant select on due_to_dco_txn to DNA_RL;`}).execute();
SP_STMNT_72= snowflake.createStatement ({sqlText: `grant select on TXN_MASTER_SUPPLEMENT_1 to DNA_RL;`}).execute();
SP_STMNT_73= snowflake.createStatement ({sqlText: `grant select on R2D_monthly to DNA_RL;`}).execute();
SP_STMNT_74= snowflake.createStatement ({sqlText: `grant select on air_monthly to DNA_RL;`}).execute();
SP_STMNT_75= snowflake.createStatement ({sqlText: `grant select on winbacks_monthly to DNA_RL;`}).execute();
SP_STMNT_76= snowflake.createStatement ({sqlText: `grant select on one_x_to_2X_and_plus_monthly to DNA_RL;`}).execute();
SP_STMNT_77= snowflake.createStatement ({sqlText: `grant select on one_x_to_2X_monthly to DNA_RL;`}).execute();
SP_STMNT_78= snowflake.createStatement ({sqlText: `grant select on two_x_to_3X_monthly to DNA_RL;`}).execute();
SP_STMNT_79= snowflake.createStatement ({sqlText: `grant select on three_x_to_4X_and_plus_monthly to DNA_RL;`}).execute();
SP_STMNT_80= snowflake.createStatement ({sqlText: `grant select on va_kpi_2020_2 to DNA_RL;`}).execute();
SP_STMNT_81= snowflake.createStatement ({sqlText: `grant select on YN_va_kpi_2020_3 to DNA_RL;`}).execute();
SP_STMNT_82= snowflake.createStatement ({sqlText: `grant select on YN_AIR_dominant_channel to DNA_RL;`}).execute();
SP_STMNT_83= snowflake.createStatement ({sqlText: `grant select on YN_dominant_channel to DNA_RL;`}).execute();
SP_STMNT_84= snowflake.createStatement ({sqlText: `grant select on YN_txn_freq_bucket to DNA_RL;`}).execute();
SP_STMNT_85= snowflake.createStatement ({sqlText: `grant select on AJ_cpm_pref_email_sms_optin to DNA_RL;`}).execute();
SP_STMNT_86= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optin_monthly to DNA_RL;`}).execute();
SP_STMNT_87= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optin_R12 to DNA_RL;`}).execute();
SP_STMNT_88= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optin_monthly to DNA_RL;`}).execute();
SP_STMNT_89= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optin_R12 to DNA_RL;`}).execute();
SP_STMNT_90= snowflake.createStatement ({sqlText: `grant select on AJ_cpm_pref_email_sms_optout to DNA_RL;`}).execute();
SP_STMNT_91= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optout_monthly to DNA_RL;`}).execute();
SP_STMNT_92= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optout_R12 to DNA_RL;`}).execute();
SP_STMNT_93= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optout_monthly to DNA_RL;`}).execute();
SP_STMNT_94= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optout_R12 to DNA_RL;`}).execute();
SP_STMNT_95= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T1 to DNA_RL;`}).execute();
SP_STMNT_96= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T2 to DNA_RL;`}).execute();
SP_STMNT_97= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T3 to DNA_RL;`}).execute();
SP_STMNT_98= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T4 to DNA_RL;`}).execute();
SP_STMNT_99= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T5 to DNA_RL;`}).execute();
SP_STMNT_100= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T6 to DNA_RL;`}).execute();
SP_STMNT_101= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T7 to DNA_RL;`}).execute();
SP_STMNT_102= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T8 to DNA_RL;`}).execute();
SP_STMNT_103= snowflake.createStatement ({sqlText: `grant select on date_table_w to DNA_RL;`}).execute();
SP_STMNT_104= snowflake.createStatement ({sqlText: `grant select on YN_cust_level_flags_counts to DNA_RL;`}).execute();
SP_STMNT_105= snowflake.createStatement ({sqlText: `grant select on CEM_SC_CF_TF_DC to DNA_RL;`}).execute();
SP_STMNT_106= snowflake.createStatement ({sqlText: `grant select on PK_card_redemption_dates to DNA_RL;`}).execute();
SP_STMNT_107= snowflake.createStatement ({sqlText: `grant select on yn_monthly_redemptions to DNA_RL;`}).execute();
SP_STMNT_108= snowflake.createStatement ({sqlText: `grant select on yn_monthly_R12_redemptions to DNA_RL;`}).execute();
SP_STMNT_109= snowflake.createStatement ({sqlText: `grant select on yn_monthly_PR12_redemptions to DNA_RL;`}).execute();
SP_STMNT_110= snowflake.createStatement ({sqlText: `grant select on yn_contacted_customers to DNA_RL;`}).execute();
SP_STMNT_111= snowflake.createStatement ({sqlText: `grant select on cust_membership_date_R12 to DNA_RL;`}).execute();
SP_STMNT_112= snowflake.createStatement ({sqlText: `grant select on YN_cust_flags to DNA_RL;`}).execute();
SP_STMNT_113= snowflake.createStatement ({sqlText: `grant select on YN_cust_flags_rolling to DNA_RL;`}).execute();
SP_STMNT_114= snowflake.createStatement ({sqlText: `grant select on YN_Va_kpi_2020_output_engagement_cust_level to DNA_RL;`}).execute();
SP_STMNT_115= snowflake.createStatement ({sqlText: `grant select on YN_Va_kpi_2020_output_engagement to DNA_RL;`}).execute();
SP_STMNT_116= snowflake.createStatement ({sqlText: `grant select on yn_existing_inactive_in_R1 to DNA_RL;`}).execute();
SP_STMNT_117= snowflake.createStatement ({sqlText: `grant select on YN_EXISTING_INACTIVE_IN_R2 to DNA_RL;`}).execute();
SP_STMNT_118= snowflake.createStatement ({sqlText: `grant select on yn_R1_return_rate_in_60_days to DNA_RL;`}).execute();
SP_STMNT_119= snowflake.createStatement ({sqlText: `grant select on yn_R1_return_rate_in_60_days_1 to DNA_RL;`}).execute();
SP_STMNT_120= snowflake.createStatement ({sqlText: `grant select on yn_R1_return_rate_in_60_days_2 to DNA_RL;`}).execute();
SP_STMNT_121= snowflake.createStatement ({sqlText: `grant select on yn_Va_kpi_2020_output_v to DNA_RL;`}).execute();
SP_STMNT_122= snowflake.createStatement ({sqlText: `grant select on retention_base_backup to DNA_RL;`}).execute();
SP_STMNT_123= snowflake.createStatement ({sqlText: `grant select on retention_base to DNA_RL;`}).execute();
SP_STMNT_124= snowflake.createStatement ({sqlText: `grant select on YN_Va_kpi_2020_output_engagement_v to DNA_RL;`}).execute();
SP_STMNT_125= snowflake.createStatement ({sqlText: `grant select on yn_output_retention to DNA_RL;`}).execute();
SP_STMNT_126= snowflake.createStatement ({sqlText: `grant select on Va_kpi_2020_output_v_backup to DNA_RL;`}).execute();
SP_STMNT_127= snowflake.createStatement ({sqlText: `grant select on Va_kpi_2020_output_v to DNA_RL;`}).execute();
SP_STMNT_128= snowflake.createStatement ({sqlText: `grant select on r2d_post to DNA_RL;`}).execute();
SP_STMNT_129= snowflake.createStatement ({sqlText: `grant select on winback_post to DNA_RL;`}).execute();
SP_STMNT_130= snowflake.createStatement ({sqlText: `grant select on ONEX_TO_TWOX_POST to DNA_RL;`}).execute();
SP_STMNT_131= snowflake.createStatement ({sqlText: `grant select on monthly_va_kpi_2020_output_v_SCORE to DNA_RL;`}).execute();
SP_STMNT_131_001= snowflake.createStatement ({sqlText: `grant select on SK_DOMINANCY_METRICS to DNA_RL;`}).execute();					//CAR-871 Saif @
SP_STMNT_131_002= snowflake.createStatement ({sqlText: `grant select on SK_CONSOLIDATED_PROPENSITY_SCORES to DNA_RL;`}).execute();		//CAR-871 Saif @
SP_STMNT_131_002= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T8_IPF_13_Months to DNA_RL;`}).execute();
SP_STMNT_131_002= snowflake.createStatement ({sqlText: `grant select on CEF_MEASUREMENT_CUST_LEVEL_RFM_CHG_DATA to digital_rl;`}).execute();  //Access requested by Ashish Jadhav
SP_STMNT_131_002= snowflake.createStatement ({sqlText: `grant select on SK_DOMINANCY_METRICS to digital_rl;`}).execute();


SP_STMNT__69 = snowflake.createStatement ({sqlText: `grant select on TXN_MASTER_SUPPLEMENT to MKT_RL;`}).execute();
SP_STMNT__70= snowflake.createStatement ({sqlText: `grant select on cusT_Membership_date to MKT_RL;`}).execute();
SP_STMNT__71= snowflake.createStatement ({sqlText: `grant select on due_to_dco_txn to MKT_RL;`}).execute();
SP_STMNT__72= snowflake.createStatement ({sqlText: `grant select on TXN_MASTER_SUPPLEMENT_1 to MKT_RL;`}).execute();
SP_STMNT__73= snowflake.createStatement ({sqlText: `grant select on R2D_monthly to MKT_RL;`}).execute();
SP_STMNT__74= snowflake.createStatement ({sqlText: `grant select on air_monthly to MKT_RL;`}).execute();
SP_STMNT__75= snowflake.createStatement ({sqlText: `grant select on winbacks_monthly to MKT_RL;`}).execute();
SP_STMNT__76= snowflake.createStatement ({sqlText: `grant select on one_x_to_2X_and_plus_monthly to MKT_RL;`}).execute();
SP_STMNT__77= snowflake.createStatement ({sqlText: `grant select on one_x_to_2X_monthly to MKT_RL;`}).execute();
SP_STMNT__78= snowflake.createStatement ({sqlText: `grant select on two_x_to_3X_monthly to MKT_RL;`}).execute();
SP_STMNT__79= snowflake.createStatement ({sqlText: `grant select on three_x_to_4X_and_plus_monthly to MKT_RL;`}).execute();
SP_STMNT__80= snowflake.createStatement ({sqlText: `grant select on va_kpi_2020_2 to MKT_RL;`}).execute();
SP_STMNT__81= snowflake.createStatement ({sqlText: `grant select on YN_va_kpi_2020_3 to MKT_RL;`}).execute();
SP_STMNT__82= snowflake.createStatement ({sqlText: `grant select on YN_AIR_dominanT_channel to MKT_RL;`}).execute();
SP_STMNT__83= snowflake.createStatement ({sqlText: `grant select on YN_dominanT_channel to MKT_RL;`}).execute();
SP_STMNT__84= snowflake.createStatement ({sqlText: `grant select on YN_txn_freq_bucket to MKT_RL;`}).execute();
SP_STMNT__85= snowflake.createStatement ({sqlText: `grant select on AJ_cpm_pref_email_sms_optin to MKT_RL;`}).execute();
SP_STMNT__86= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optin_monthly to MKT_RL;`}).execute();
SP_STMNT__87= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optin_R12 to MKT_RL;`}).execute();
SP_STMNT__88= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optin_monthly to MKT_RL;`}).execute();
SP_STMNT__89= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optin_R12 to MKT_RL;`}).execute();
SP_STMNT__90= snowflake.createStatement ({sqlText: `grant select on AJ_cpm_pref_email_sms_optout to MKT_RL;`}).execute();
SP_STMNT__91= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optouT_monthly to MKT_RL;`}).execute();
SP_STMNT__92= snowflake.createStatement ({sqlText: `grant select on cpm_pref_email_optouT_R12 to MKT_RL;`}).execute();
SP_STMNT__93= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optouT_monthly to MKT_RL;`}).execute();
SP_STMNT__94= snowflake.createStatement ({sqlText: `grant select on cpm_pref_sms_optouT_R12 to MKT_RL;`}).execute();
SP_STMNT__95= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T1 to MKT_RL;`}).execute();
SP_STMNT__96= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T2 to MKT_RL;`}).execute();
SP_STMNT__97= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T3 to MKT_RL;`}).execute();
SP_STMNT__98= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T4 to MKT_RL;`}).execute();
SP_STMNT__99= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T5 to MKT_RL;`}).execute();
SP_STMNT__100= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T6 to MKT_RL;`}).execute();
SP_STMNT__101= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T7 to MKT_RL;`}).execute();
SP_STMNT__102= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T8 to MKT_RL;`}).execute();
SP_STMNT__103= snowflake.createStatement ({sqlText: `grant select on date_table_w to MKT_RL;`}).execute();
SP_STMNT__104= snowflake.createStatement ({sqlText: `grant select on YN_cusT_level_flags_counts to MKT_RL;`}).execute();
SP_STMNT__105= snowflake.createStatement ({sqlText: `grant select on CEM_SC_CF_TF_DC to MKT_RL;`}).execute();
SP_STMNT__106= snowflake.createStatement ({sqlText: `grant select on PK_card_redemption_dates to MKT_RL;`}).execute();
SP_STMNT__107= snowflake.createStatement ({sqlText: `grant select on yn_monthly_redemptions to MKT_RL;`}).execute();
SP_STMNT__108= snowflake.createStatement ({sqlText: `grant select on yn_monthly_R12_redemptions to MKT_RL;`}).execute();
SP_STMNT__109= snowflake.createStatement ({sqlText: `grant select on yn_monthly_PR12_redemptions to MKT_RL;`}).execute();
SP_STMNT__110= snowflake.createStatement ({sqlText: `grant select on yn_contacted_customers to MKT_RL;`}).execute();
SP_STMNT__111= snowflake.createStatement ({sqlText: `grant select on cusT_membership_date_R12 to MKT_RL;`}).execute();
SP_STMNT__112= snowflake.createStatement ({sqlText: `grant select on YN_cusT_flags to MKT_RL;`}).execute();
SP_STMNT__113= snowflake.createStatement ({sqlText: `grant select on YN_cusT_flags_rolling to MKT_RL;`}).execute();
SP_STMNT__114= snowflake.createStatement ({sqlText: `grant select on YN_Va_kpi_2020_outpuT_engagemenT_cusT_level to MKT_RL;`}).execute();
SP_STMNT__115= snowflake.createStatement ({sqlText: `grant select on YN_Va_kpi_2020_outpuT_engagement to MKT_RL;`}).execute();
SP_STMNT__116= snowflake.createStatement ({sqlText: `grant select on yn_existing_inactive_in_R1 to MKT_RL;`}).execute();
SP_STMNT__117= snowflake.createStatement ({sqlText: `grant select on YN_EXISTING_INACTIVE_IN_R2 to MKT_RL;`}).execute();
SP_STMNT__118= snowflake.createStatement ({sqlText: `grant select on yn_R1_return_rate_in_60_days to MKT_RL;`}).execute();
SP_STMNT__119= snowflake.createStatement ({sqlText: `grant select on yn_R1_return_rate_in_60_days_1 to MKT_RL;`}).execute();
SP_STMNT__120= snowflake.createStatement ({sqlText: `grant select on yn_R1_return_rate_in_60_days_2 to MKT_RL;`}).execute();
SP_STMNT__121= snowflake.createStatement ({sqlText: `grant select on yn_Va_kpi_2020_outpuT_v to MKT_RL;`}).execute();
SP_STMNT__122= snowflake.createStatement ({sqlText: `grant select on retention_base_backup to MKT_RL;`}).execute();
SP_STMNT__123= snowflake.createStatement ({sqlText: `grant select on retention_base to MKT_RL;`}).execute();
SP_STMNT__124= snowflake.createStatement ({sqlText: `grant select on YN_Va_kpi_2020_outpuT_engagemenT_v to MKT_RL;`}).execute();
SP_STMNT__125= snowflake.createStatement ({sqlText: `grant select on yn_outpuT_retention to MKT_RL;`}).execute();
SP_STMNT__126= snowflake.createStatement ({sqlText: `grant select on Va_kpi_2020_outpuT_v_backup to MKT_RL;`}).execute();
SP_STMNT__127= snowflake.createStatement ({sqlText: `grant select on Va_kpi_2020_outpuT_v to MKT_RL;`}).execute();
SP_STMNT__128= snowflake.createStatement ({sqlText: `grant select on r2d_post to MKT_RL;`}).execute();
SP_STMNT__129= snowflake.createStatement ({sqlText: `grant select on winback_post to MKT_RL;`}).execute();
SP_STMNT__130= snowflake.createStatement ({sqlText: `grant select on ONEX_TO_TWOX_POST to MKT_RL;`}).execute();
SP_STMNT__131= snowflake.createStatement ({sqlText: `grant select on monthly_va_kpi_2020_outpuT_v_SCORE to MKT_RL;`}).execute();
SP_STMNT_131_001= snowflake.createStatement ({sqlText: `grant select on SK_DOMINANCY_METRICS to MKT_RL;`}).execute();					//CAR-871 Saif @
SP_STMNT_131_002= snowflake.createStatement ({sqlText: `grant select on SK_CONSOLIDATED_PROPENSITY_SCORES to MKT_RL;`}).execute();		//CAR-871 Saif @
SP_STMNT_131_002= snowflake.createStatement ({sqlText: `grant select on RESP_IPF_CALC_T8_IPF_13_Months to MKT_RL;`}).execute();
/*
--==============================R12 Active=====================================
--=============================== Validation 

select count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where country_name is not null and RCVPAYING_DATETIME >= '2021-06-01' and RCVPAYING_DATETIME < '2022-06-01';--55 million 
------------------------------------------------------
select count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2021-06-01' and RCVPAYING_DATETIME < '2022-06-01' and loyalty_member_flag='Y';--24 million 
-------------------------------------------------------
select count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2021-06-01' and RCVPAYING_DATETIME < '2022-06-01' and 
((email_address_on_file_flag='Y' and opt_email='I') or (mobile_number_on_file_flag='Y' and opt_sms='I'));--11.2 million 
-----------------------------------------------------------
select count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join (select distinct card_no from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" where redm_date >= '2020-02-01' ) b 
on a.sndcustomer_key=b.card_no 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' ;--1.3 million 


--====================================New activations========================
select count(1) from 
(select sndcustomer_key,min(RCVPAYING_DATETIME) as RCVPAYING_DATETIME from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
 where country_name is not null  group by 1 ) a 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' ;--23.3 million ( life time new ) 

select count(distinct case when b.sndcustomer_key is null then a.sndcustomer_key end) from 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
 where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' group by 1 ) a
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
 where RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01' group by 1 ) b 
 on a.sndcustomer_key=b.sndcustomer_key ;--28.5 million ( R12 based new ) 
-----------------------------------------------------------------------------
select count(distinct customer_key) from cpm_pref_email_sms_optin where event_created_date >= '01-FEB-2020'
and event_created_date < '01-FEB-2021';

select rolling_month,count(1) from cpm_pref_email_optin_R12 group by 1 order by 1 desc;
select rolling_month,count(1) from cpm_pref_sms_optin_R12 group by 1 order by 1 desc;
select a.rolling_month,count(distinct a.customer_key) from cpm_pref_sms_optin_R12 a 
inner join cpm_pref_email_optin_R12 b on a.customer_key=b.customer_key and a.rolling_month=b.rolling_month group by 1 order by 1 desc ;


select
--count(distinct customer_key)
count(distinct customer_key )
from 
"WUDNA"."SUMMARY_GEN"."CPM_PREF_EVENT_HIST_VW" a 
  inner join summary_gen.CDB_ID_GALACTIC_ID_MAPPING_VW c on a.CDB_CUSTOMER_ID=c.cdb_customer_id
  inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b 
  on c.rtra_galactic_id=b.cdb_customer_id 
where
event_created_date >= '2020-02-01'
and event_created_date < '2021-02-01'
and (a.OPT_EMAIL='I' OR a.OPT_SMS='I');--39 million  
-----------------------------------------------------------------------
select count(distinct customer_key) from cust_membership_date
where membership_date >= '2020-02-01' and membership_date < '2021-02-01';--13.5 million 
-----------------------------------------------------------------------------------------------
select count(1) from 
(select card_no,min(redm_date) as redm_date from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" group by 1 ) a 
where redm_date >= '2020-02-01' and redm_date < '2021-02-01' ;--600k ( life time new redeemers) 

--======================================retention====================================================

select count(distinct a.sndcustomer_key),count(distinct b.sndcustomer_key),count(distinct b.sndcustomer_key)/count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01';--55 million 
------------------------------------------------------
select count(distinct a.sndcustomer_key),count(distinct b.sndcustomer_key),count(distinct b.sndcustomer_key)/count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" c on a.sndcustomer_key=c.customer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01' and loyalty_member_flag='Y';
-------------------------------------------------------
select count(distinct a.sndcustomer_key),count(distinct c.sndcustomer_key),count(distinct c.sndcustomer_key)/count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01') c 
on a.sndcustomer_key=c.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01' and 
((email_address_on_file_flag='Y' and opt_email='I') or (mobile_number_on_file_flag='Y' and opt_sms='I'));--11.2 million 
-----------------------------------------------------------
select count(distinct a.sndcustomer_key),count(distinct c.sndcustomer_key),count(distinct c.sndcustomer_key)/count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join (select distinct card_no from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" 
            where redm_date >= '2019-02-01' and redm_date < '2020-02-01' ) b 
on a.sndcustomer_key=b.card_no 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01') c 
on a.sndcustomer_key=c.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01' ;--1.3 million 

--================================================stickyness========================================

select 
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)/
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" where country_name is not null ;
------------------------------------------------------
select
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)/
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' and loyalty_member_flag='Y';--24 million 
-------------------------------------------------------
select
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)/
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' and 
((email_address_on_file_flag='Y' and opt_email='I') or (mobile_number_on_file_flag='Y' and opt_sms='I'));--11.2 million 
-----------------------------------------------------------
select 
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end),
count(distinct case when RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)/
count(distinct case when RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then sndcustomer_key end)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join (select distinct card_no from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" where redm_date >= '2020-02-01' ) b 
on a.sndcustomer_key=b.card_no 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' ;--1.3 million 

select 
count(distinct case when redm_date >= '2021-01-01' and redm_date < '2021-02-01' then card_no end),
count(distinct case when redm_date >= '2020-02-01' and redm_date < '2021-02-01' then card_no end),
count(distinct case when redm_date >= '2021-01-01' and redm_date < '2021-02-01' then card_no end)/
count(distinct case when redm_date >= '2020-02-01' and redm_date < '2021-02-01' then card_no end)
from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" ;--1.3 million 

--==================================================New activations=====================================

select count(distinct a.card_no),count(distinct b.card_no) from 
(select distinct card_no  from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" 
 where redm_date >= '2020-02-01' and redm_date < '2021-02-01'  ) a 
 left outer join 
 (select distinct card_no  from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" 
 where redm_date >= '2019-02-01' and redm_date < '2020-02-01'  ) b 
 on a.card_no=b.card_no  ;--600k ( life time new redeemers) 
 
 select count(distinct a.card_no),count(distinct b.sndcustomer_key) from 
(select distinct card_no  from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" 
 where redm_date >= '2020-02-01' and redm_date < '2021-02-01'  ) a 
 left outer join 
 (select * from YN_cust_level_flags_counts where mth_yr='2021-01-01' and r12_txns > 0 and pr12_txns =0 ) b 
 on a.card_no=b.sndcustomer_key  ;--600k ( life time new redeemers) 
 
--===================================R12 customer over view 
--R36
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
where country_name is not null and RCVPAYING_DATETIME >= '2018-02-01' and RCVPAYING_DATETIME < '2021-02-01';--55 million 
--R12
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01';--55 million 
--Lapsing
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2021-02-01'
and b.sndcustomer_key is null;--
--Lapsed 
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2021-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2018-02-01' and RCVPAYING_DATETIME < '2021-02-01'
and b.sndcustomer_key is null;--

--======================================================R12 active breakup 
--New 
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2018-02-01' and RCVPAYING_DATETIME < '2020-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01'
and b.sndcustomer_key is null;--
--Retained
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01';--
--Winbacks 
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2018-02-01' and RCVPAYING_DATETIME < '2019-02-01') c 
on a.sndcustomer_key=c.sndcustomer_key
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2019-02-01' and RCVPAYING_DATETIME < '2020-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01'
and b.sndcustomer_key is null;--

--==========================R12 waterfall 
--New to franchise 
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2018-01-01' and  RCVPAYING_DATETIME < '2021-01-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01'
and b.sndcustomer_key is null;--
--winbacks 
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2018-01-01' and  RCVPAYING_DATETIME < '2020-01-01') c 
on a.sndcustomer_key=c.sndcustomer_key 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2020-01-01' and  RCVPAYING_DATETIME < '2021-01-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2021-01-01' and RCVPAYING_DATETIME < '2021-02-01'
and b.sndcustomer_key is null;--
--churns 
select count(distinct a.sndcustomer_key)
from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
left outer join 
(select distinct sndcustomer_key from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where  RCVPAYING_DATETIME >= '2020-02-01' and  RCVPAYING_DATETIME < '2021-02-01') b 
on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2020-01-01' and RCVPAYING_DATETIME < '2021-01-01'
and b.sndcustomer_key is null;--

--==================================================customer engagement 
--TPC 

select count(1)/count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01';--55 million 
------------------------------------------------------
select count(1)/count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' and loyalty_member_flag='Y';--24 million 
-------------------------------------------------------
select count(1)/count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join "WUDNA"."SUMMARY_GEN"."CUSTOMER_MASTER_VW" b on a.sndcustomer_key=b.customer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' and 
((email_address_on_file_flag='Y' and opt_email='I') or (mobile_number_on_file_flag='Y' and opt_sms='I'));--11.2 million 
-----------------------------------------------------------
select count(1)/count(distinct sndcustomer_key) from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1" a 
inner join (select distinct card_no from "WUDNA"."SUMMARY_GEN"."REDMCHNL_REDEMPTIONHISTORY_VW" where redm_date >= '2020-02-01' ) b 
on a.sndcustomer_key=b.card_no 
where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' ;--1.3 million 

--Tenure 
select 
sum(tenure)/count(distinct sndcustomer_key)
from 
(select a.sndcustomer_key,datediff(month,min(RCVPAYING_DATETIME),'2021-02-01') as tenure from "WUDNA"."CEX_SANDBOX"."TXN_MASTER_SUPPLEMENT_1"  a 
 inner join 
 (select distinct sndcustomer_key from TXN_MASTER_SUPPLEMENT_1 where RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01') b 
 on a.sndcustomer_key=b.sndcustomer_key 
where country_name is not null and RCVPAYING_DATETIME >= '2018-02-01' and RCVPAYING_DATETIME < '2021-02-01' group by 1 );--55 million 
----Digital dominant 

select 
count(case when digi_txns >= ret_txns then 1 end)/count(1),
count(case when digi_txns >= ret_txns then 1 end),
count(case when digi_txns = tot_txns then 1 end),
count(case when digi_txns > 0 then 1 end)
from (
select sndcustomer_key,
count(case when pricing_channel in ('POS','TMT','AIR') then 1 end ) as ret_txns,
count(case when pricing_channel in ('WEB','APP') then 1 end ) as digi_txns,
count(1) as tot_txns 
from TXN_MASTER_SUPPLEMENT_1 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' group by 1 );--55 million 

----App dominant 

select 
count(case when digi_txns >= ret_txns then 1 end)/count(1),
count(case when digi_txns >= ret_txns then 1 end),
count(case when digi_txns = tot_txns then 1 end),
count(case when digi_txns > 0 then 1 end)
from (
select sndcustomer_key,
count(case when pricing_channel in ('WEB','POS','TMT','AIR') then 1 end ) as ret_txns,
count(case when pricing_channel in ('APP') then 1 end ) as digi_txns,
  count(1) as tot_txns 
from TXN_MASTER_SUPPLEMENT_1 
where country_name is not null and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' group by 1 );--55 million 


--- air_customers

select count (distinct case when payin_type = 'ACCOUNT'  THEN sndcustomer_key end), count(1)

from TXN_MASTER_SUPPLEMENT_1

where country_name is not null
--and RCVPAYING_DATETIME >= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01'
and pricing_channel = 'POS';


select distinct payin_type from TXN_MASTER_SUPPLEMENT_1;

select sndcustomer_key, count(case when RCVPAYING_DATETIME>= '2020-02-01' and RCVPAYING_DATETIME < '2021-02-01' then 1 end ) as r12_txns,
count(case when RCVPAYING_DATETIME>= '2020-01-01' and RCVPAYING_DATETIME < '2021-01-01' then 1 end )  as pr12_txns 
from TXN_MASTER_SUPPLEMENT_1
group by 1
having pr12_txns = 2 and r12_txns =3;

*/ 




$$
